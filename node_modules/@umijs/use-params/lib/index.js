"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUrlSearchParams = useUrlSearchParams;

var _react = require("react");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 *
 * @param {object} params
 * @returns {URL}
 */
function setQueryToCurrentUrl(params) {
  var _a;

  var _window = window,
      URL = _window.URL;
  var url = new URL((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href);
  Object.keys(params).forEach(function (key) {
    var value = params[key];

    if (value !== null && value !== undefined) {
      if (Array.isArray(value)) {
        url.searchParams.delete(key);
        value.forEach(function (valueItem) {
          url.searchParams.append(key, valueItem);
        });
      } else if (value instanceof Date) {
        if (!Number.isNaN(value.getTime())) {
          url.searchParams.set(key, value.toISOString());
        }
      } else if (_typeof(value) === 'object') {
        url.searchParams.set(key, JSON.stringify(value));
      } else {
        url.searchParams.set(key, value);
      }
    } else {
      url.searchParams.delete(key);
    }
  });
  return url;
}

function useUrlSearchParams() {
  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _a;
  /**
   * The main idea of this hook is to make things response to change of `window.location.search`,
   * so no need for introducing new state (in the mean time).
   * Whenever `window.location.search` is changed but  not cause re-render, call `forceUpdate()`.
   * Whenever the component - user of this hook - re-render, this hook should return
   * the query object that corresponse to the current `window.location.search`
   */


  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      forceUpdate = _useState2[1];

  var locationSearch = (_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.search;
  /**
   * @type {URLSearchParams}
   */

  var urlSearchParams = (0, _react.useMemo)(function () {
    return new URLSearchParams(locationSearch || {});
  }, [locationSearch]);
  var params = (0, _react.useMemo)(function () {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefined || !window.URL) return {};
    var result = []; // @ts-ignore

    var _iterator = _createForOfIteratorHelper(urlSearchParams),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;
        result.push({
          key: item[0],
          value: item[1]
        });
      } // group by key

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    result = result.reduce(function (acc, val) {
      (acc[val.key] = acc[val.key] || []).push(val);
      return acc;
    }, {});
    result = Object.keys(result).map(function (key) {
      var valueGroup = result[key];

      if (valueGroup.length === 1) {
        return [key, valueGroup[0].value];
      }

      return [key, valueGroup.map(function (_ref) {
        var value = _ref.value;
        return value;
      })];
    });
    var newParams = Object.assign({}, initial);
    result.forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      newParams[key] = parseValue(key, value, {}, initial);
    });
    return newParams;
  }, [urlSearchParams]);

  function redirectToNewSearchParams(newParams) {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefined || !window.URL) return;
    var url = setQueryToCurrentUrl(newParams);

    if (window.location.search !== url.search) {
      window.history.replaceState({}, '', url.toString());
    }

    if (urlSearchParams.toString() !== url.searchParams.toString()) {
      forceUpdate({});
    }
  }

  (0, _react.useEffect)(function () {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefined || !window.URL) return;
    redirectToNewSearchParams(Object.assign(Object.assign({}, initial), params));
  }, [params]);

  var setParams = function setParams(newParams) {
    redirectToNewSearchParams(newParams);
  };

  (0, _react.useEffect)(function () {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefined || !window.URL) return function () {};

    var onPopState = function onPopState() {
      forceUpdate({});
    };

    window.addEventListener('popstate', onPopState);
    return function () {
      window.removeEventListener('popstate', onPopState);
    };
  }, []);
  return [params, setParams];
}

var booleanValues = {
  true: true,
  false: false
};

function parseValue(key, _value, types, defaultParams) {
  if (!types) return _value;
  var type = types[key];
  var value = _value === undefined ? defaultParams[key] : _value;

  if (type === Number) {
    return Number(value);
  }

  if (type === Boolean || _value === 'true' || _value === 'false') {
    return booleanValues[value];
  }

  if (Array.isArray(type)) {
    // eslint-disable-next-line eqeqeq
    return type.find(function (item) {
      return item == value;
    }) || defaultParams[key];
  }

  return value;
}