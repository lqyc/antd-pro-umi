"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const winPath = _umi().utils.winPath,
      Mustache = _umi().utils.Mustache;

var _default = api => {
  const helmetPkgPath = winPath((0, _path().dirname)(require.resolve('react-helmet/package')));
  api.addDepInfo(() => {
    return [{
      name: 'react-helmet',
      range: require('../package.json').dependencies['react-helmet'],
      alias: [helmetPkgPath]
    }];
  });
  api.onGenerateFiles( /*#__PURE__*/_asyncToGenerator(function* () {
    if (api.config.ssr) {
      const runtimeTpl = (0, _path().join)(__dirname, 'templates', 'runtime.tpl');
      const runtimeContent = (0, _fs().readFileSync)(runtimeTpl, 'utf-8');
      api.writeTmpFile({
        path: 'plugin-helmet/runtime.ts',
        content: Mustache.render(runtimeContent, {
          HelmetPkg: helmetPkgPath,
          SSR: !!api.config.ssr
        })
      });
    }

    const exportsTpl = (0, _path().join)(__dirname, 'templates', 'exports.tpl');
    const exportsContent = (0, _fs().readFileSync)(exportsTpl, 'utf-8');
    api.writeTmpFile({
      path: 'plugin-helmet/exports.ts',
      content: Mustache.render(exportsContent, {
        HelmetPkg: helmetPkgPath
      })
    });
  }));
  api.addRuntimePlugin(() => {
    var _api$config;

    return ((_api$config = api.config) === null || _api$config === void 0 ? void 0 : _api$config.ssr) ? [winPath((0, _path().join)(api.paths.absTmpPath, 'plugin-helmet', 'runtime.ts'))] : [];
  });
  api.addUmiExports(() => [{
    exportAll: true,
    source: '../plugin-helmet/exports'
  }]);
};

exports.default = _default;