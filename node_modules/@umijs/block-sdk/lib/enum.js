"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Type = exports.AssetType = exports.UIAssetType = exports.DEPS_TYPE = exports.PKG_ASSETS_META = exports.ResourceType = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 资产类型：
 * 在 umi ui 中，类型有两个维度：
 * 1、资源类型 ResourceType ：从资产的来源来分类，目前有 dumi 资产、git 资产、...
 * 2、资产类型 AssetType：从资产中包括的类型，目前是有 component、block、template
 */
var ResourceType;
exports.ResourceType = ResourceType;

(function (ResourceType) {
  ResourceType["dumi"] = "dumi";
  ResourceType["git"] = "git";
})(ResourceType || (exports.ResourceType = ResourceType = {}));

const PKG_ASSETS_META = 'dumiAssets';
exports.PKG_ASSETS_META = PKG_ASSETS_META;
var DEPS_TYPE;
exports.DEPS_TYPE = DEPS_TYPE;

(function (DEPS_TYPE) {
  DEPS_TYPE["FILE"] = "FILE";
  DEPS_TYPE["NPM"] = "NPM";
})(DEPS_TYPE || (exports.DEPS_TYPE = DEPS_TYPE = {}));

var UIAssetType;
exports.UIAssetType = UIAssetType;

(function (UIAssetType) {
  UIAssetType["component"] = "component";
  UIAssetType["block"] = "block";
  UIAssetType["template"] = "template";
})(UIAssetType || (exports.UIAssetType = UIAssetType = {}));

var AssetType;
exports.AssetType = AssetType;

(function (AssetType) {
  AssetType["COMPONENT"] = "component";
  AssetType["BLOCK"] = "block";
  AssetType["TEMPLATE"] = "template";
})(AssetType || (exports.AssetType = AssetType = {}));

var Type;
exports.Type = Type;

(function (Type) {
  Type["File"] = "FILE";
  Type["Npm"] = "NPM";
})(Type || (exports.Type = Type = {}));