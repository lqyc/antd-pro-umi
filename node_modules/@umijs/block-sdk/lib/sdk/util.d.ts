import * as t from '@babel/types';
export declare function findExportDefaultDeclaration(programNode: any): t.ArrayExpression | t.FunctionDeclaration | t.ClassDeclaration | t.TSDeclareFunction | t.MemberExpression | t.AssignmentExpression | t.BinaryExpression | t.CallExpression | t.ConditionalExpression | t.FunctionExpression | t.Identifier | t.StringLiteral | t.NumericLiteral | t.NullLiteral | t.BooleanLiteral | t.RegExpLiteral | t.LogicalExpression | t.NewExpression | t.ObjectExpression | t.SequenceExpression | t.ParenthesizedExpression | t.ThisExpression | t.UnaryExpression | t.UpdateExpression | t.ArrowFunctionExpression | t.ClassExpression | t.MetaProperty | t.Super | t.TaggedTemplateExpression | t.TemplateLiteral | t.YieldExpression | t.TypeCastExpression | t.JSXElement | t.JSXFragment | t.AwaitExpression | t.BindExpression | t.OptionalMemberExpression | t.PipelinePrimaryTopicReference | t.OptionalCallExpression | t.Import | t.DoExpression | t.BigIntLiteral | t.TSAsExpression | t.TSTypeAssertion | t.TSNonNullExpression;
export declare function findImportNodes(programNode: any): any;
export declare function getValidStylesName(path: any): string;
export declare function combineImportNodes(programNode: any, originImportNodes: any, newImportNodes: any, absolutePath: any, stylesName: any): void;
export declare function getIdentifierDeclaration(node: any, path: any): any;
export declare function isReactCreateElement(node: any): boolean;
export declare function isJSXElement(node: any): boolean;
export declare function haveChildren(node: any): number | boolean;
/**
 * React child function
 * <Bar>
 *  {foo => <div />}
 * </Bar>
 *
 * or
 * React.createElement(Media, { query: "(max-width: 599px)" }, isMobile => {} })
 * @param node
 */
export declare function isChildFunc(node: any): any;
export declare function getReturnNode(node: any, path: any): {
    node: any;
    replace(newNode: any): void;
};
export declare function findIndex(arr: any, index: any, fn: any): any;
export declare function parseContent(code: any): t.File;
