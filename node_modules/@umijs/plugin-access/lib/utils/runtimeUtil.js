"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverseModifyRoutes = traverseModifyRoutes;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function traverseModifyRoutes(routes, access) {
  var resultRoutes = [].concat(routes).map(function (resultRoute) {
    var routes = resultRoute.routes;

    if (routes && (routes === null || routes === void 0 ? void 0 : routes.map)) {
      return _objectSpread(_objectSpread({}, resultRoute), {}, {
        // return new route to routes.
        routes: routes === null || routes === void 0 ? void 0 : routes.map(function (route) {
          return _objectSpread({}, route);
        })
      });
    }

    return resultRoute;
  });
  return resultRoutes.map(function (currentRoute) {
    var currentRouteAccessible = typeof currentRoute.unaccessible === 'boolean' ? !currentRoute.unaccessible : true; // 判断路由是否有权限的具体代码

    if (currentRoute && currentRoute.access) {
      if (typeof currentRoute.access !== 'string') {
        throw new Error('[plugin-access]: "access" field set in "' + currentRoute.path + '" route should be a string.');
      }

      var accessProp = access[currentRoute.access]; // 如果是方法需要执行以下

      if (typeof accessProp === 'function') {
        currentRouteAccessible = accessProp(currentRoute);
      } else if (typeof accessProp === 'boolean') {
        // 不是方法就直接 copy
        currentRouteAccessible = accessProp;
      }

      currentRoute.unaccessible = !currentRouteAccessible;
    } // 筛选子路由


    if (currentRoute.routes || currentRoute.childRoutes) {
      var childRoutes = currentRoute.routes || currentRoute.childRoutes;

      if (!Array.isArray(childRoutes)) {
        return currentRoute;
      } // 父亲没权限，理论上每个孩子都没权限
      // 可能有打平 的事情发生，所以都执行一下


      childRoutes.forEach(function (childRoute) {
        childRoute.unaccessible = !currentRouteAccessible;
      });
      var finallyChildRoute = traverseModifyRoutes(childRoutes, access); // 如果每个子节点都没有权限，那么自己也属于没有权限

      var isAllChildRoutesUnaccessible = Array.isArray(finallyChildRoute) && finallyChildRoute.every(function (route) {
        return route.unaccessible;
      });

      if (!currentRoute.unaccessible && isAllChildRoutesUnaccessible) {
        currentRoute.unaccessible = true;
      }

      if (finallyChildRoute && (finallyChildRoute === null || finallyChildRoute === void 0 ? void 0 : finallyChildRoute.length) > 0) {
        return _objectSpread(_objectSpread({}, currentRoute), {}, {
          routes: finallyChildRoute
        });
      }

      delete currentRoute.routes;
    }

    return currentRoute;
  });
}