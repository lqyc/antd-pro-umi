import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import DOM from '../../utils/dom';
import { buttonStillPressed } from './util';

var MouseHandler = function () {
  function MouseHandler(options) {
    _classCallCheck(this, MouseHandler);

    this.enabled = void 0;
    this.active = void 0;
    this.lastPoint = void 0;
    this.eventButton = void 0;
    this.moved = void 0;
    this.clickTolerance = void 0;
    this.reset();
    this.clickTolerance = options.clickTolerance || 1;
  }

  _createClass(MouseHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      this.moved = false;
      delete this.lastPoint;
      delete this.eventButton;
    }
  }, {
    key: "mousedown",
    value: function mousedown(e, point) {
      if (this.lastPoint) {
        return;
      }

      var eventButton = DOM.mouseButton(e);

      if (!this.correctButton(e, eventButton)) {
        return;
      }

      this.lastPoint = point;
      this.eventButton = eventButton;
    }
  }, {
    key: "mousemoveWindow",
    value: function mousemoveWindow(e, point) {
      var lastPoint = this.lastPoint;

      if (!lastPoint) {
        return;
      }

      e.preventDefault();

      if (buttonStillPressed(e, this.eventButton)) {
        this.reset();
        return;
      }

      if (!this.moved && point.dist(lastPoint) < this.clickTolerance) {
        return;
      }

      this.moved = true;
      this.lastPoint = point;
      return this.move(lastPoint, point);
    }
  }, {
    key: "mouseupWindow",
    value: function mouseupWindow(e) {
      if (!this.lastPoint) {
        return;
      }

      var eventButton = DOM.mouseButton(e);

      if (eventButton !== this.eventButton) {
        return;
      }

      if (this.moved) {
        DOM.suppressClick();
      }

      this.reset();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }, {
    key: "correctButton",
    value: function correctButton(e, button) {
      return false;
    }
  }, {
    key: "move",
    value: function move(lastPoint, point) {
      return;
    }
  }]);

  return MouseHandler;
}();

export { MouseHandler as default };
//# sourceMappingURL=mouse_handler.js.map