import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import MouseHandler from './mouse_handler';
import { LEFT_BUTTON } from './util';

var MousePanHandler = function (_MouseHandler) {
  _inherits(MousePanHandler, _MouseHandler);

  var _super = _createSuper(MousePanHandler);

  function MousePanHandler() {
    _classCallCheck(this, MousePanHandler);

    return _super.apply(this, arguments);
  }

  _createClass(MousePanHandler, [{
    key: "mousedown",
    value: function mousedown(e, point) {
      _get(_getPrototypeOf(MousePanHandler.prototype), "mousedown", this).call(this, e, point);

      if (this.lastPoint) {
        this.active = true;
      }
    }
  }, {
    key: "move",
    value: function move(lastPoint, point) {
      return {
        around: point,
        panDelta: point.sub(lastPoint)
      };
    }
  }, {
    key: "correctButton",
    value: function correctButton(e, button) {
      return button === LEFT_BUTTON && !e.ctrlKey;
    }
  }]);

  return MousePanHandler;
}(MouseHandler);

export { MousePanHandler as default };
//# sourceMappingURL=mousepan_handler.js.map