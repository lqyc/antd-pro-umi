import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import DOM from '../../utils/dom';

var TwoTouchHandler = function () {
  function TwoTouchHandler() {
    _classCallCheck(this, TwoTouchHandler);

    this.enabled = void 0;
    this.active = void 0;
    this.firstTwoTouches = void 0;
    this.vector = void 0;
    this.startVector = void 0;
    this.aroundCenter = void 0;
    this.reset();
  }

  _createClass(TwoTouchHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      delete this.firstTwoTouches;
    }
  }, {
    key: "start",
    value: function start(points) {
      return;
    }
  }, {
    key: "move",
    value: function move(points, pinchAround, e) {
      return;
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      if (this.firstTwoTouches || mapTouches.length < 2) {
        return;
      }

      this.firstTwoTouches = [mapTouches[0].identifier, mapTouches[1].identifier];
      this.start([points[0], points[1]]);
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      if (!this.firstTwoTouches) {
        return;
      }

      e.preventDefault();

      var _this$firstTwoTouches = _slicedToArray(this.firstTwoTouches, 2),
          idA = _this$firstTwoTouches[0],
          idB = _this$firstTwoTouches[1];

      var a = getTouchById(mapTouches, points, idA);
      var b = getTouchById(mapTouches, points, idB);

      if (!a || !b) {
        return;
      }

      var pinchAround = this.aroundCenter ? null : a.add(b).div(2);
      return this.move([a, b], pinchAround, e);
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      if (!this.firstTwoTouches) {
        return;
      }

      var _this$firstTwoTouches2 = _slicedToArray(this.firstTwoTouches, 2),
          idA = _this$firstTwoTouches2[0],
          idB = _this$firstTwoTouches2[1];

      var a = getTouchById(mapTouches, points, idA);
      var b = getTouchById(mapTouches, points, idB);

      if (a && b) {
        return;
      }

      if (this.active) {
        DOM.suppressClick();
      }

      this.reset();
    }
  }, {
    key: "touchcancel",
    value: function touchcancel() {
      this.reset();
    }
  }, {
    key: "enable",
    value: function enable(options) {
      this.enabled = true;
      this.aroundCenter = !!options && options.around === 'center';
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }]);

  return TwoTouchHandler;
}();

export { TwoTouchHandler as default };

function getTouchById(mapTouches, points, identifier) {
  for (var i = 0; i < mapTouches.length; i++) {
    if (mapTouches[i].identifier === identifier) {
      return points[i];
    }
  }
}
//# sourceMappingURL=two_touch.js.map