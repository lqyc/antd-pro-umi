import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import TwoTouchHandler from './two_touch';
var ZOOM_THRESHOLD = 0.1;

function getZoomDelta(distance, lastDistance) {
  return Math.log(distance / lastDistance) / Math.LN2;
}

var TouchZoomHandler = function (_TwoTouchHandler) {
  _inherits(TouchZoomHandler, _TwoTouchHandler);

  var _super = _createSuper(TouchZoomHandler);

  function TouchZoomHandler() {
    var _this;

    _classCallCheck(this, TouchZoomHandler);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.distance = void 0;
    _this.startDistance = void 0;
    return _this;
  }

  _createClass(TouchZoomHandler, [{
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf(TouchZoomHandler.prototype), "reset", this).call(this);

      delete this.distance;
      delete this.startDistance;
    }
  }, {
    key: "start",
    value: function start(points) {
      this.startDistance = this.distance = points[0].dist(points[1]);
    }
  }, {
    key: "move",
    value: function move(points, pinchAround) {
      var lastDistance = this.distance;
      this.distance = points[0].dist(points[1]);

      if (!this.active && Math.abs(getZoomDelta(this.distance, this.startDistance)) < ZOOM_THRESHOLD) {
        return;
      }

      this.active = true;
      return {
        zoomDelta: getZoomDelta(this.distance, lastDistance),
        pinchAround: pinchAround
      };
    }
  }]);

  return TouchZoomHandler;
}(TwoTouchHandler);

export { TouchZoomHandler as default };
//# sourceMappingURL=touch_zoom.js.map