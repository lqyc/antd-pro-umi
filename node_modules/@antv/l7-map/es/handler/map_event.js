import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { MapMouseEvent, MapTouchEvent, MapWheelEvent } from './events';

var MapEventHandler = function () {
  function MapEventHandler(map, options) {
    _classCallCheck(this, MapEventHandler);

    this.mousedownPos = void 0;
    this.clickTolerance = void 0;
    this.map = void 0;
    this.map = map;
    this.clickTolerance = options.clickTolerance;
  }

  _createClass(MapEventHandler, [{
    key: "reset",
    value: function reset() {
      delete this.mousedownPos;
    }
  }, {
    key: "wheel",
    value: function wheel(e) {
      return this.firePreventable(new MapWheelEvent(e.type, this.map, e));
    }
  }, {
    key: "mousedown",
    value: function mousedown(e, point) {
      this.mousedownPos = point;
      return this.firePreventable(new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseup",
    value: function mouseup(e) {
      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "click",
    value: function click(e, point) {
      if (this.mousedownPos && this.mousedownPos.dist(point) >= this.clickTolerance) {
        return;
      }

      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "dblclick",
    value: function dblclick(e) {
      return this.firePreventable(new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseover",
    value: function mouseover(e) {
      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseout",
    value: function mouseout(e) {
      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "touchstart",
    value: function touchstart(e) {
      return this.firePreventable(new MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchmove",
    value: function touchmove(e) {
      this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchend",
    value: function touchend(e) {
      this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchcancel",
    value: function touchcancel(e) {
      this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "firePreventable",
    value: function firePreventable(mapEvent) {
      this.map.emit(mapEvent.type, mapEvent);

      if (mapEvent.defaultPrevented) {
        return {};
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return true;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return false;
    }
  }, {
    key: "enable",
    value: function enable() {
      return false;
    }
  }, {
    key: "disable",
    value: function disable() {
      return false;
    }
  }]);

  return MapEventHandler;
}();

export { MapEventHandler as default };
//# sourceMappingURL=map_event.js.map