import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { MapMouseEvent } from './events';

var BlockableMapEventHandler = function () {
  function BlockableMapEventHandler(map) {
    _classCallCheck(this, BlockableMapEventHandler);

    this.map = void 0;
    this.delayContextMenu = void 0;
    this.contextMenuEvent = void 0;
    this.map = map;
  }

  _createClass(BlockableMapEventHandler, [{
    key: "reset",
    value: function reset() {
      this.delayContextMenu = false;
      delete this.contextMenuEvent;
    }
  }, {
    key: "mousemove",
    value: function mousemove(e) {
      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mousedown",
    value: function mousedown() {
      this.delayContextMenu = true;
    }
  }, {
    key: "mouseup",
    value: function mouseup() {
      this.delayContextMenu = false;

      if (this.contextMenuEvent) {
        this.map.emit('contextmenu', new MapMouseEvent('contextmenu', this.map, this.contextMenuEvent));
        delete this.contextMenuEvent;
      }
    }
  }, {
    key: "contextmenu",
    value: function contextmenu(e) {
      if (this.delayContextMenu) {
        this.contextMenuEvent = e;
      } else {
        this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
      }

      if (this.map.listeners('contextmenu')) {
        e.preventDefault();
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return true;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return false;
    }
  }, {
    key: "enable",
    value: function enable() {
      return true;
    }
  }, {
    key: "disable",
    value: function disable() {
      return false;
    }
  }]);

  return BlockableMapEventHandler;
}();

export { BlockableMapEventHandler as default };
//# sourceMappingURL=blockable_map_event.js.map