{"version":3,"sources":["../../src/handler/handler_inertia.ts"],"names":["Point","merge","bezier","clamp","now","defaultInertiaOptions","linearity","easing","defaultPanInertiaOptions","deceleration","maxSpeed","defaultZoomInertiaOptions","defaultBearingInertiaOptions","defaultPitchInertiaOptions","HandlerInertia","map","inertiaBuffer","clear","settings","drainInertiaBuffer","push","time","inertia","nowTime","cutoff","length","shift","panInertiaOptions","deltas","zoom","bearing","pitch","pan","pinchAround","undefined","around","zoomDelta","bearingDelta","pitchDelta","panDelta","_add","lastEntry","duration","easeOptions","mag","result","calculateEasing","offset","mult","amount","center","transform","extendDuration","last","unproject","getCenter","noMoveStart","inertiaDuration","inertiaOptions","speed","Math","abs"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,cAAlB;AAGA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,GAAxB,QAAmC,SAAnC;AAGA,IAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,SAAS,EAAE,GADiB;AAE5BC,EAAAA,MAAM,EAAEL,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,CAAZ;AAFc,CAA9B;AAKA,IAAMM,wBAAwB,GAAGP,KAAK,CACpC;AACEQ,EAAAA,YAAY,EAAE,IADhB;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADoC,EAKpCL,qBALoC,CAAtC;AAQA,IAAMM,yBAAyB,GAAGV,KAAK,CACrC;AACEQ,EAAAA,YAAY,EAAE,EADhB;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADqC,EAKrCL,qBALqC,CAAvC;AAQA,IAAMO,4BAA4B,GAAGX,KAAK,CACxC;AACEQ,EAAAA,YAAY,EAAE,IADhB;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADwC,EAKxCL,qBALwC,CAA1C;AAQA,IAAMQ,0BAA0B,GAAGZ,KAAK,CACtC;AACEQ,EAAAA,YAAY,EAAE,IADhB;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADsC,EAKtCL,qBALsC,CAAxC;;IAiBqBS,c;AAOnB,0BAAYC,GAAZ,EAAsB;AAAA;;AAAA,SANdA,GAMc;AAAA,SALdC,aAKc;AACpB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKE,KAAL;AACD;;;;WAED,iBAAe;AACb,WAAKD,aAAL,GAAqB,EAArB;AACD;;;WAED,gBAAcE,QAAd,EAA6B;AAC3B,WAAKC,kBAAL;AACA,WAAKH,aAAL,CAAmBI,IAAnB,CAAwB;AAAEC,QAAAA,IAAI,EAAEjB,GAAG,EAAX;AAAec,QAAAA,QAAQ,EAARA;AAAf,OAAxB;AACD;;;WAED,8BAA4B;AAC1B,UAAMI,OAAO,GAAG,KAAKN,aAArB;AACA,UAAMO,OAAO,GAAGnB,GAAG,EAAnB;AACA,UAAMoB,MAAM,GAAG,GAAf;;AAEA,aAAOF,OAAO,CAACG,MAAR,GAAiB,CAAjB,IAAsBF,OAAO,GAAGD,OAAO,CAAC,CAAD,CAAP,CAAWD,IAArB,GAA4BG,MAAzD,EAAiE;AAC/DF,QAAAA,OAAO,CAACI,KAAR;AACD;AACF;;;WAED,mBAAiBC,iBAAjB,EAAsD;AACpD,WAAKR,kBAAL;;AACA,UAAI,KAAKH,aAAL,CAAmBS,MAAnB,GAA4B,CAAhC,EAAmC;AACjC;AACD;;AAED,UAAMG,MAAM,GAAG;AACbC,QAAAA,IAAI,EAAE,CADO;AAEbC,QAAAA,OAAO,EAAE,CAFI;AAGbC,QAAAA,KAAK,EAAE,CAHM;AAIbC,QAAAA,GAAG,EAAE,IAAIhC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAJQ;AAKbiC,QAAAA,WAAW,EAAEC,SALA;AAMbC,QAAAA,MAAM,EAAED;AANK,OAAf;;AANoD,iDAezB,KAAKlB,aAfoB;AAAA;;AAAA;AAepD,4DAA+C;AAAA,cAAlCE,QAAkC,eAAlCA,QAAkC;AAC7CU,UAAAA,MAAM,CAACC,IAAP,IAAeX,QAAQ,CAACkB,SAAT,IAAsB,CAArC;AACAR,UAAAA,MAAM,CAACE,OAAP,IAAkBZ,QAAQ,CAACmB,YAAT,IAAyB,CAA3C;AACAT,UAAAA,MAAM,CAACG,KAAP,IAAgBb,QAAQ,CAACoB,UAAT,IAAuB,CAAvC;;AACA,cAAIpB,QAAQ,CAACqB,QAAb,EAAuB;AACrBX,YAAAA,MAAM,CAACI,GAAP,CAAWQ,IAAX,CAAgBtB,QAAQ,CAACqB,QAAzB;AACD;;AACD,cAAIrB,QAAQ,CAACiB,MAAb,EAAqB;AACnBP,YAAAA,MAAM,CAACO,MAAP,GAAgBjB,QAAQ,CAACiB,MAAzB;AACD;;AACD,cAAIjB,QAAQ,CAACe,WAAb,EAA0B;AACxBL,YAAAA,MAAM,CAACK,WAAP,GAAqBf,QAAQ,CAACe,WAA9B;AACD;AACF;AA5BmD;AAAA;AAAA;AAAA;AAAA;;AA8BpD,UAAMQ,SAAS,GAAG,KAAKzB,aAAL,CAAmB,KAAKA,aAAL,CAAmBS,MAAnB,GAA4B,CAA/C,CAAlB;AACA,UAAMiB,QAAQ,GAAGD,SAAS,CAACpB,IAAV,GAAiB,KAAKL,aAAL,CAAmB,CAAnB,EAAsBK,IAAxD;AAEA,UAAMsB,WAAmC,GAAG,EAA5C;;AAEA,UAAIf,MAAM,CAACI,GAAP,CAAWY,GAAX,EAAJ,EAAsB;AACpB,YAAMC,MAAM,GAAGC,eAAe,CAC5BlB,MAAM,CAACI,GAAP,CAAWY,GAAX,EAD4B,EAE5BF,QAF4B,EAG5BzC,KAAK,CAAC,EAAD,EAAKO,wBAAL,EAA+BmB,iBAAiB,IAAI,EAApD,CAHuB,CAA9B;AAKAgB,QAAAA,WAAW,CAACI,MAAZ,GAAqBnB,MAAM,CAACI,GAAP,CAAWgB,IAAX,CAAgBH,MAAM,CAACI,MAAP,GAAgBrB,MAAM,CAACI,GAAP,CAAWY,GAAX,EAAhC,CAArB;AACAD,QAAAA,WAAW,CAACO,MAAZ,GAAqB,KAAKnC,GAAL,CAASoC,SAAT,CAAmBD,MAAxC;AACAE,QAAAA,cAAc,CAACT,WAAD,EAAcE,MAAd,CAAd;AACD;;AAED,UAAIjB,MAAM,CAACC,IAAX,EAAiB;AACf,YAAMgB,OAAM,GAAGC,eAAe,CAC5BlB,MAAM,CAACC,IADqB,EAE5Ba,QAF4B,EAG5B/B,yBAH4B,CAA9B;;AAKAgC,QAAAA,WAAW,CAACd,IAAZ,GAAmB,KAAKd,GAAL,CAASoC,SAAT,CAAmBtB,IAAnB,GAA0BgB,OAAM,CAACI,MAApD;AACAG,QAAAA,cAAc,CAACT,WAAD,EAAcE,OAAd,CAAd;AACD;;AAED,UAAIjB,MAAM,CAACE,OAAX,EAAoB;AAClB,YAAMe,QAAM,GAAGC,eAAe,CAC5BlB,MAAM,CAACE,OADqB,EAE5BY,QAF4B,EAG5B9B,4BAH4B,CAA9B;;AAKA+B,QAAAA,WAAW,CAACb,OAAZ,GACE,KAAKf,GAAL,CAASoC,SAAT,CAAmBrB,OAAnB,GAA6B3B,KAAK,CAAC0C,QAAM,CAACI,MAAR,EAAgB,CAAC,GAAjB,EAAsB,GAAtB,CADpC;AAEAG,QAAAA,cAAc,CAACT,WAAD,EAAcE,QAAd,CAAd;AACD;;AAED,UAAIjB,MAAM,CAACG,KAAX,EAAkB;AAChB,YAAMc,QAAM,GAAGC,eAAe,CAC5BlB,MAAM,CAACG,KADqB,EAE5BW,QAF4B,EAG5B7B,0BAH4B,CAA9B;;AAKA8B,QAAAA,WAAW,CAACZ,KAAZ,GAAoB,KAAKhB,GAAL,CAASoC,SAAT,CAAmBpB,KAAnB,GAA2Bc,QAAM,CAACI,MAAtD;AACAG,QAAAA,cAAc,CAACT,WAAD,EAAcE,QAAd,CAAd;AACD;;AAED,UAAIF,WAAW,CAACd,IAAZ,IAAoBc,WAAW,CAACb,OAApC,EAA6C;AAC3C,YAAMuB,IAAI,GACRzB,MAAM,CAACK,WAAP,KAAuBC,SAAvB,GAAmCN,MAAM,CAACO,MAA1C,GAAmDP,MAAM,CAACK,WAD5D;AAEAU,QAAAA,WAAW,CAACR,MAAZ,GAAqBkB,IAAI,GACrB,KAAKtC,GAAL,CAASuC,SAAT,CAAmBD,IAAnB,CADqB,GAErB,KAAKtC,GAAL,CAASwC,SAAT,EAFJ;AAGD;;AAED,WAAKtC,KAAL;AACA,aAAOhB,KAAK,CAAC0C,WAAD,EAAc;AACxBa,QAAAA,WAAW,EAAE;AADW,OAAd,CAAZ;AAGD;;;;;;SAxHkB1C,c;;AA6HrB,SAASsC,cAAT,CAAwBT,WAAxB,EAA0CE,MAA1C,EAAuD;AACrD,MAAI,CAACF,WAAW,CAACD,QAAb,IAAyBC,WAAW,CAACD,QAAZ,GAAuBG,MAAM,CAACH,QAA3D,EAAqE;AACnEC,IAAAA,WAAW,CAACD,QAAZ,GAAuBG,MAAM,CAACH,QAA9B;AACAC,IAAAA,WAAW,CAACpC,MAAZ,GAAqBsC,MAAM,CAACtC,MAA5B;AACD;AACF;;AAED,SAASuC,eAAT,CACEG,MADF,EAEEQ,eAFF,EAGEC,cAHF,EAIE;AAAA,MACQhD,QADR,GAC8CgD,cAD9C,CACQhD,QADR;AAAA,MACkBJ,SADlB,GAC8CoD,cAD9C,CACkBpD,SADlB;AAAA,MAC6BG,YAD7B,GAC8CiD,cAD9C,CAC6BjD,YAD7B;AAEA,MAAMkD,KAAK,GAAGxD,KAAK,CAChB8C,MAAM,GAAG3C,SAAV,IAAwBmD,eAAe,GAAG,IAA1C,CADiB,EAEjB,CAAC/C,QAFgB,EAGjBA,QAHiB,CAAnB;AAKA,MAAMgC,QAAQ,GAAGkB,IAAI,CAACC,GAAL,CAASF,KAAT,KAAmBlD,YAAY,GAAGH,SAAlC,CAAjB;AACA,SAAO;AACLC,IAAAA,MAAM,EAAEmD,cAAc,CAACnD,MADlB;AAELmC,IAAAA,QAAQ,EAAEA,QAAQ,GAAG,IAFhB;AAGLO,IAAAA,MAAM,EAAEU,KAAK,IAAIjB,QAAQ,GAAG,CAAf;AAHR,GAAP;AAKD","sourcesContent":["// @ts-ignore\nimport Point from '../geo/point';\n\n// tslint:disable-next-line:no-submodule-imports\nimport merge from 'lodash/merge';\nimport { Map } from '../map';\nimport { bezier, clamp, now } from '../util';\nimport { IDragPanOptions } from './shim/drag_pan';\n\nconst defaultInertiaOptions = {\n  linearity: 0.3,\n  easing: bezier(0, 0, 0.3, 1),\n};\n\nconst defaultPanInertiaOptions = merge(\n  {\n    deceleration: 2500,\n    maxSpeed: 1400,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultZoomInertiaOptions = merge(\n  {\n    deceleration: 20,\n    maxSpeed: 1400,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultBearingInertiaOptions = merge(\n  {\n    deceleration: 1000,\n    maxSpeed: 360,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultPitchInertiaOptions = merge(\n  {\n    deceleration: 1000,\n    maxSpeed: 90,\n  },\n  defaultInertiaOptions,\n);\n\nexport interface IInertiaOptions {\n  linearity: number;\n  easing: (t: number) => number;\n  deceleration: number;\n  maxSpeed: number;\n}\n\nexport type InputEvent = MouseEvent | TouchEvent | KeyboardEvent | WheelEvent;\n\nexport default class HandlerInertia {\n  private map: Map;\n  private inertiaBuffer: Array<{\n    time: number;\n    settings: { [key: string]: any };\n  }>;\n\n  constructor(map: Map) {\n    this.map = map;\n    this.clear();\n  }\n\n  public clear() {\n    this.inertiaBuffer = [];\n  }\n\n  public record(settings: any) {\n    this.drainInertiaBuffer();\n    this.inertiaBuffer.push({ time: now(), settings });\n  }\n\n  public drainInertiaBuffer() {\n    const inertia = this.inertiaBuffer;\n    const nowTime = now();\n    const cutoff = 160; // msec\n\n    while (inertia.length > 0 && nowTime - inertia[0].time > cutoff) {\n      inertia.shift();\n    }\n  }\n\n  public onMoveEnd(panInertiaOptions?: IDragPanOptions) {\n    this.drainInertiaBuffer();\n    if (this.inertiaBuffer.length < 2) {\n      return;\n    }\n\n    const deltas = {\n      zoom: 0,\n      bearing: 0,\n      pitch: 0,\n      pan: new Point(0, 0),\n      pinchAround: undefined,\n      around: undefined,\n    };\n\n    for (const { settings } of this.inertiaBuffer) {\n      deltas.zoom += settings.zoomDelta || 0;\n      deltas.bearing += settings.bearingDelta || 0;\n      deltas.pitch += settings.pitchDelta || 0;\n      if (settings.panDelta) {\n        deltas.pan._add(settings.panDelta);\n      }\n      if (settings.around) {\n        deltas.around = settings.around;\n      }\n      if (settings.pinchAround) {\n        deltas.pinchAround = settings.pinchAround;\n      }\n    }\n\n    const lastEntry = this.inertiaBuffer[this.inertiaBuffer.length - 1];\n    const duration = lastEntry.time - this.inertiaBuffer[0].time;\n\n    const easeOptions: { [key: string]: any } = {};\n\n    if (deltas.pan.mag()) {\n      const result = calculateEasing(\n        deltas.pan.mag(),\n        duration,\n        merge({}, defaultPanInertiaOptions, panInertiaOptions || {}),\n      );\n      easeOptions.offset = deltas.pan.mult(result.amount / deltas.pan.mag());\n      easeOptions.center = this.map.transform.center;\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.zoom) {\n      const result = calculateEasing(\n        deltas.zoom,\n        duration,\n        defaultZoomInertiaOptions,\n      );\n      easeOptions.zoom = this.map.transform.zoom + result.amount;\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.bearing) {\n      const result = calculateEasing(\n        deltas.bearing,\n        duration,\n        defaultBearingInertiaOptions,\n      );\n      easeOptions.bearing =\n        this.map.transform.bearing + clamp(result.amount, -179, 179);\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.pitch) {\n      const result = calculateEasing(\n        deltas.pitch,\n        duration,\n        defaultPitchInertiaOptions,\n      );\n      easeOptions.pitch = this.map.transform.pitch + result.amount;\n      extendDuration(easeOptions, result);\n    }\n\n    if (easeOptions.zoom || easeOptions.bearing) {\n      const last =\n        deltas.pinchAround === undefined ? deltas.around : deltas.pinchAround;\n      easeOptions.around = last\n        ? this.map.unproject(last)\n        : this.map.getCenter();\n    }\n\n    this.clear();\n    return merge(easeOptions, {\n      noMoveStart: true,\n    });\n  }\n}\n\n// Unfortunately zoom, bearing, etc can't have different durations and easings so\n// we need to choose one. We use the longest duration and it's corresponding easing.\nfunction extendDuration(easeOptions: any, result: any) {\n  if (!easeOptions.duration || easeOptions.duration < result.duration) {\n    easeOptions.duration = result.duration;\n    easeOptions.easing = result.easing;\n  }\n}\n\nfunction calculateEasing(\n  amount: number,\n  inertiaDuration: number,\n  inertiaOptions: IInertiaOptions,\n) {\n  const { maxSpeed, linearity, deceleration } = inertiaOptions;\n  const speed = clamp(\n    (amount * linearity) / (inertiaDuration / 1000),\n    -maxSpeed,\n    maxSpeed,\n  );\n  const duration = Math.abs(speed) / (deceleration * linearity);\n  return {\n    easing: inertiaOptions.easing,\n    duration: duration * 1000,\n    amount: speed * (duration / 2),\n  };\n}\n"],"file":"handler_inertia.js"}