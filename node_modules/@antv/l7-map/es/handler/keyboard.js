import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
var defaultOptions = {
  panStep: 100,
  bearingStep: 15,
  pitchStep: 10
};

var KeyboardHandler = function () {
  function KeyboardHandler() {
    _classCallCheck(this, KeyboardHandler);

    this.enabled = void 0;
    this.active = void 0;
    this.panStep = void 0;
    this.bearingStep = void 0;
    this.pitchStep = void 0;
    var stepOptions = defaultOptions;
    this.panStep = stepOptions.panStep;
    this.bearingStep = stepOptions.bearingStep;
    this.pitchStep = stepOptions.pitchStep;
  }

  _createClass(KeyboardHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
    }
  }, {
    key: "keydown",
    value: function keydown(e) {
      var _this = this;

      if (e.altKey || e.ctrlKey || e.metaKey) {
        return;
      }

      var zoomDir = 0;
      var bearingDir = 0;
      var pitchDir = 0;
      var xDir = 0;
      var yDir = 0;

      switch (e.keyCode) {
        case 61:
        case 107:
        case 171:
        case 187:
          zoomDir = 1;
          break;

        case 189:
        case 109:
        case 173:
          zoomDir = -1;
          break;

        case 37:
          if (e.shiftKey) {
            bearingDir = -1;
          } else {
            e.preventDefault();
            xDir = -1;
          }

          break;

        case 39:
          if (e.shiftKey) {
            bearingDir = 1;
          } else {
            e.preventDefault();
            xDir = 1;
          }

          break;

        case 38:
          if (e.shiftKey) {
            pitchDir = 1;
          } else {
            e.preventDefault();
            yDir = -1;
          }

          break;

        case 40:
          if (e.shiftKey) {
            pitchDir = -1;
          } else {
            e.preventDefault();
            yDir = 1;
          }

          break;

        default:
          return;
      }

      return {
        cameraAnimation: function cameraAnimation(map) {
          var zoom = map.getZoom();
          map.easeTo({
            duration: 300,
            easeId: 'keyboardHandler',
            easing: easeOut,
            zoom: zoomDir ? Math.round(zoom) + zoomDir * (e.shiftKey ? 2 : 1) : zoom,
            bearing: map.getBearing() + bearingDir * _this.bearingStep,
            pitch: map.getPitch() + pitchDir * _this.pitchStep,
            offset: [-xDir * _this.panStep, -yDir * _this.panStep],
            center: map.getCenter()
          }, {
            originalEvent: e
          });
        }
      };
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }]);

  return KeyboardHandler;
}();

function easeOut(t) {
  return t * (2 - t);
}

export default KeyboardHandler;
//# sourceMappingURL=keyboard.js.map