import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import LngLat from '../geo/lng_lat';
import { bezier, ease, interpolate, now } from '../util';
import DOM from '../utils/dom';
var wheelZoomDelta = 4.000244140625;
var defaultZoomRate = 1 / 100;
var wheelZoomRate = 1 / 450;
var maxScalePerFrame = 2;

var ScrollZoomHandler = function () {
  function ScrollZoomHandler(map, handler) {
    var _this = this;

    _classCallCheck(this, ScrollZoomHandler);

    this.map = void 0;
    this.el = void 0;
    this.enabled = void 0;
    this.active = void 0;
    this.zooming = void 0;
    this.aroundCenter = void 0;
    this.around = void 0;
    this.aroundPoint = void 0;
    this.type = void 0;
    this.lastValue = void 0;
    this.timeout = void 0;
    this.finishTimeout = void 0;
    this.lastWheelEvent = void 0;
    this.lastWheelEventTime = void 0;
    this.startZoom = void 0;
    this.targetZoom = void 0;
    this.delta = void 0;
    this.easing = void 0;
    this.prevEase = void 0;
    this.frameId = void 0;
    this.handler = void 0;
    this.defaultZoomRate = void 0;
    this.wheelZoomRate = void 0;

    this.onScrollFrame = function () {
      if (!_this.frameId) {
        return;
      }

      _this.frameId = null;

      if (!_this.isActive()) {
        return;
      }

      var tr = _this.map.transform;

      if (_this.delta !== 0) {
        var zoomRate = _this.type === 'wheel' && Math.abs(_this.delta) > wheelZoomDelta ? _this.wheelZoomRate : _this.defaultZoomRate;
        var scale = maxScalePerFrame / (1 + Math.exp(-Math.abs(_this.delta * zoomRate)));

        if (_this.delta < 0 && scale !== 0) {
          scale = 1 / scale;
        }

        var fromScale = typeof _this.targetZoom === 'number' ? tr.zoomScale(_this.targetZoom) : tr.scale;
        _this.targetZoom = Math.min(tr.maxZoom, Math.max(tr.minZoom, tr.scaleZoom(fromScale * scale)));

        if (_this.type === 'wheel') {
          _this.startZoom = tr.zoom;
          _this.easing = _this.smoothOutEasing(200);
        }

        _this.delta = 0;
      }

      var targetZoom = typeof _this.targetZoom === 'number' ? _this.targetZoom : tr.zoom;
      var startZoom = _this.startZoom;
      var easing = _this.easing;
      var finished = false;
      var zoom;

      if (_this.type === 'wheel' && startZoom && easing) {
        var t = Math.min((now() - _this.lastWheelEventTime) / 200, 1);
        var k = easing(t);
        zoom = interpolate(startZoom, targetZoom, k);

        if (t < 1) {
          if (!_this.frameId) {
            _this.frameId = true;
          }
        } else {
          finished = true;
        }
      } else {
        zoom = targetZoom;
        finished = true;
      }

      _this.active = true;

      if (finished) {
        _this.active = false;
        _this.finishTimeout = setTimeout(function () {
          _this.zooming = false;

          _this.handler.triggerRenderFrame();

          delete _this.targetZoom;
          delete _this.finishTimeout;
        }, 200);
      }

      return {
        noInertia: true,
        needsRenderFrame: !finished,
        zoomDelta: zoom - tr.zoom,
        around: _this.aroundPoint,
        originalEvent: _this.lastWheelEvent
      };
    };

    this.map = map;
    this.el = map.getCanvasContainer();
    this.handler = handler;
    this.delta = 0;
    this.defaultZoomRate = defaultZoomRate;
    this.wheelZoomRate = wheelZoomRate;
  }

  _createClass(ScrollZoomHandler, [{
    key: "setZoomRate",
    value: function setZoomRate(zoomRate) {
      this.defaultZoomRate = zoomRate;
    }
  }, {
    key: "setWheelZoomRate",
    value: function setWheelZoomRate(zoomRate) {
      this.wheelZoomRate = zoomRate;
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return !!this.active || this.finishTimeout !== undefined;
    }
  }, {
    key: "isZooming",
    value: function isZooming() {
      return !!this.zooming;
    }
  }, {
    key: "enable",
    value: function enable(options) {
      if (this.isEnabled()) {
        return;
      }

      this.enabled = true;
      this.aroundCenter = options && options.around === 'center';
    }
  }, {
    key: "disable",
    value: function disable() {
      if (!this.isEnabled()) {
        return;
      }

      this.enabled = false;
    }
  }, {
    key: "wheel",
    value: function wheel(e) {
      if (!this.isEnabled()) {
        return;
      }

      var value = e.deltaMode === window.WheelEvent.DOM_DELTA_LINE ? e.deltaY * 40 : e.deltaY;
      var nowTime = now();
      var timeDelta = nowTime - (this.lastWheelEventTime || 0);
      this.lastWheelEventTime = nowTime;

      if (value !== 0 && value % wheelZoomDelta === 0) {
        this.type = 'wheel';
      } else if (value !== 0 && Math.abs(value) < 4) {
        this.type = 'trackpad';
      } else if (timeDelta > 400) {
        this.type = null;
        this.lastValue = value;
        this.timeout = setTimeout(this.onTimeout, 40, e);
      } else if (!this.type) {
        this.type = Math.abs(timeDelta * value) < 200 ? 'trackpad' : 'wheel';

        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
          value += this.lastValue;
        }
      }

      if (e.shiftKey && value) {
        value = value / 4;
      }

      if (this.type) {
        this.lastWheelEvent = e;
        this.delta -= value;

        if (!this.active) {
          this.start(e);
        }
      }

      e.preventDefault();
    }
  }, {
    key: "renderFrame",
    value: function renderFrame() {
      return this.onScrollFrame();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.active = false;
    }
  }, {
    key: "onTimeout",
    value: function onTimeout(initialEvent) {
      this.type = 'wheel';
      this.delta -= this.lastValue;

      if (!this.active) {
        this.start(initialEvent);
      }
    }
  }, {
    key: "start",
    value: function start(e) {
      if (!this.delta) {
        return;
      }

      if (this.frameId) {
        this.frameId = null;
      }

      this.active = true;

      if (!this.isZooming()) {
        this.zooming = true;
      }

      if (this.finishTimeout) {
        clearTimeout(this.finishTimeout);
        delete this.finishTimeout;
      }

      var pos = DOM.mousePos(this.el, e);
      this.around = LngLat.convert(this.aroundCenter ? this.map.getCenter() : this.map.unproject(pos));
      this.aroundPoint = this.map.transform.locationPoint(this.around);

      if (!this.frameId) {
        this.frameId = true;
        this.handler.triggerRenderFrame();
      }
    }
  }, {
    key: "smoothOutEasing",
    value: function smoothOutEasing(duration) {
      var easing = ease;

      if (this.prevEase) {
        var preEase = this.prevEase;
        var t = (now() - preEase.start) / preEase.duration;
        var speed = preEase.easing(t + 0.01) - preEase.easing(t);
        var x = 0.27 / Math.sqrt(speed * speed + 0.0001) * 0.01;
        var y = Math.sqrt(0.27 * 0.27 - x * x);
        easing = bezier(x, y, 0.25, 1);
      }

      this.prevEase = {
        start: now(),
        duration: duration,
        easing: easing
      };
      return easing;
    }
  }]);

  return ScrollZoomHandler;
}();

export default ScrollZoomHandler;
//# sourceMappingURL=scroll_zoom.js.map