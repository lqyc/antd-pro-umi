import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { MAX_TAP_INTERVAL } from './single_tap_recognizer';
import TapRecognizer from './tap_recognizer';

var TapDragZoomHandler = function () {
  function TapDragZoomHandler() {
    _classCallCheck(this, TapDragZoomHandler);

    this.enabled = void 0;
    this.active = void 0;
    this.swipePoint = void 0;
    this.swipeTouch = void 0;
    this.tapTime = void 0;
    this.tap = void 0;
    this.tap = new TapRecognizer({
      numTouches: 1,
      numTaps: 1
    });
    this.reset();
  }

  _createClass(TapDragZoomHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      delete this.swipePoint;
      delete this.swipeTouch;
      delete this.tapTime;
      this.tap.reset();
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      if (this.swipePoint) {
        return;
      }

      if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {
        this.reset();
      }

      if (!this.tapTime) {
        this.tap.touchstart(e, points, mapTouches);
      } else if (mapTouches.length > 0) {
        this.swipePoint = points[0];
        this.swipeTouch = mapTouches[0].identifier;
      }
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      if (!this.tapTime) {
        this.tap.touchmove(e, points, mapTouches);
      } else if (this.swipePoint) {
        if (mapTouches[0].identifier !== this.swipeTouch) {
          return;
        }

        var newSwipePoint = points[0];
        var dist = newSwipePoint.y - this.swipePoint.y;
        this.swipePoint = newSwipePoint;
        e.preventDefault();
        this.active = true;
        return {
          zoomDelta: dist / 128
        };
      }
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      if (!this.tapTime) {
        var point = this.tap.touchend(e, points, mapTouches);

        if (point) {
          this.tapTime = e.timeStamp;
        }
      } else if (this.swipePoint) {
        if (mapTouches.length === 0) {
          this.reset();
        }
      }
    }
  }, {
    key: "touchcancel",
    value: function touchcancel() {
      this.reset();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }]);

  return TapDragZoomHandler;
}();

export { TapDragZoomHandler as default };
//# sourceMappingURL=tap_drag_zoom.js.map