import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import TapRecognizer from './tap_recognizer';

var TapZoomHandler = function () {
  function TapZoomHandler() {
    _classCallCheck(this, TapZoomHandler);

    this.enabled = void 0;
    this.active = void 0;
    this.zoomIn = void 0;
    this.zoomOut = void 0;
    this.zoomIn = new TapRecognizer({
      numTouches: 1,
      numTaps: 2
    });
    this.zoomOut = new TapRecognizer({
      numTouches: 2,
      numTaps: 1
    });
    this.reset();
  }

  _createClass(TapZoomHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      this.zoomIn.reset();
      this.zoomOut.reset();
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      this.zoomIn.touchstart(e, points, mapTouches);
      this.zoomOut.touchstart(e, points, mapTouches);
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      this.zoomIn.touchmove(e, points, mapTouches);
      this.zoomOut.touchmove(e, points, mapTouches);
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      var _this = this;

      var zoomInPoint = this.zoomIn.touchend(e, points, mapTouches);
      var zoomOutPoint = this.zoomOut.touchend(e, points, mapTouches);

      if (zoomInPoint) {
        this.active = true;
        e.preventDefault();
        setTimeout(function () {
          return _this.reset();
        }, 0);
        return {
          cameraAnimation: function cameraAnimation(map) {
            return map.easeTo({
              duration: 300,
              zoom: map.getZoom() + 1,
              around: map.unproject(zoomInPoint)
            }, {
              originalEvent: e
            });
          }
        };
      } else if (zoomOutPoint) {
        this.active = true;
        e.preventDefault();
        setTimeout(function () {
          return _this.reset();
        }, 0);
        return {
          cameraAnimation: function cameraAnimation(map) {
            return map.easeTo({
              duration: 300,
              zoom: map.getZoom() - 1,
              around: map.unproject(zoomOutPoint)
            }, {
              originalEvent: e
            });
          }
        };
      }
    }
  }, {
    key: "touchcancel",
    value: function touchcancel() {
      this.reset();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }]);

  return TapZoomHandler;
}();

export { TapZoomHandler as default };
//# sourceMappingURL=tap_zoom.js.map