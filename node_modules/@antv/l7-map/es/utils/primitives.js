import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { vec3, vec4 } from 'gl-matrix';

var Frustum = function () {
  function Frustum(points, planes) {
    _classCallCheck(this, Frustum);

    this.points = void 0;
    this.planes = void 0;
    this.points = points;
    this.planes = planes;
  }

  _createClass(Frustum, null, [{
    key: "fromInvProjectionMatrix",
    value: function fromInvProjectionMatrix(invProj, worldSize, zoom) {
      var clipSpaceCorners = [[-1, 1, -1, 1], [1, 1, -1, 1], [1, -1, -1, 1], [-1, -1, -1, 1], [-1, 1, 1, 1], [1, 1, 1, 1], [1, -1, 1, 1], [-1, -1, 1, 1]];
      var scale = Math.pow(2, zoom);
      var frustumCoords = clipSpaceCorners.map(function (v) {
        return vec4.transformMat4(new Float32Array([]), v, invProj);
      }).map(function (v) {
        return vec4.scale(new Float32Array([]), v, 1.0 / v[3] / worldSize * scale);
      });
      var frustumPlanePointIndices = [[0, 1, 2], [6, 5, 4], [0, 3, 7], [2, 1, 5], [3, 2, 6], [0, 4, 5]];
      var frustumPlanes = frustumPlanePointIndices.map(function (p) {
        var a = vec3.sub(new Float32Array(3), new Float32Array(frustumCoords[p[0]]), new Float32Array(frustumCoords[p[1]]));
        var b = vec3.sub(new Float32Array(3), new Float32Array(frustumCoords[p[2]]), new Float32Array(frustumCoords[p[1]]));
        var n = vec3.normalize(new Float32Array(3), vec3.cross(new Float32Array(3), a, b));
        var d = -vec3.dot(n, new Float32Array(frustumCoords[p[1]]));
        return n.concat(d);
      });
      return new Frustum(frustumCoords, frustumPlanes);
    }
  }]);

  return Frustum;
}();

export { Frustum as default };
//# sourceMappingURL=primitives.js.map