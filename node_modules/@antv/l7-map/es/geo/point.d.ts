export declare type PointLike = [number, number] | Point;
export default class Point {
    static convert(a: any): any;
    x: number;
    y: number;
    constructor(x: number, y: number);
    clone(): Point;
    _add(p: Point): this;
    add(p: Point): Point;
    _sub(p: Point): this;
    sub(p: Point): Point;
    _multByPoint(p: Point): this;
    multByPoint(p: Point): Point;
    _divByPoint(p: Point): this;
    divByPoint(p: Point): Point;
    _mult(k: number): this;
    mult(k: number): Point;
    _div(k: number): this;
    div(k: number): Point;
    _rotate(angle: number): this;
    rotate(angle: number): Point;
    _rotateAround(angle: number, p: Point): this;
    roateAround(angle: number, p: Point): Point;
    _matMult(m: number[]): this;
    matMult(m: number[]): Point;
    _unit(): this;
    unit(): Point;
    _perp(): this;
    perp(): Point;
    _round(): this;
    round(): Point;
    mag(): number;
    equals(other: Point): boolean;
    dist(p: Point): number;
    distSqr(p: Point): number;
    angle(): number;
    angleTo(b: Point): number;
    angleWith(b: Point): number;
    angleWithSep(x: number, y: number): number;
}
