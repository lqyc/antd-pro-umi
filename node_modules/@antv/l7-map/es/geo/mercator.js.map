{"version":3,"sources":["../../src/geo/mercator.ts"],"names":["LngLat","earthRadius","earthCircumfrence","Math","PI","circumferenceAtLatitude","latitude","cos","mercatorXfromLng","lng","mercatorYfromLat","lat","log","tan","mercatorZfromAltitude","altitude","lngFromMercatorX","x","latFromMercatorY","y","y2","atan","exp","altitudeFromMercatorZ","z","mercatorScale","MercatorCoordinate","lngLatLike","lngLat","convert"],"mappings":"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","sourcesContent":["import LngLat, { earthRadius, LngLatLike } from '../geo/lng_lat';\n\n/*\n * The average circumference of the world in meters.\n */\nconst earthCircumfrence = 2 * Math.PI * earthRadius; // meters\n\n/*\n * The circumference at a line of latitude in meters.\n */\nfunction circumferenceAtLatitude(latitude: number) {\n  return earthCircumfrence * Math.cos((latitude * Math.PI) / 180);\n}\n\nexport function mercatorXfromLng(lng: number) {\n  return (180 + lng) / 360;\n}\n\nexport function mercatorYfromLat(lat: number) {\n  return (\n    (180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) /\n    360\n  );\n}\n\nexport function mercatorZfromAltitude(altitude: number, lat: number) {\n  return altitude / circumferenceAtLatitude(lat);\n}\n\nexport function lngFromMercatorX(x: number) {\n  return x * 360 - 180;\n}\n\nexport function latFromMercatorY(y: number) {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\nexport function altitudeFromMercatorZ(z: number, y: number) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param {number} lat Latitude\n * @returns {number} scale factor\n * @private\n */\nexport function mercatorScale(lat: number) {\n  return 1 / Math.cos((lat * Math.PI) / 180);\n}\n\nexport default class MercatorCoordinate {\n  public static fromLngLat(lngLatLike: LngLatLike, altitude: number = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n\n    return new MercatorCoordinate(\n      mercatorXfromLng(lngLat.lng),\n      mercatorYfromLat(lngLat.lat),\n      mercatorZfromAltitude(altitude, lngLat.lat),\n    );\n  }\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(x: number, y: number, z: number = 0) {\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  public toLngLat() {\n    return new LngLat(lngFromMercatorX(this.x), latFromMercatorY(this.y));\n  }\n\n  public toAltitude() {\n    return altitudeFromMercatorZ(this.z, this.y);\n  }\n\n  public meterInMercatorCoordinateUnits() {\n    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n    return (1 / earthCircumfrence) * mercatorScale(latFromMercatorY(this.y));\n  }\n}\n"],"file":"mercator.js"}