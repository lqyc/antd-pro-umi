import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import LngLat, { earthRadius } from '../geo/lng_lat';
var earthCircumfrence = 2 * Math.PI * earthRadius;

function circumferenceAtLatitude(latitude) {
  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
}

export function mercatorXfromLng(lng) {
  return lng;
}
export function mercatorYfromLat(lat) {
  return lat;
}
export function mercatorZfromAltitude(altitude, lat) {
  return altitude;
}
export function lngFromMercatorX(x) {
  return x;
}
export function latFromMercatorY(y) {
  return y;
}
export function altitudeFromMercatorZ(z, y) {
  return z;
}
export function mercatorScale(lat) {
  return 1;
}

var SimpleCoordinate = function () {
  function SimpleCoordinate(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    _classCallCheck(this, SimpleCoordinate);

    this.x = void 0;
    this.y = void 0;
    this.z = void 0;
    this.x = +x;
    this.y = +y;
    this.z = +z;
  }

  _createClass(SimpleCoordinate, [{
    key: "toLngLat",
    value: function toLngLat() {
      return new LngLat(this.x, this.y);
    }
  }, {
    key: "toAltitude",
    value: function toAltitude() {
      return this.z;
    }
  }, {
    key: "meterInMercatorCoordinateUnits",
    value: function meterInMercatorCoordinateUnits() {
      return 1;
    }
  }], [{
    key: "fromLngLat",
    value: function fromLngLat(lngLatLike) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var lngLat = LngLat.convert(lngLatLike);
      return new SimpleCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));
    }
  }]);

  return SimpleCoordinate;
}();

export { SimpleCoordinate as default };
//# sourceMappingURL=simple.js.map