"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var Hash = function () {
  function Hash(hashName) {
    var _this = this;

    (0, _classCallCheck2.default)(this, Hash);
    this.map = void 0;
    this.updateHash = void 0;
    this.hashName = void 0;

    this.onHashChange = function () {
      var loc = _this.getCurrentHash();

      if (loc.length >= 3 && !loc.some(function (v) {
        return isNaN(+v);
      })) {
        var bearing = _this.map.dragRotate.isEnabled() && _this.map.touchZoomRotate.isEnabled() ? +(loc[3] || 0) : _this.map.getBearing();

        _this.map.jumpTo({
          center: [+loc[2], +loc[1]],
          zoom: +loc[0],
          bearing: bearing,
          pitch: +(loc[4] || 0)
        });

        return true;
      }

      return false;
    };

    this.getCurrentHash = function () {
      var hash = window.location.hash.replace('#', '');

      if (_this.hashName) {
        var keyval;
        hash.split('&').map(function (part) {
          return part.split('=');
        }).forEach(function (part) {
          if (part[0] === _this.hashName) {
            keyval = part;
          }
        });
        return (keyval ? keyval[1] || '' : '').split('/');
      }

      return hash.split('/');
    };

    this.updateHashUnthrottled = function () {
      var hash = _this.getHashString();

      try {
        window.history.replaceState(window.history.state, '', hash);
      } catch (SecurityError) {}
    };

    this.hashName = hashName && encodeURIComponent(hashName);
    this.updateHash = (0, _throttle.default)(this.updateHashUnthrottled, 30 * 1000 / 100);
  }

  (0, _createClass2.default)(Hash, [{
    key: "addTo",
    value: function addTo(map) {
      this.map = map;
      window.addEventListener('hashchange', this.onHashChange, false);
      this.map.on('moveend', this.updateHash);
      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      window.removeEventListener('hashchange', this.onHashChange, false);
      this.map.off('moveend', this.updateHash);
      delete this.map;
      return this;
    }
  }, {
    key: "getHashString",
    value: function getHashString(mapFeedback) {
      var center = this.map.getCenter();
      var zoom = Math.round(this.map.getZoom() * 100) / 100;
      var precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10);
      var m = Math.pow(10, precision);
      var lng = Math.round(center.lng * m) / m;
      var lat = Math.round(center.lat * m) / m;
      var bearing = this.map.getBearing();
      var pitch = this.map.getPitch();
      var hash = '';

      if (mapFeedback) {
        hash += "/".concat(lng, "/").concat(lat, "/").concat(zoom);
      } else {
        hash += "".concat(zoom, "/").concat(lat, "/").concat(lng);
      }

      if (bearing || pitch) {
        hash += "/".concat(Math.round(bearing * 10) / 10);
      }

      if (pitch) {
        hash += "/".concat(Math.round(pitch));
      }

      if (this.hashName) {
        var hashName = this.hashName;
        var found = false;
        var parts = window.location.hash.slice(1).split('&').map(function (part) {
          var key = part.split('=')[0];

          if (key === hashName) {
            found = true;
            return "".concat(key, "=").concat(hash);
          }

          return part;
        }).filter(function (a) {
          return a;
        });

        if (!found) {
          parts.push("".concat(hashName, "=").concat(hash));
        }

        return "#".concat(parts.join('&'));
      }

      return "#".concat(hash);
    }
  }]);
  return Hash;
}();

var _default = Hash;
exports.default = _default;
//# sourceMappingURL=hash.js.map