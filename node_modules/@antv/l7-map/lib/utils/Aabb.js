"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _glMatrix = require("gl-matrix");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Aabb = function () {
  function Aabb(min, max) {
    (0, _classCallCheck2.default)(this, Aabb);
    this.min = void 0;
    this.max = void 0;
    this.center = void 0;
    this.min = min;
    this.max = max;
    this.center = _glMatrix.vec3.scale(new Float32Array(3), _glMatrix.vec3.add(new Float32Array(3), this.min, this.max), 0.5);
  }

  (0, _createClass2.default)(Aabb, [{
    key: "quadrant",
    value: function quadrant(index) {
      var split = [index % 2 === 0, index < 2];

      var qMin = _glMatrix.vec3.clone(this.min);

      var qMax = _glMatrix.vec3.clone(this.max);

      for (var axis = 0; axis < split.length; axis++) {
        qMin[axis] = split[axis] ? this.min[axis] : this.center[axis];
        qMax[axis] = split[axis] ? this.center[axis] : this.max[axis];
      }

      qMax[2] = this.max[2];
      return new Aabb(qMin, qMax);
    }
  }, {
    key: "distanceX",
    value: function distanceX(point) {
      var pointOnAabb = Math.max(Math.min(this.max[0], point[0]), this.min[0]);
      return pointOnAabb - point[0];
    }
  }, {
    key: "distanceY",
    value: function distanceY(point) {
      var pointOnAabb = Math.max(Math.min(this.max[1], point[1]), this.min[1]);
      return pointOnAabb - point[1];
    }
  }, {
    key: "intersects",
    value: function intersects(frustum) {
      var aabbPoints = [[this.min[0], this.min[1], 0.0, 1], [this.max[0], this.min[1], 0.0, 1], [this.max[0], this.max[1], 0.0, 1], [this.min[0], this.max[1], 0.0, 1]];
      var fullyInside = true;

      var _iterator = _createForOfIteratorHelper(frustum.planes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var plane = _step.value;
          var pointsInside = 0;

          var _iterator3 = _createForOfIteratorHelper(aabbPoints),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var i = _step3.value;
              pointsInside += _glMatrix.vec4.dot(plane, i) >= 0;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          if (pointsInside === 0) {
            return 0;
          }

          if (pointsInside !== aabbPoints.length) {
            fullyInside = false;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (fullyInside) {
        return 2;
      }

      for (var axis = 0; axis < 3; axis++) {
        var projMin = Number.MAX_VALUE;
        var projMax = -Number.MAX_VALUE;

        var _iterator2 = _createForOfIteratorHelper(frustum.points),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var p = _step2.value;
            var projectedPoint = p[axis] - this.min[axis];
            projMin = Math.min(projMin, projectedPoint);
            projMax = Math.max(projMax, projectedPoint);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (projMax < 0 || projMin > this.max[axis] - this.min[axis]) {
          return 0;
        }
      }

      return 1;
    }
  }]);
  return Aabb;
}();

exports.default = Aabb;
//# sourceMappingURL=Aabb.js.map