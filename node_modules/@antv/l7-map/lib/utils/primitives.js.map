{"version":3,"sources":["../../src/utils/primitives.ts"],"names":["Frustum","points","planes","invProj","worldSize","zoom","clipSpaceCorners","scale","Math","pow","frustumCoords","map","v","vec4","transformMat4","Float32Array","frustumPlanePointIndices","frustumPlanes","p","a","vec3","sub","b","n","normalize","cross","d","dot","concat"],"mappings":"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","sourcesContent":["import { vec3, vec4 } from 'gl-matrix';\nexport default class Frustum {\n  public static fromInvProjectionMatrix(\n    invProj: Float32Array,\n    worldSize: number,\n    zoom: number,\n  ): Frustum {\n    const clipSpaceCorners: Array<[number, number, number, number]> = [\n      [-1, 1, -1, 1],\n      [1, 1, -1, 1],\n      [1, -1, -1, 1],\n      [-1, -1, -1, 1],\n      [-1, 1, 1, 1],\n      [1, 1, 1, 1],\n      [1, -1, 1, 1],\n      [-1, -1, 1, 1],\n    ];\n\n    const scale = Math.pow(2, zoom);\n\n    // Transform frustum corner points from clip space to tile space\n    const frustumCoords = clipSpaceCorners\n      .map((v) => vec4.transformMat4(new Float32Array([]), v, invProj))\n      .map((v) =>\n        vec4.scale(new Float32Array([]), v, (1.0 / v[3] / worldSize) * scale),\n      );\n\n    const frustumPlanePointIndices: Array<[number, number, number]> = [\n      [0, 1, 2], // near\n      [6, 5, 4], // far\n      [0, 3, 7], // left\n      [2, 1, 5], // right\n      [3, 2, 6], // bottom\n      [0, 4, 5], // top\n    ];\n\n    const frustumPlanes = frustumPlanePointIndices.map(\n      (p: [number, number, number]) => {\n        const a = vec3.sub(\n          new Float32Array(3),\n          new Float32Array(frustumCoords[p[0]]),\n          new Float32Array(frustumCoords[p[1]]),\n        );\n        const b = vec3.sub(\n          new Float32Array(3),\n          new Float32Array(frustumCoords[p[2]]),\n          new Float32Array(frustumCoords[p[1]]),\n        );\n        const n = vec3.normalize(\n          new Float32Array(3),\n          vec3.cross(new Float32Array(3), a, b),\n        );\n        const d = -vec3.dot(n, new Float32Array(frustumCoords[p[1]]));\n        return (n as number[]).concat(d);\n      },\n    );\n\n    return new Frustum(frustumCoords as number[][], frustumPlanes);\n  }\n  public points: number[][];\n  public planes: number[][];\n\n  constructor(points: number[][], planes: number[][]) {\n    this.points = points;\n    this.planes = planes;\n  }\n}\n"],"file":"primitives.js"}