"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var TaskQueue = function () {
  function TaskQueue() {
    (0, _classCallCheck2.default)(this, TaskQueue);
    this.queue = void 0;
    this.id = void 0;
    this.cleared = void 0;
    this.currentlyRunning = void 0;
    this.queue = [];
    this.id = 0;
    this.cleared = false;
    this.currentlyRunning = false;
  }

  (0, _createClass2.default)(TaskQueue, [{
    key: "add",
    value: function add(callback) {
      var id = ++this.id;
      var queue = this.queue;
      queue.push({
        callback: callback,
        id: id,
        cancelled: false
      });
      return id;
    }
  }, {
    key: "remove",
    value: function remove(id) {
      var running = this.currentlyRunning;
      var queue = running ? this.queue.concat(running) : this.queue;

      var _iterator = _createForOfIteratorHelper(queue),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var task = _step.value;

          if (task.id === id) {
            task.cancelled = true;
            return;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "run",
    value: function run() {
      var timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var queue = this.currentlyRunning = this.queue;
      this.queue = [];

      var _iterator2 = _createForOfIteratorHelper(queue),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var task = _step2.value;

          if (task.cancelled) {
            continue;
          }

          task.callback(timeStamp);

          if (this.cleared) {
            break;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this.cleared = false;
      this.currentlyRunning = false;
    }
  }, {
    key: "clear",
    value: function clear() {
      if (this.currentlyRunning) {
        this.cleared = true;
      }

      this.queue = [];
    }
  }]);
  return TaskQueue;
}();

var _default = TaskQueue;
exports.default = _default;
//# sourceMappingURL=task_queue.js.map