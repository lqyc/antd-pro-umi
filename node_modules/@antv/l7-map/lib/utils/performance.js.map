{"version":3,"sources":["../../src/utils/performance.ts"],"names":["lastFrameTime","frameTimes","minFramerateTarget","frameTimeTarget","performance","window","PerformanceMarkers","create","load","fullLoad","PerformanceUtils","mark","marker","frame","timestamp","currTimestamp","frameTime","push","clearMetrics","clearMeasures","clearMarks","getPerformanceMetrics","loadTime","measure","duration","fullLoadTime","totalFrames","length","avgFrameTime","reduce","prev","curr","fps","droppedFrames","filter","acc","percentDroppedFrames"],"mappings":";;;;;;AAAA,IAAIA,aAA4B,GAAG,IAAnC;AACA,IAAIC,UAAoB,GAAG,EAA3B;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AACA,IAAMC,eAAe,GAAG,OAAOD,kBAA/B;AACA,IAAME,WAAW,GAAGC,MAAM,CAACD,WAA3B;AASO,IAAME,kBAAkB,GAAG;AAChCC,EAAAA,MAAM,EAAE,QADwB;AAEhCC,EAAAA,IAAI,EAAE,MAF0B;AAGhCC,EAAAA,QAAQ,EAAE;AAHsB,CAA3B;;AAMA,IAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,IAD8B,gBACzBC,MADyB,EACT;AACnBR,IAAAA,WAAW,CAACO,IAAZ,CAAiBC,MAAjB;AACD,GAH6B;AAI9BC,EAAAA,KAJ8B,iBAIxBC,SAJwB,EAIL;AACvB,QAAMC,aAAa,GAAGD,SAAtB;;AACA,QAAId,aAAa,IAAI,IAArB,EAA2B;AACzB,UAAMgB,SAAS,GAAGD,aAAa,GAAGf,aAAlC;AACAC,MAAAA,UAAU,CAACgB,IAAX,CAAgBD,SAAhB;AACD;;AACDhB,IAAAA,aAAa,GAAGe,aAAhB;AACD,GAX6B;AAY9BG,EAAAA,YAZ8B,0BAYf;AACblB,IAAAA,aAAa,GAAG,IAAhB;AACAC,IAAAA,UAAU,GAAG,EAAb;AACAG,IAAAA,WAAW,CAACe,aAAZ,CAA0B,UAA1B;AACAf,IAAAA,WAAW,CAACe,aAAZ,CAA0B,cAA1B;;AAGA,SAAK,IAAMP,MAAX,IAAqBN,kBAArB,EAAyC;AAEvCF,MAAAA,WAAW,CAACgB,UAAZ,CAAuBd,kBAAkB,CAACM,MAAD,CAAzC;AACD;AACF,GAvB6B;AAwB9BS,EAAAA,qBAxB8B,mCAwBe;AAC3C,QAAMC,QAAQ,GAAGlB,WAAW,CAACmB,OAAZ,CACf,UADe,EAEfjB,kBAAkB,CAACC,MAFJ,EAGfD,kBAAkB,CAACE,IAHJ,EAKfgB,QALF;AAOA,QAAMC,YAAY,GAAGrB,WAAW,CAACmB,OAAZ,CACnB,cADmB,EAEnBjB,kBAAkB,CAACC,MAFA,EAGnBD,kBAAkB,CAACG,QAHA,EAKnBe,QALF;AAMA,QAAME,WAAW,GAAGzB,UAAU,CAAC0B,MAA/B;AAEA,QAAMC,YAAY,GAChB3B,UAAU,CAAC4B,MAAX,CAAkB,UAACC,IAAD,EAAOC,IAAP;AAAA,aAAgBD,IAAI,GAAGC,IAAvB;AAAA,KAAlB,EAA+C,CAA/C,IAAoDL,WAApD,GAAkE,IADpE;AAEA,QAAMM,GAAG,GAAG,IAAIJ,YAAhB;AAGA,QAAMK,aAAa,GAAGhC,UAAU,CAC7BiC,MADmB,CACZ,UAAClB,SAAD;AAAA,aAAeA,SAAS,GAAGb,eAA3B;AAAA,KADY,EAEnB0B,MAFmB,CAEZ,UAACM,GAAD,EAAMJ,IAAN,EAAe;AACrB,aAAOI,GAAG,GAAG,CAACJ,IAAI,GAAG5B,eAAR,IAA2BA,eAAxC;AACD,KAJmB,EAIjB,CAJiB,CAAtB;AAKA,QAAMiC,oBAAoB,GACvBH,aAAa,IAAIP,WAAW,GAAGO,aAAlB,CAAd,GAAkD,GADpD;AAGA,WAAO;AACLX,MAAAA,QAAQ,EAARA,QADK;AAELG,MAAAA,YAAY,EAAZA,YAFK;AAGLO,MAAAA,GAAG,EAAHA,GAHK;AAILI,MAAAA,oBAAoB,EAApBA;AAJK,KAAP;AAMD;AA3D6B,CAAzB","sourcesContent":["let lastFrameTime: number | null = null;\nlet frameTimes: number[] = [];\n\nconst minFramerateTarget = 30;\nconst frameTimeTarget = 1000 / minFramerateTarget;\nconst performance = window.performance;\n\nexport interface IPerformanceMetrics {\n  loadTime: number;\n  fullLoadTime: number;\n  fps: number;\n  percentDroppedFrames: number;\n}\n\nexport const PerformanceMarkers = {\n  create: 'create',\n  load: 'load',\n  fullLoad: 'fullLoad',\n};\n\nexport const PerformanceUtils = {\n  mark(marker: string) {\n    performance.mark(marker);\n  },\n  frame(timestamp: number) {\n    const currTimestamp = timestamp;\n    if (lastFrameTime != null) {\n      const frameTime = currTimestamp - lastFrameTime;\n      frameTimes.push(frameTime);\n    }\n    lastFrameTime = currTimestamp;\n  },\n  clearMetrics() {\n    lastFrameTime = null;\n    frameTimes = [];\n    performance.clearMeasures('loadTime');\n    performance.clearMeasures('fullLoadTime');\n    // @ts-ignore\n    // tslint:disable-next-line:forin\n    for (const marker in PerformanceMarkers) {\n      // @ts-ignore\n      performance.clearMarks(PerformanceMarkers[marker]);\n    }\n  },\n  getPerformanceMetrics(): IPerformanceMetrics {\n    const loadTime = performance.measure(\n      'loadTime',\n      PerformanceMarkers.create,\n      PerformanceMarkers.load,\n      // @ts-ignore\n    ).duration;\n\n    const fullLoadTime = performance.measure(\n      'fullLoadTime',\n      PerformanceMarkers.create,\n      PerformanceMarkers.fullLoad,\n      // @ts-ignore\n    ).duration;\n    const totalFrames = frameTimes.length;\n\n    const avgFrameTime =\n      frameTimes.reduce((prev, curr) => prev + curr, 0) / totalFrames / 1000;\n    const fps = 1 / avgFrameTime;\n\n    // count frames that missed our framerate target\n    const droppedFrames = frameTimes\n      .filter((frameTime) => frameTime > frameTimeTarget)\n      .reduce((acc, curr) => {\n        return acc + (curr - frameTimeTarget) / frameTimeTarget;\n      }, 0);\n    const percentDroppedFrames =\n      (droppedFrames / (totalFrames + droppedFrames)) * 100;\n\n    return {\n      loadTime,\n      fullLoadTime,\n      fps,\n      percentDroppedFrames,\n    };\n  },\n};\n"],"file":"performance.js"}