{"version":3,"sources":["../../src/geo/mercator.ts"],"names":["earthCircumfrence","Math","PI","earthRadius","circumferenceAtLatitude","latitude","cos","mercatorXfromLng","lng","mercatorYfromLat","lat","log","tan","mercatorZfromAltitude","altitude","lngFromMercatorX","x","latFromMercatorY","y","y2","atan","exp","altitudeFromMercatorZ","z","mercatorScale","MercatorCoordinate","LngLat","lngLatLike","lngLat","convert"],"mappings":"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","sourcesContent":["import LngLat, { earthRadius, LngLatLike } from '../geo/lng_lat';\n\n/*\n * The average circumference of the world in meters.\n */\nconst earthCircumfrence = 2 * Math.PI * earthRadius; // meters\n\n/*\n * The circumference at a line of latitude in meters.\n */\nfunction circumferenceAtLatitude(latitude: number) {\n  return earthCircumfrence * Math.cos((latitude * Math.PI) / 180);\n}\n\nexport function mercatorXfromLng(lng: number) {\n  return (180 + lng) / 360;\n}\n\nexport function mercatorYfromLat(lat: number) {\n  return (\n    (180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) /\n    360\n  );\n}\n\nexport function mercatorZfromAltitude(altitude: number, lat: number) {\n  return altitude / circumferenceAtLatitude(lat);\n}\n\nexport function lngFromMercatorX(x: number) {\n  return x * 360 - 180;\n}\n\nexport function latFromMercatorY(y: number) {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\nexport function altitudeFromMercatorZ(z: number, y: number) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param {number} lat Latitude\n * @returns {number} scale factor\n * @private\n */\nexport function mercatorScale(lat: number) {\n  return 1 / Math.cos((lat * Math.PI) / 180);\n}\n\nexport default class MercatorCoordinate {\n  public static fromLngLat(lngLatLike: LngLatLike, altitude: number = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n\n    return new MercatorCoordinate(\n      mercatorXfromLng(lngLat.lng),\n      mercatorYfromLat(lngLat.lat),\n      mercatorZfromAltitude(altitude, lngLat.lat),\n    );\n  }\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(x: number, y: number, z: number = 0) {\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  public toLngLat() {\n    return new LngLat(lngFromMercatorX(this.x), latFromMercatorY(this.y));\n  }\n\n  public toAltitude() {\n    return altitudeFromMercatorZ(this.z, this.y);\n  }\n\n  public meterInMercatorCoordinateUnits() {\n    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n    return (1 / earthCircumfrence) * mercatorScale(latFromMercatorY(this.y));\n  }\n}\n"],"file":"mercator.js"}