{"version":3,"sources":["../../src/geo/simple.ts"],"names":["earthCircumfrence","Math","PI","earthRadius","circumferenceAtLatitude","latitude","cos","mercatorXfromLng","lng","mercatorYfromLat","lat","mercatorZfromAltitude","altitude","lngFromMercatorX","x","latFromMercatorY","y","altitudeFromMercatorZ","z","mercatorScale","SimpleCoordinate","LngLat","lngLatLike","lngLat","convert"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKA,IAAMA,iBAAiB,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcC,oBAAxC;;AAKA,SAASC,uBAAT,CAAiCC,QAAjC,EAAmD;AACjD,SAAOL,iBAAiB,GAAGC,IAAI,CAACK,GAAL,CAAUD,QAAQ,GAAGJ,IAAI,CAACC,EAAjB,GAAuB,GAAhC,CAA3B;AACD;;AAEM,SAASK,gBAAT,CAA0BC,GAA1B,EAAuC;AAC5C,SAAOA,GAAP;AACD;;AAEM,SAASC,gBAAT,CAA0BC,GAA1B,EAAuC;AAC5C,SAAOA,GAAP;AACD;;AAEM,SAASC,qBAAT,CAA+BC,QAA/B,EAAiDF,GAAjD,EAA8D;AACnE,SAAOE,QAAP;AACD;;AAEM,SAASC,gBAAT,CAA0BC,CAA1B,EAAqC;AAC1C,SAAOA,CAAP;AACD;;AAEM,SAASC,gBAAT,CAA0BC,CAA1B,EAAqC;AAC1C,SAAOA,CAAP;AACD;;AAEM,SAASC,qBAAT,CAA+BC,CAA/B,EAA0CF,CAA1C,EAAqD;AAC1D,SAAOE,CAAP;AACD;;AAYM,SAASC,aAAT,CAAuBT,GAAvB,EAAoC;AACzC,SAAO,CAAP;AACD;;IAEoBU,gB;AAcnB,4BAAYN,CAAZ,EAAuBE,CAAvB,EAAiD;AAAA,QAAfE,CAAe,uEAAH,CAAG;AAAA;AAAA,SAJ1CJ,CAI0C;AAAA,SAH1CE,CAG0C;AAAA,SAF1CE,CAE0C;AAC/C,SAAKJ,CAAL,GAAS,CAACA,CAAV;AACA,SAAKE,CAAL,GAAS,CAACA,CAAV;AACA,SAAKE,CAAL,GAAS,CAACA,CAAV;AACD;;;;WACD,oBAAkB;AAChB,aAAO,IAAIG,gBAAJ,CAAW,KAAKP,CAAhB,EAAmB,KAAKE,CAAxB,CAAP;AACD;;;WAED,sBAAoB;AAClB,aAAO,KAAKE,CAAZ;AACD;;;WAED,0CAAwC;AAEtC,aAAO,CAAP;AACD;;;WA7BD,oBAAyBI,UAAzB,EAAuE;AAAA,UAAtBV,QAAsB,uEAAH,CAAG;;AACrE,UAAMW,MAAM,GAAGF,iBAAOG,OAAP,CAAeF,UAAf,CAAf;;AAEA,aAAO,IAAIF,gBAAJ,CACLb,gBAAgB,CAACgB,MAAM,CAACf,GAAR,CADX,EAELC,gBAAgB,CAACc,MAAM,CAACb,GAAR,CAFX,EAGLC,qBAAqB,CAACC,QAAD,EAAWW,MAAM,CAACb,GAAlB,CAHhB,CAAP;AAKD","sourcesContent":["import LngLat, { earthRadius, LngLatLike } from '../geo/lng_lat';\n\n/*\n * The average circumference of the world in meters.\n */\nconst earthCircumfrence = 2 * Math.PI * earthRadius; // meters\n\n/*\n * The circumference at a line of latitude in meters.\n */\nfunction circumferenceAtLatitude(latitude: number) {\n  return earthCircumfrence * Math.cos((latitude * Math.PI) / 180);\n}\n\nexport function mercatorXfromLng(lng: number) {\n  return lng;\n}\n\nexport function mercatorYfromLat(lat: number) {\n  return lat;\n}\n\nexport function mercatorZfromAltitude(altitude: number, lat: number) {\n  return altitude;\n}\n\nexport function lngFromMercatorX(x: number) {\n  return x;\n}\n\nexport function latFromMercatorY(y: number) {\n  return y;\n}\n\nexport function altitudeFromMercatorZ(z: number, y: number) {\n  return z;\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param {number} lat Latitude\n * @returns {number} scale factor\n * @private\n */\nexport function mercatorScale(lat: number) {\n  return 1;\n}\n\nexport default class SimpleCoordinate {\n  public static fromLngLat(lngLatLike: LngLatLike, altitude: number = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n\n    return new SimpleCoordinate(\n      mercatorXfromLng(lngLat.lng),\n      mercatorYfromLat(lngLat.lat),\n      mercatorZfromAltitude(altitude, lngLat.lat),\n    );\n  }\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(x: number, y: number, z: number = 0) {\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n  public toLngLat() {\n    return new LngLat(this.x, this.y);\n  }\n\n  public toAltitude() {\n    return this.z;\n  }\n\n  public meterInMercatorCoordinateUnits() {\n    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n    return 1;\n  }\n}\n"],"file":"simple.js"}