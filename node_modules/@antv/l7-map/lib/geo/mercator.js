"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorXfromLng = mercatorXfromLng;
exports.mercatorYfromLat = mercatorYfromLat;
exports.mercatorZfromAltitude = mercatorZfromAltitude;
exports.lngFromMercatorX = lngFromMercatorX;
exports.latFromMercatorY = latFromMercatorY;
exports.altitudeFromMercatorZ = altitudeFromMercatorZ;
exports.mercatorScale = mercatorScale;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _lng_lat = _interopRequireWildcard(require("../geo/lng_lat"));

var earthCircumfrence = 2 * Math.PI * _lng_lat.earthRadius;

function circumferenceAtLatitude(latitude) {
  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
}

function mercatorXfromLng(lng) {
  return (180 + lng) / 360;
}

function mercatorYfromLat(lat) {
  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;
}

function mercatorZfromAltitude(altitude, lat) {
  return altitude / circumferenceAtLatitude(lat);
}

function lngFromMercatorX(x) {
  return x * 360 - 180;
}

function latFromMercatorY(y) {
  var y2 = 180 - y * 360;
  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;
}

function altitudeFromMercatorZ(z, y) {
  return z * circumferenceAtLatitude(latFromMercatorY(y));
}

function mercatorScale(lat) {
  return 1 / Math.cos(lat * Math.PI / 180);
}

var MercatorCoordinate = function () {
  function MercatorCoordinate(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    (0, _classCallCheck2.default)(this, MercatorCoordinate);
    this.x = void 0;
    this.y = void 0;
    this.z = void 0;
    this.x = +x;
    this.y = +y;
    this.z = +z;
  }

  (0, _createClass2.default)(MercatorCoordinate, [{
    key: "toLngLat",
    value: function toLngLat() {
      return new _lng_lat.default(lngFromMercatorX(this.x), latFromMercatorY(this.y));
    }
  }, {
    key: "toAltitude",
    value: function toAltitude() {
      return altitudeFromMercatorZ(this.z, this.y);
    }
  }, {
    key: "meterInMercatorCoordinateUnits",
    value: function meterInMercatorCoordinateUnits() {
      return 1 / earthCircumfrence * mercatorScale(latFromMercatorY(this.y));
    }
  }], [{
    key: "fromLngLat",
    value: function fromLngLat(lngLatLike) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var lngLat = _lng_lat.default.convert(lngLatLike);

      return new MercatorCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));
    }
  }]);
  return MercatorCoordinate;
}();

exports.default = MercatorCoordinate;
//# sourceMappingURL=mercator.js.map