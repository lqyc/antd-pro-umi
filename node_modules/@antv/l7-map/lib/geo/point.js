"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Point = function () {
  function Point(x, y) {
    (0, _classCallCheck2.default)(this, Point);
    this.x = void 0;
    this.y = void 0;
    this.x = x;
    this.y = y;
  }

  (0, _createClass2.default)(Point, [{
    key: "clone",
    value: function clone() {
      return new Point(this.x, this.y);
    }
  }, {
    key: "_add",
    value: function _add(p) {
      this.x += p.x;
      this.y += p.y;
      return this;
    }
  }, {
    key: "add",
    value: function add(p) {
      return this.clone()._add(p);
    }
  }, {
    key: "_sub",
    value: function _sub(p) {
      this.x -= p.x;
      this.y -= p.y;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(p) {
      return this.clone()._sub(p);
    }
  }, {
    key: "_multByPoint",
    value: function _multByPoint(p) {
      this.x *= p.x;
      this.y *= p.y;
      return this;
    }
  }, {
    key: "multByPoint",
    value: function multByPoint(p) {
      return this.clone()._multByPoint(p);
    }
  }, {
    key: "_divByPoint",
    value: function _divByPoint(p) {
      this.x /= p.x;
      this.y /= p.y;
      return this;
    }
  }, {
    key: "divByPoint",
    value: function divByPoint(p) {
      return this.clone()._divByPoint(p);
    }
  }, {
    key: "_mult",
    value: function _mult(k) {
      this.x *= k;
      this.y *= k;
      return this;
    }
  }, {
    key: "mult",
    value: function mult(k) {
      return this.clone()._mult(k);
    }
  }, {
    key: "_div",
    value: function _div(k) {
      this.x /= k;
      this.y /= k;
      return this;
    }
  }, {
    key: "div",
    value: function div(k) {
      return this.clone()._div(k);
    }
  }, {
    key: "_rotate",
    value: function _rotate(angle) {
      var cos = Math.cos(angle);
      var sin = Math.sin(angle);
      var x = cos * this.x - sin * this.y;
      var y = sin * this.x + cos * this.y;
      this.x = x;
      this.y = y;
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(angle) {
      return this.clone()._rotate(angle);
    }
  }, {
    key: "_rotateAround",
    value: function _rotateAround(angle, p) {
      var cos = Math.cos(angle);
      var sin = Math.sin(angle);
      var x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y);
      var y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);
      this.x = x;
      this.y = y;
      return this;
    }
  }, {
    key: "roateAround",
    value: function roateAround(angle, p) {
      return this.clone()._rotateAround(angle, p);
    }
  }, {
    key: "_matMult",
    value: function _matMult(m) {
      var x = m[0] * this.x + m[1] * this.y;
      var y = m[2] * this.x + m[3] * this.y;
      this.x = x;
      this.y = y;
      return this;
    }
  }, {
    key: "matMult",
    value: function matMult(m) {
      return this.clone()._matMult(m);
    }
  }, {
    key: "_unit",
    value: function _unit() {
      this.div(this.mag());
      return this;
    }
  }, {
    key: "unit",
    value: function unit() {
      return this.clone()._unit();
    }
  }, {
    key: "_perp",
    value: function _perp() {
      var y = this.y;
      this.y = this.x;
      this.x = -y;
      return this;
    }
  }, {
    key: "perp",
    value: function perp() {
      return this.clone()._perp();
    }
  }, {
    key: "_round",
    value: function _round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
  }, {
    key: "round",
    value: function round() {
      return this.clone()._round();
    }
  }, {
    key: "mag",
    value: function mag() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this.x === other.x && this.y === other.y;
    }
  }, {
    key: "dist",
    value: function dist(p) {
      return Math.sqrt(this.distSqr(p));
    }
  }, {
    key: "distSqr",
    value: function distSqr(p) {
      var dx = p.x - this.x;
      var dy = p.y - this.y;
      return dx * dx + dy * dy;
    }
  }, {
    key: "angle",
    value: function angle() {
      return Math.atan2(this.y, this.x);
    }
  }, {
    key: "angleTo",
    value: function angleTo(b) {
      return Math.atan2(this.y - b.y, this.x - b.x);
    }
  }, {
    key: "angleWith",
    value: function angleWith(b) {
      return this.angleWithSep(b.x, b.y);
    }
  }, {
    key: "angleWithSep",
    value: function angleWithSep(x, y) {
      return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);
    }
  }], [{
    key: "convert",
    value: function convert(a) {
      if (a instanceof Point) {
        return a;
      }

      if (Array.isArray(a)) {
        return new Point(a[0], a[1]);
      }

      return a;
    }
  }]);
  return Point;
}();

exports.default = Point;
//# sourceMappingURL=point.js.map