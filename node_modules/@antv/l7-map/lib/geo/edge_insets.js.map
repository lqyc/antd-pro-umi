{"version":3,"sources":["../../src/geo/edge_insets.ts"],"names":["EdgeInsets","top","bottom","left","right","isNaN","Error","start","target","t","width","height","x","y","Point","other"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { clamp, interpolate } from '../util';\nimport Point from './point';\n\n/**\n * An `EdgeInset` object represents screen space padding applied to the edges of the viewport.\n * This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\n * on top of the map and having the vanishing point shift as UI elements resize.\n *\n * @param {number} [top=0]\n * @param {number} [bottom=0]\n * @param {number} [left=0]\n * @param {number} [right=0]\n */\nexport default class EdgeInsets {\n  public top: number;\n  public bottom: number;\n  public left: number;\n  public right: number;\n\n  constructor(\n    top: number = 0,\n    bottom: number = 0,\n    left: number = 0,\n    right: number = 0,\n  ) {\n    if (\n      isNaN(top) ||\n      top < 0 ||\n      isNaN(bottom) ||\n      bottom < 0 ||\n      isNaN(left) ||\n      left < 0 ||\n      isNaN(right) ||\n      right < 0\n    ) {\n      throw new Error(\n        'Invalid value for edge-insets, top, bottom, left and right must all be numbers',\n      );\n    }\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Interpolates the inset in-place.\n   * This maintains the current inset value for any inset not present in `target`.\n   *\n   * @param {PaddingOptions} target\n   * @param {number} t\n   * @returns {EdgeInsets}\n   * @memberof EdgeInsets\n   */\n  public interpolate(\n    start: IPaddingOptions | EdgeInsets,\n    target: IPaddingOptions,\n    t: number,\n  ): EdgeInsets {\n    if (target.top != null && start.top != null) {\n      this.top = interpolate(start.top, target.top, t);\n    }\n    if (target.bottom != null && start.bottom != null) {\n      this.bottom = interpolate(start.bottom, target.bottom, t);\n    }\n    if (target.left != null && start.left != null) {\n      this.left = interpolate(start.left, target.left, t);\n    }\n    if (target.right != null && start.right != null) {\n      this.right = interpolate(start.right, target.right, t);\n    }\n\n    return this;\n  }\n\n  /**\n   * Utility method that computes the new apprent center or vanishing point after applying insets.\n   * This is in pixels and with the top left being (0.0) and +y being downwards.\n   *\n   * @param {number} width\n   * @param {number} height\n   * @returns {Point}\n   * @memberof EdgeInsets\n   */\n  public getCenter(width: number, height: number): Point {\n    // Clamp insets so they never overflow width/height and always calculate a valid center\n    const x = clamp((this.left + width - this.right) / 2, 0, width);\n    const y = clamp((this.top + height - this.bottom) / 2, 0, height);\n\n    return new Point(x, y);\n  }\n\n  public equals(other: IPaddingOptions): boolean {\n    return (\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.left === other.left &&\n      this.right === other.right\n    );\n  }\n\n  public clone(): EdgeInsets {\n    return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n  }\n\n  /**\n   * Returns the current sdtate as json, useful when you want to have a\n   * read-only representation of the inset.\n   *\n   * @returns {PaddingOptions}\n   * @memberof EdgeInsets\n   */\n  public toJSON(): IPaddingOptions {\n    return {\n      top: this.top,\n      bottom: this.bottom,\n      left: this.left,\n      right: this.right,\n    };\n  }\n}\n\nexport interface IPaddingOptions {\n  top?: number;\n  bottom?: number;\n  right?: number;\n  left?: number;\n}\n"],"file":"edge_insets.js"}