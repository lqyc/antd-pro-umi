"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _util = require("../util");

var _point = _interopRequireDefault(require("./point"));

var EdgeInsets = function () {
  function EdgeInsets() {
    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var bottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    (0, _classCallCheck2.default)(this, EdgeInsets);
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;

    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {
      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');
    }

    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  }

  (0, _createClass2.default)(EdgeInsets, [{
    key: "interpolate",
    value: function interpolate(start, target, t) {
      if (target.top != null && start.top != null) {
        this.top = (0, _util.interpolate)(start.top, target.top, t);
      }

      if (target.bottom != null && start.bottom != null) {
        this.bottom = (0, _util.interpolate)(start.bottom, target.bottom, t);
      }

      if (target.left != null && start.left != null) {
        this.left = (0, _util.interpolate)(start.left, target.left, t);
      }

      if (target.right != null && start.right != null) {
        this.right = (0, _util.interpolate)(start.right, target.right, t);
      }

      return this;
    }
  }, {
    key: "getCenter",
    value: function getCenter(width, height) {
      var x = (0, _util.clamp)((this.left + width - this.right) / 2, 0, width);
      var y = (0, _util.clamp)((this.top + height - this.bottom) / 2, 0, height);
      return new _point.default(x, y);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new EdgeInsets(this.top, this.bottom, this.left, this.right);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        top: this.top,
        bottom: this.bottom,
        left: this.left,
        right: this.right
      };
    }
  }]);
  return EdgeInsets;
}();

exports.default = EdgeInsets;
//# sourceMappingURL=edge_insets.js.map