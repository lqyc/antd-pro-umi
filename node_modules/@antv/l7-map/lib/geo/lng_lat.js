"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.earthRadius = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _util = require("../util");

var _lng_lat_bounds = _interopRequireDefault(require("./lng_lat_bounds"));

var earthRadius = 6371008.8;
exports.earthRadius = earthRadius;

var LngLat = function () {
  function LngLat(lng, lat) {
    (0, _classCallCheck2.default)(this, LngLat);
    this.lng = void 0;
    this.lat = void 0;

    if (isNaN(lng) || isNaN(lat)) {
      throw new Error("Invalid LngLat object: (".concat(lng, ", ").concat(lat, ")"));
    }

    this.lng = +lng;
    this.lat = +lat;

    if (this.lat > 90 || this.lat < -90) {
      throw new Error('Invalid LngLat latitude value: must be between -90 and 90');
    }
  }

  (0, _createClass2.default)(LngLat, [{
    key: "wrap",
    value: function wrap() {
      return new LngLat((0, _util.wrap)(this.lng, -180, 180), this.lat);
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return [this.lng, this.lat];
    }
  }, {
    key: "toBounds",
    value: function toBounds() {
      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var earthCircumferenceInMetersAtEquator = 40075017;
      var latAccuracy = 360 * radius / earthCircumferenceInMetersAtEquator;
      var lngAccuracy = latAccuracy / Math.cos(Math.PI / 180 * this.lat);
      return new _lng_lat_bounds.default(new LngLat(this.lng - lngAccuracy, this.lat - latAccuracy), new LngLat(this.lng + lngAccuracy, this.lat + latAccuracy));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "LngLat(".concat(this.lng, ", ").concat(this.lat, ")");
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(lngLat) {
      var rad = Math.PI / 180;
      var lat1 = this.lat * rad;
      var lat2 = lngLat.lat * rad;
      var a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);
      var maxMeters = earthRadius * Math.acos(Math.min(a, 1));
      return maxMeters;
    }
  }], [{
    key: "convert",
    value: function convert(input) {
      if (input instanceof LngLat) {
        return input;
      }

      if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {
        return new LngLat(Number(input[0]), Number(input[1]));
      }

      if (!Array.isArray(input) && (0, _typeof2.default)(input) === 'object' && input !== null) {
        var lng = 'lng' in input ? input.lng : input.lon;
        return new LngLat(Number(lng), Number(input.lat));
      }

      throw new Error('`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]');
    }
  }]);
  return LngLat;
}();

exports.default = LngLat;
//# sourceMappingURL=lng_lat.js.map