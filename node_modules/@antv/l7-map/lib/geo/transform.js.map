{"version":3,"sources":["../../src/geo/transform.ts"],"names":["EXTENT","Transform","minZoom","maxZoom","minPitch","maxPitch","renderWorldCopies","tileSize","tileZoom","lngRange","latRange","maxValidLatitude","scale","width","height","angle","rotationMatrix","pixelsToGLUnits","cameraToCenterDistance","mercatorMatrix","projMatrix","invProjMatrix","alignedProjMatrix","pixelMatrix","pixelMatrixInverse","glCoordMatrix","labelPlaneMatrix","_fov","_pitch","_zoom","_renderWorldCopies","_minZoom","_maxZoom","_minPitch","_maxPitch","_center","zoomFraction","unmodified","edgeInsets","constraining","posMatrixCache","alignedPosMatrixCache","undefined","setMaxBounds","LngLat","zoom","EdgeInsets","Math","max","min","pitch","centerPoint","_sub","size","_div","Point","PI","bearing","b","calcMatrices","mat2","create","rotate","p","fov","z","zoomScale","floor","constrain","center","lat","lng","toJSON","padding","equals","interpolate","getCenter","project","clone","start","target","t","options","roundZoom","round","scaleZoom","pow","log","LN2","lnglat","worldSize","point","MercatorCoordinate","x","y","toLngLat","a","pointCoordinate","loc","locationCoordinate","newCenter","coordinateLocation","wrap","targetZ","coord0","Float32Array","coord1","vec4","transformMat4","w0","w1","x0","x1","y0","y1","z0","z1","LngLatBounds","extend","pointLocation","length","bounds","getWest","getEast","getSouth","getNorth","slice","coord","topPoint","yOffset","tan","add","queryGeometry","c","getCameraPoint","minX","minY","maxX","maxY","fromValues","coordinatePoint","fromLngLat","sy","sx","x2","y2","s","unproject","h2","w2","halfFov","offset","centerOffset","groundAngle","fovAboveCenter","topHalfSurfaceDistance","sin","furthestDistance","cos","farZ","nearZ","m","mat4","perspective","translate","rotateX","rotateZ","vec3","invert","xShift","yShift","angleCos","angleSin","dx","dy","alignedM","multiply","Error"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { mat2, mat4, vec3, vec4 } from 'gl-matrix';\nimport Point, { PointLike } from '../geo/point';\nimport { clamp, interpolate, wrap } from '../util';\nimport Aabb from '../utils/Aabb';\nimport Frustum from '../utils/primitives';\nimport EdgeInsets, { IPaddingOptions } from './edge_insets';\nimport LngLat from './lng_lat';\nimport LngLatBounds from './lng_lat_bounds';\nimport MercatorCoordinate, {\n  mercatorXfromLng,\n  mercatorYfromLat,\n  mercatorZfromAltitude,\n} from './mercator';\nexport const EXTENT = 8192;\nexport default class Transform {\n  get minZoom(): number {\n    return this._minZoom;\n  }\n  set minZoom(zoom: number) {\n    if (this._minZoom === zoom) {\n      return;\n    }\n    this._minZoom = zoom;\n    this.zoom = Math.max(this.zoom, zoom);\n  }\n\n  get maxZoom(): number {\n    return this._maxZoom;\n  }\n  set maxZoom(zoom: number) {\n    if (this._maxZoom === zoom) {\n      return;\n    }\n    this._maxZoom = zoom;\n    this.zoom = Math.min(this.zoom, zoom);\n  }\n\n  get minPitch(): number {\n    return this._minPitch;\n  }\n  set minPitch(pitch: number) {\n    if (this._minPitch === pitch) {\n      return;\n    }\n    this._minPitch = pitch;\n    this._pitch = Math.max(this._pitch, pitch);\n  }\n\n  get maxPitch(): number {\n    return this._maxPitch;\n  }\n  set maxPitch(pitch: number) {\n    if (this._maxPitch === pitch) {\n      return;\n    }\n    this._maxPitch = pitch;\n    this._pitch = Math.min(this._pitch, pitch);\n  }\n\n  get renderWorldCopies(): boolean {\n    return this._renderWorldCopies;\n  }\n  set renderWorldCopies(renderWorldCopies: boolean) {\n    if (renderWorldCopies === undefined) {\n      renderWorldCopies = true;\n    } else if (renderWorldCopies === null) {\n      renderWorldCopies = false;\n    }\n\n    this._renderWorldCopies = renderWorldCopies;\n  }\n\n  get worldSize(): number {\n    return this.tileSize * this.scale;\n  }\n\n  get centerOffset(): Point {\n    return this.centerPoint._sub(this.size._div(2));\n  }\n\n  get size(): Point {\n    return new Point(this.width, this.height);\n  }\n\n  get bearing(): number {\n    return (-this.angle / Math.PI) * 180;\n  }\n  set bearing(bearing: number) {\n    const b = (-wrap(bearing, -180, 180) * Math.PI) / 180;\n    if (this.angle === b) {\n      return;\n    }\n    this.unmodified = false;\n    this.angle = b;\n    this.calcMatrices();\n\n    // 2x2 matrix for rotating points\n    this.rotationMatrix = mat2.create();\n    mat2.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);\n  }\n\n  get pitch(): number {\n    return (this._pitch / Math.PI) * 180;\n  }\n  set pitch(pitch: number) {\n    const p = (clamp(pitch, this._minPitch, this._maxPitch) / 180) * Math.PI;\n    if (this._pitch === p) {\n      return;\n    }\n    this.unmodified = false;\n    this._pitch = p;\n    this.calcMatrices();\n  }\n\n  get fov(): number {\n    return (this._fov / Math.PI) * 180;\n  }\n\n  set fov(fov: number) {\n    fov = Math.max(0.01, Math.min(60, fov));\n    if (this._fov === fov) {\n      return;\n    }\n    this.unmodified = false;\n    this._fov = (fov / 180) * Math.PI;\n    this.calcMatrices();\n  }\n\n  get zoom(): number {\n    return this._zoom;\n  }\n\n  set zoom(zoom: number) {\n    const z = Math.min(Math.max(zoom, this._minZoom), this._maxZoom);\n    if (this._zoom === z) {\n      return;\n    }\n    this.unmodified = false;\n    this._zoom = z;\n    this.scale = this.zoomScale(z);\n    this.tileZoom = Math.floor(z);\n    this.zoomFraction = z - this.tileZoom;\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  get center(): LngLat {\n    return this._center;\n  }\n\n  set center(center: LngLat) {\n    if (center.lat === this._center.lat && center.lng === this._center.lng) {\n      return;\n    }\n    this.unmodified = false;\n    this._center = center;\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  get padding(): IPaddingOptions {\n    return this.edgeInsets.toJSON();\n  }\n\n  set padding(padding: IPaddingOptions) {\n    if (this.edgeInsets.equals(padding)) {\n      return;\n    }\n    this.unmodified = false;\n    // Update edge-insets inplace\n    this.edgeInsets.interpolate(this.edgeInsets, padding, 1);\n    this.calcMatrices();\n  }\n\n  /**\n   * The center of the screen in pixels with the top-left corner being (0,0)\n   * and +y axis pointing downwards. This accounts for padding.\n   *\n   * @readonly\n   * @type {Point}\n   * @memberof Transform\n   */\n  get centerPoint(): Point {\n    return this.edgeInsets.getCenter(this.width, this.height);\n  }\n\n  get point(): Point {\n    return this.project(this.center);\n  }\n  public tileSize: number;\n  public tileZoom: number;\n  public lngRange?: [number, number];\n  public latRange?: [number, number];\n  public maxValidLatitude: number;\n  public scale: number;\n  public width: number;\n  public height: number;\n  public angle: number;\n  public rotationMatrix: mat2;\n  public pixelsToGLUnits: [number, number];\n  public cameraToCenterDistance: number;\n  public mercatorMatrix: mat4;\n  public projMatrix: mat4;\n  public invProjMatrix: mat4;\n  public alignedProjMatrix: mat4;\n  public pixelMatrix: mat4;\n  public pixelMatrixInverse: mat4;\n  public glCoordMatrix: mat4;\n  public labelPlaneMatrix: mat4;\n  // tslint:disable:variable-name\n  private _fov: number;\n  private _pitch: number;\n  private _zoom: number;\n  private _renderWorldCopies: boolean;\n  private _minZoom: number;\n  private _maxZoom: number;\n  private _minPitch: number;\n  private _maxPitch: number;\n  private _center: LngLat;\n  // tslint:enable\n  private zoomFraction: number;\n  private unmodified: boolean;\n  private edgeInsets: EdgeInsets;\n  private constraining: boolean;\n  private posMatrixCache: { [_: string]: Float32Array };\n  private alignedPosMatrixCache: { [_: string]: Float32Array };\n  constructor(\n    minZoom: number,\n    maxZoom: number,\n    minPitch: number,\n    maxPitch: number,\n    renderWorldCopies: boolean | void,\n  ) {\n    this.tileSize = 512; // constant\n    this.maxValidLatitude = 85.051129; // constant\n\n    this._renderWorldCopies = (renderWorldCopies === undefined\n      ? true\n      : renderWorldCopies) as boolean;\n    this._minZoom = minZoom || 0;\n    this._maxZoom = maxZoom || 22;\n\n    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;\n    this._maxPitch =\n      maxPitch === undefined || maxPitch === null ? 60 : maxPitch;\n\n    this.setMaxBounds();\n\n    this.width = 0;\n    this.height = 0;\n    this._center = new LngLat(0, 0);\n    this.zoom = 0;\n    this.angle = 0;\n    this._fov = 0.6435011087932844;\n    this._pitch = 0;\n    this.unmodified = true;\n    this.edgeInsets = new EdgeInsets();\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n\n  public clone(): Transform {\n    const clone = new Transform(\n      this._minZoom,\n      this._maxZoom,\n      this._minPitch,\n      this._maxPitch,\n      this._renderWorldCopies,\n    );\n    clone.tileSize = this.tileSize;\n    clone.latRange = this.latRange;\n    clone.width = this.width;\n    clone.height = this.height;\n    clone.center = this._center;\n    clone.zoom = this.zoom;\n    clone.angle = this.angle;\n    clone.fov = this._fov;\n    clone.pitch = this._pitch;\n    clone.unmodified = this.unmodified;\n    clone.edgeInsets = this.edgeInsets.clone();\n    clone.calcMatrices();\n    return clone;\n  }\n\n  /**\n   * Returns if the padding params match\n   *\n   * @param {IPaddingOptions} padding\n   * @returns {boolean}\n   * @memberof Transform\n   */\n  public isPaddingEqual(padding: IPaddingOptions): boolean {\n    return this.edgeInsets.equals(padding);\n  }\n\n  /**\n   * Helper method to upadte edge-insets inplace\n   *\n   * @param {IPaddingOptions} target\n   * @param {number} t\n   * @memberof Transform\n   */\n  public interpolatePadding(\n    start: IPaddingOptions,\n    target: IPaddingOptions,\n    t: number,\n  ) {\n    this.unmodified = false;\n    this.edgeInsets.interpolate(start, target, t);\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  /**\n   * Return a zoom level that will cover all tiles the transform\n   * @param {Object} options options\n   * @param {number} options.tileSize Tile size, expressed in screen pixels.\n   * @param {boolean} options.roundZoom Target zoom level. If true, the value will be rounded to the closest integer. Otherwise the value will be floored.\n   * @returns {number} zoom level An integer zoom level at which all tiles will be visible.\n   */\n  public coveringZoomLevel(options: { roundZoom?: boolean; tileSize: number }) {\n    const z = (options.roundZoom ? Math.round : Math.floor)(\n      this.zoom + this.scaleZoom(this.tileSize / options.tileSize),\n    );\n    // At negative zoom levels load tiles from z0 because negative tile zoom levels don't exist.\n    return Math.max(0, z);\n  }\n\n  /**\n   * Return any \"wrapped\" copies of a given tile coordinate that are visible\n   * in the current view.\n   *\n   * @private\n   */\n  // public getVisibleUnwrappedCoordinates(tileID: CanonicalTileID) {\n  //   const result = [new UnwrappedTileID(0, tileID)];\n  //   if (this._renderWorldCopies) {\n  //     const utl = this.pointCoordinate(new Point(0, 0));\n  //     const utr = this.pointCoordinate(new Point(this.width, 0));\n  //     const ubl = this.pointCoordinate(new Point(this.width, this.height));\n  //     const ubr = this.pointCoordinate(new Point(0, this.height));\n  //     const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n  //     const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n  //     // Add an extra copy of the world on each side to properly render ImageSources and CanvasSources.\n  //     // Both sources draw outside the tile boundaries of the tile that \"contains them\" so we need\n  //     // to add extra copies on both sides in case offscreen tiles need to draw into on-screen ones.\n  //     const extraWorldCopy = 1;\n\n  //     for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n  //       if (w === 0) {\n  //         continue;\n  //       }\n  //       result.push(new UnwrappedTileID(w, tileID));\n  //     }\n  //   }\n  //   return result;\n  // }\n\n  /**\n   * Return all coordinates that could cover this transform for a covering\n   * zoom level.\n   * @param {Object} options\n   * @param {number} options.tileSize\n   * @param {number} options.minzoom\n   * @param {number} options.maxzoom\n   * @param {boolean} options.roundZoom\n   * @param {boolean} options.reparseOverscaled\n   * @param {boolean} options.renderWorldCopies\n   * @returns {Array<OverscaledTileID>} OverscaledTileIDs\n   * @private\n   */\n  // public coveringTiles(options: {\n  //   tileSize: number;\n  //   minzoom?: number;\n  //   maxzoom?: number;\n  //   roundZoom?: boolean;\n  //   reparseOverscaled?: boolean;\n  //   renderWorldCopies?: boolean;\n  // }): OverscaledTileID[] {\n  //   let z = this.coveringZoomLevel(options);\n  //   const actualZ = z;\n\n  //   if (options.minzoom !== undefined && z < options.minzoom) {\n  //     return [];\n  //   }\n  //   if (options.maxzoom !== undefined && z > options.maxzoom) {\n  //     z = options.maxzoom;\n  //   }\n\n  //   const centerCoord = MercatorCoordinate.fromLngLat(this.center);\n  //   const numTiles = Math.pow(2, z);\n  //   const centerPoint = [numTiles * centerCoord.x, numTiles * centerCoord.y, 0];\n  //   const cameraFrustum = Frustum.fromInvProjectionMatrix(\n  //     this.invProjMatrix,\n  //     this.worldSize,\n  //     z,\n  //   );\n\n  //   // No change of LOD behavior for pitch lower than 60 and when there is no top padding: return only tile ids from the requested zoom level\n  //   let minZoom = options.minzoom || 0;\n  //   // Use 0.1 as an epsilon to avoid for explicit == 0.0 floating point checks\n  //   if (this._pitch <= 60.0 && this.edgeInsets.top < 0.1) {\n  //     minZoom = z;\n  //   }\n\n  //   // There should always be a certain number of maximum zoom level tiles surrounding the center location\n  //   const radiusOfMaxLvlLodInTiles = 3;\n\n  //   const newRootTile = (wrap: number): any => {\n  //     return {\n  //       // All tiles are on zero elevation plane => z difference is zero\n  //       aabb: new Aabb(\n  //         [wrap * numTiles, 0, 0],\n  //         [(wrap + 1) * numTiles, numTiles, 0],\n  //       ),\n  //       zoom: 0,\n  //       x: 0,\n  //       y: 0,\n  //       wrap,\n  //       fullyVisible: false,\n  //     };\n  //   };\n\n  //   // Do a depth-first traversal to find visible tiles and proper levels of detail\n  //   const stack = [];\n  //   const result = [];\n  //   const maxZoom = z;\n  //   const overscaledZ = options.reparseOverscaled ? actualZ : z;\n\n  //   if (this._renderWorldCopies) {\n  //     // Render copy of the globe thrice on both sides\n  //     for (let i = 1; i <= 3; i++) {\n  //       stack.push(newRootTile(-i));\n  //       stack.push(newRootTile(i));\n  //     }\n  //   }\n\n  //   stack.push(newRootTile(0));\n\n  //   while (stack.length > 0) {\n  //     const it = stack.pop();\n  //     const x = it.x;\n  //     const y = it.y;\n  //     let fullyVisible = it.fullyVisible;\n\n  //     // Visibility of a tile is not required if any of its ancestor if fully inside the frustum\n  //     if (!fullyVisible) {\n  //       const intersectResult = it.aabb.intersects(cameraFrustum);\n\n  //       if (intersectResult === 0) {\n  //         continue;\n  //       }\n\n  //       fullyVisible = intersectResult === 2;\n  //     }\n\n  //     const distanceX = it.aabb.distanceX(centerPoint);\n  //     const distanceY = it.aabb.distanceY(centerPoint);\n  //     const longestDim = Math.max(Math.abs(distanceX), Math.abs(distanceY));\n\n  //     // We're using distance based heuristics to determine if a tile should be split into quadrants or not.\n  //     // radiusOfMaxLvlLodInTiles defines that there's always a certain number of maxLevel tiles next to the map center.\n  //     // Using the fact that a parent node in quadtree is twice the size of its children (per dimension)\n  //     // we can define distance thresholds for each relative level:\n  //     // f(k) = offset + 2 + 4 + 8 + 16 + ... + 2^k. This is the same as \"offset+2^(k+1)-2\"\n  //     const distToSplit =\n  //       radiusOfMaxLvlLodInTiles + (1 << (maxZoom - it.zoom)) - 2;\n\n  //     // Have we reached the target depth or is the tile too far away to be any split further?\n  //     if (\n  //       it.zoom === maxZoom ||\n  //       (longestDim > distToSplit && it.zoom >= minZoom)\n  //     ) {\n  //       result.push({\n  //         tileID: new OverscaledTileID(\n  //           it.zoom === maxZoom ? overscaledZ : it.zoom,\n  //           it.wrap,\n  //           it.zoom,\n  //           x,\n  //           y,\n  //         ),\n  //         distanceSq: vec2.sqrLen([\n  //           centerPoint[0] - 0.5 - x,\n  //           centerPoint[1] - 0.5 - y,\n  //         ]),\n  //       });\n  //       continue;\n  //     }\n\n  //     for (let i = 0; i < 4; i++) {\n  //       const childX = (x << 1) + (i % 2);\n  //       const childY = (y << 1) + (i >> 1);\n\n  //       stack.push({\n  //         aabb: it.aabb.quadrant(i),\n  //         zoom: it.zoom + 1,\n  //         x: childX,\n  //         y: childY,\n  //         wrap: it.wrap,\n  //         fullyVisible,\n  //       });\n  //     }\n  //   }\n\n  //   return result\n  //     .sort((a, b) => a.distanceSq - b.distanceSq)\n  //     .map((a) => a.tileID);\n  // }\n\n  public resize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    this.pixelsToGLUnits = [2 / width, -2 / height];\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  public zoomScale(zoom: number) {\n    return Math.pow(2, zoom);\n  }\n  public scaleZoom(scale: number) {\n    return Math.log(scale) / Math.LN2;\n  }\n\n  public project(lnglat: LngLat) {\n    const lat = clamp(\n      lnglat.lat,\n      -this.maxValidLatitude,\n      this.maxValidLatitude,\n    );\n    return new Point(\n      mercatorXfromLng(lnglat.lng) * this.worldSize,\n      mercatorYfromLat(lat) * this.worldSize,\n    );\n  }\n\n  public unproject(point: Point): LngLat {\n    return new MercatorCoordinate(\n      point.x / this.worldSize,\n      point.y / this.worldSize,\n    ).toLngLat();\n  }\n\n  public setLocationAtPoint(lnglat: LngLat, point: Point) {\n    const a = this.pointCoordinate(point);\n    const b = this.pointCoordinate(this.centerPoint);\n    const loc = this.locationCoordinate(lnglat);\n    const newCenter = new MercatorCoordinate(\n      loc.x - (a.x - b.x),\n      loc.y - (a.y - b.y),\n    );\n    this.center = this.coordinateLocation(newCenter);\n    if (this._renderWorldCopies) {\n      this.center = this.center.wrap();\n    }\n  }\n\n  public pointCoordinate(p: Point) {\n    const targetZ = 0;\n    // since we don't know the correct projected z value for the point,\n    // unproject two points to get a line and then find the point on that\n    // line with z=0\n\n    const coord0 = new Float32Array([p.x, p.y, 0, 1]);\n    const coord1 = new Float32Array([p.x, p.y, 1, 1]);\n\n    vec4.transformMat4(coord0, coord0, this.pixelMatrixInverse);\n    vec4.transformMat4(coord1, coord1, this.pixelMatrixInverse);\n\n    const w0 = coord0[3];\n    const w1 = coord1[3];\n    const x0 = coord0[0] / w0;\n    const x1 = coord1[0] / w1;\n    const y0 = coord0[1] / w0;\n    const y1 = coord1[1] / w1;\n    const z0 = coord0[2] / w0;\n    const z1 = coord1[2] / w1;\n\n    const t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n\n    return new MercatorCoordinate(\n      interpolate(x0, x1, t) / this.worldSize,\n      interpolate(y0, y1, t) / this.worldSize,\n    );\n  }\n\n  /**\n   * Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not\n   * an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.\n   * @returns {LngLatBounds} Returns a {@link LngLatBounds} object describing the map's geographical bounds.\n   */\n  public getBounds(): LngLatBounds {\n    return new LngLatBounds()\n      .extend(this.pointLocation(new Point(0, 0)))\n      .extend(this.pointLocation(new Point(this.width, 0)))\n      .extend(this.pointLocation(new Point(this.width, this.height)))\n      .extend(this.pointLocation(new Point(0, this.height)));\n  }\n\n  /**\n   * Returns the maximum geographical bounds the map is constrained to, or `null` if none set.\n   * @returns {LngLatBounds} {@link LngLatBounds}\n   */\n  public getMaxBounds(): LngLatBounds | null {\n    if (\n      !this.latRange ||\n      this.latRange.length !== 2 ||\n      !this.lngRange ||\n      this.lngRange.length !== 2\n    ) {\n      return null;\n    }\n\n    return new LngLatBounds(\n      [this.lngRange[0], this.latRange[0]],\n      [this.lngRange[1], this.latRange[1]],\n    );\n  }\n\n  /**\n   * Sets or clears the map's geographical constraints.\n   * @param {LngLatBounds} bounds A {@link LngLatBounds} object describing the new geographic boundaries of the map.\n   */\n  public setMaxBounds(bounds?: LngLatBounds) {\n    if (bounds) {\n      this.lngRange = [bounds.getWest(), bounds.getEast()];\n      this.latRange = [bounds.getSouth(), bounds.getNorth()];\n      this.constrain();\n    } else {\n      this.lngRange = undefined;\n      this.latRange = [-this.maxValidLatitude, this.maxValidLatitude];\n    }\n  }\n\n  public customLayerMatrix(): number[] {\n    return (this.mercatorMatrix as number[]).slice();\n  }\n\n  public maxPitchScaleFactor() {\n    // calcMatrices hasn't run yet\n    if (!this.pixelMatrixInverse) {\n      return 1;\n    }\n\n    const coord = this.pointCoordinate(new Point(0, 0));\n    const p = new Float32Array([\n      coord.x * this.worldSize,\n      coord.y * this.worldSize,\n      0,\n      1,\n    ]);\n    const topPoint = vec4.transformMat4(p, p, this.pixelMatrix);\n    return topPoint[3] / this.cameraToCenterDistance;\n  }\n\n  /*\n   * The camera looks at the map from a 3D (lng, lat, altitude) location. Let's use `cameraLocation`\n   * as the name for the location under the camera and on the surface of the earth (lng, lat, 0).\n   * `cameraPoint` is the projected position of the `cameraLocation`.\n   *\n   * This point is useful to us because only fill-extrusions that are between `cameraPoint` and\n   * the query point on the surface of the earth can extend and intersect the query.\n   *\n   * When the map is not pitched the `cameraPoint` is equivalent to the center of the map because\n   * the camera is right above the center of the map.\n   */\n  public getCameraPoint() {\n    const pitch = this._pitch;\n    const yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);\n    return this.centerPoint.add(new Point(0, yOffset));\n  }\n\n  /*\n   * When the map is pitched, some of the 3D features that intersect a query will not intersect\n   * the query at the surface of the earth. Instead the feature may be closer and only intersect\n   * the query because it extrudes into the air.\n   *\n   * This returns a geometry that includes all of the original query as well as all possible ares of the\n   * screen where the *base* of a visible extrusion could be.\n   *  - For point queries, the line from the query point to the \"camera point\"\n   *  - For other geometries, the envelope of the query geometry and the \"camera point\"\n   */\n  public getCameraQueryGeometry(queryGeometry: Point[]): Point[] {\n    const c = this.getCameraPoint();\n\n    if (queryGeometry.length === 1) {\n      return [queryGeometry[0], c];\n    } else {\n      let minX = c.x;\n      let minY = c.y;\n      let maxX = c.x;\n      let maxY = c.y;\n      for (const p of queryGeometry) {\n        minX = Math.min(minX, p.x);\n        minY = Math.min(minY, p.y);\n        maxX = Math.max(maxX, p.x);\n        maxY = Math.max(maxY, p.y);\n      }\n      return [\n        new Point(minX, minY),\n        new Point(maxX, minY),\n        new Point(maxX, maxY),\n        new Point(minX, maxY),\n        new Point(minX, minY),\n      ];\n    }\n  }\n\n  /**\n   * Given a coordinate, return the screen point that corresponds to it\n   * @param {Coordinate} coord\n   * @returns {Point} screen point\n   * @private\n   */\n  public coordinatePoint(coord: MercatorCoordinate) {\n    const p = vec4.fromValues(\n      coord.x * this.worldSize,\n      coord.y * this.worldSize,\n      0,\n      1,\n    );\n    vec4.transformMat4(p, p, this.pixelMatrix);\n    return new Point(p[0] / p[3], p[1] / p[3]);\n  }\n  /**\n   * Given a location, return the screen point that corresponds to it\n   * @param {LngLat} lnglat location\n   * @returns {Point} screen point\n   * @private\n   */\n  public locationPoint(lnglat: LngLat) {\n    return this.coordinatePoint(this.locationCoordinate(lnglat));\n  }\n\n  /**\n   * Given a point on screen, return its lnglat\n   * @param {Point} p screen point\n   * @returns {LngLat} lnglat location\n   * @private\n   */\n  public pointLocation(p: Point) {\n    return this.coordinateLocation(this.pointCoordinate(p));\n  }\n\n  /**\n   * Given a geographical lnglat, return an unrounded\n   * coordinate that represents it at this transform's zoom level.\n   * @param {LngLat} lnglat\n   * @returns {Coordinate}\n   * @private\n   */\n  public locationCoordinate(lnglat: LngLat) {\n    return MercatorCoordinate.fromLngLat(lnglat);\n  }\n\n  /**\n   * Given a Coordinate, return its geographical position.\n   * @param {Coordinate} coord\n   * @returns {LngLat} lnglat\n   * @private\n   */\n  public coordinateLocation(coord: MercatorCoordinate) {\n    return coord.toLngLat();\n  }\n\n  public getProjectionMatrix(): mat4 {\n    return this.projMatrix;\n  }\n  /**\n   * Calculate the posMatrix that, given a tile coordinate, would be used to display the tile on a map.\n   * @param {UnwrappedTileID} unwrappedTileID;\n   * @private\n   */\n  // private calculatePosMatrix(\n  //   unwrappedTileID: UnwrappedTileID,\n  //   aligned: boolean = false,\n  // ): Float32Array {\n  //   const posMatrixKey = unwrappedTileID.key;\n  //   const cache = aligned ? this.alignedPosMatrixCache : this.posMatrixCache;\n  //   if (cache[posMatrixKey]) {\n  //     return cache[posMatrixKey];\n  //   }\n\n  //   const canonical = unwrappedTileID.canonical;\n  //   const scale = this.worldSize / this.zoomScale(canonical.z);\n  //   const unwrappedX =\n  //     canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;\n\n  //   const posMatrix = mat4.identity(new Float64Array(16));\n  //   mat4.translate(posMatrix, posMatrix, [\n  //     unwrappedX * scale,\n  //     canonical.y * scale,\n  //     0,\n  //   ]);\n  //   mat4.scale(posMatrix, posMatrix, [scale / EXTENT, scale / EXTENT, 1]);\n  //   mat4.multiply(\n  //     posMatrix,\n  //     aligned ? this.alignedProjMatrix : this.projMatrix,\n  //     posMatrix,\n  //   );\n\n  //   cache[posMatrixKey] = new Float32Array(posMatrix);\n  //   return cache[posMatrixKey];\n  // }\n\n  private constrain() {\n    if (!this.center || !this.width || !this.height || this.constraining) {\n      return;\n    }\n\n    this.constraining = true;\n\n    let minY = -90;\n    let maxY = 90;\n    let minX = -180;\n    let maxX = 180;\n    let sy;\n    let sx;\n    let x2;\n    let y2;\n    const size = this.size;\n    const unmodified = this.unmodified;\n\n    if (this.latRange) {\n      const latRange = this.latRange;\n      minY = mercatorYfromLat(latRange[1]) * this.worldSize;\n      maxY = mercatorYfromLat(latRange[0]) * this.worldSize;\n      sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;\n    }\n\n    if (this.lngRange) {\n      const lngRange = this.lngRange;\n      minX = mercatorXfromLng(lngRange[0]) * this.worldSize;\n      maxX = mercatorXfromLng(lngRange[1]) * this.worldSize;\n      sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;\n    }\n\n    const point = this.point;\n\n    // how much the map should scale to fit the screen into given latitude/longitude ranges\n    const s = Math.max(sx || 0, sy || 0);\n\n    if (s) {\n      this.center = this.unproject(\n        new Point(\n          sx ? (maxX + minX) / 2 : point.x,\n          sy ? (maxY + minY) / 2 : point.y,\n        ),\n      );\n      this.zoom += this.scaleZoom(s);\n      this.unmodified = unmodified;\n      this.constraining = false;\n      return;\n    }\n\n    if (this.latRange) {\n      const y = point.y;\n      const h2 = size.y / 2;\n\n      if (y - h2 < minY) {\n        y2 = minY + h2;\n      }\n      if (y + h2 > maxY) {\n        y2 = maxY - h2;\n      }\n    }\n\n    if (this.lngRange) {\n      const x = point.x;\n      const w2 = size.x / 2;\n\n      if (x - w2 < minX) {\n        x2 = minX + w2;\n      }\n      if (x + w2 > maxX) {\n        x2 = maxX - w2;\n      }\n    }\n\n    // pan the map if the screen goes off the range\n    if (x2 !== undefined || y2 !== undefined) {\n      this.center = this.unproject(\n        new Point(\n          x2 !== undefined ? x2 : point.x,\n          y2 !== undefined ? y2 : point.y,\n        ),\n      );\n    }\n\n    this.unmodified = unmodified;\n    this.constraining = false;\n  }\n\n  private calcMatrices() {\n    if (!this.height) {\n      return;\n    }\n\n    const halfFov = this._fov / 2;\n    const offset = this.centerOffset;\n    this.cameraToCenterDistance = (0.5 / Math.tan(halfFov)) * this.height;\n\n    // Find the distance from the center point [width/2 + offset.x, height/2 + offset.y] to the\n    // center top point [width/2 + offset.x, 0] in Z units, using the law of sines.\n    // 1 Z unit is equivalent to 1 horizontal px at the center of the map\n    // (the distance between[width/2, height/2] and [width/2 + 1, height/2])\n    const groundAngle = Math.PI / 2 + this._pitch;\n    const fovAboveCenter = this._fov * (0.5 + offset.y / this.height);\n    const topHalfSurfaceDistance =\n      (Math.sin(fovAboveCenter) * this.cameraToCenterDistance) /\n      Math.sin(\n        clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01),\n      );\n    const point = this.point;\n    const x = point.x;\n    const y = point.y;\n\n    // Calculate z distance of the farthest fragment that should be rendered.\n    const furthestDistance =\n      Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance +\n      this.cameraToCenterDistance;\n    // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n    const farZ = furthestDistance * 1.01;\n\n    // The larger the value of nearZ is\n    // - the more depth precision is available for features (good)\n    // - clipping starts appearing sooner when the camera is close to 3d features (bad)\n    //\n    // Smaller values worked well for mapbox-gl-js but deckgl was encountering precision issues\n    // when rendering it's layers using custom layers. This value was experimentally chosen and\n    // seems to solve z-fighting issues in deckgl while not clipping buildings too close to the camera.\n    const nearZ = this.height / 50;\n\n    // matrix for conversion from location to GL coordinates (-1 .. 1)\n    let m = mat4.create();\n    mat4.perspective(m, this._fov, this.width / this.height, nearZ, farZ);\n\n    // Apply center of perspective offset\n    m[8] = (-offset.x * 2) / this.width;\n    m[9] = (offset.y * 2) / this.height;\n\n    mat4.scale(m, m, [1, -1, 1]);\n    mat4.translate(m, m, [0, 0, -this.cameraToCenterDistance]);\n    mat4.rotateX(m, m, this._pitch);\n    mat4.rotateZ(m, m, this.angle);\n    mat4.translate(m, m, [-x, -y, 0]);\n\n    // The mercatorMatrix can be used to transform points from mercator coordinates\n    // ([0, 0] nw, [1, 1] se) to GL coordinates.\n    this.mercatorMatrix = mat4.scale(mat4.create(), m, [\n      this.worldSize,\n      this.worldSize,\n      this.worldSize,\n    ]);\n    // scale vertically to meters per pixel (inverse of ground resolution):\n\n    mat4.scale(\n      m,\n      m,\n      vec3.fromValues(\n        1,\n        1,\n        mercatorZfromAltitude(1, this.center.lat) * this.worldSize,\n      ),\n    );\n\n    this.projMatrix = m;\n    this.invProjMatrix = mat4.invert(mat4.create(), this.projMatrix);\n\n    // Make a second projection matrix that is aligned to a pixel grid for rendering raster tiles.\n    // We're rounding the (floating point) x/y values to achieve to avoid rendering raster images to fractional\n    // coordinates. Additionally, we adjust by half a pixel in either direction in case that viewport dimension\n    // is an odd integer to preserve rendering to the pixel grid. We're rotating this shift based on the angle\n    // of the transformation so that 0°, 90°, 180°, and 270° rasters are crisp, and adjust the shift so that\n    // it is always <= 0.5 pixels.\n    const xShift = (this.width % 2) / 2;\n    const yShift = (this.height % 2) / 2;\n    const angleCos = Math.cos(this.angle);\n    const angleSin = Math.sin(this.angle);\n    const dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift;\n    const dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;\n    const alignedM = mat4.clone(m);\n    mat4.translate(alignedM, alignedM, [\n      dx > 0.5 ? dx - 1 : dx,\n      dy > 0.5 ? dy - 1 : dy,\n      0,\n    ]);\n    this.alignedProjMatrix = alignedM;\n\n    m = mat4.create();\n    mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    this.labelPlaneMatrix = m;\n\n    m = mat4.create();\n    mat4.scale(m, m, [1, -1, 1]);\n    mat4.translate(m, m, [-1, -1, 0]);\n    mat4.scale(m, m, [2 / this.width, 2 / this.height, 1]);\n    this.glCoordMatrix = m;\n\n    // matrix for conversion from location to screen coordinates\n    this.pixelMatrix = mat4.multiply(\n      mat4.create(),\n      this.labelPlaneMatrix,\n      this.projMatrix,\n    );\n\n    // inverse matrix for conversion from screen coordinaes to location\n    m = mat4.invert(mat4.create(), this.pixelMatrix);\n    if (!m) {\n      throw new Error('failed to invert matrix');\n    }\n    this.pixelMatrixInverse = m;\n\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n}\n"],"file":"transform.js"}