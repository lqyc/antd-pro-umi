"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _lng_lat = _interopRequireDefault(require("./lng_lat"));

var LngLatBounds = function () {
  function LngLatBounds(sw, ne) {
    (0, _classCallCheck2.default)(this, LngLatBounds);
    this.ne = void 0;
    this.sw = void 0;

    if (!sw) {} else if (ne) {
      this.setSouthWest(sw).setNorthEast(ne);
    } else if (sw.length === 4) {
      this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);
    } else {
      this.setSouthWest(sw[0]).setNorthEast(sw[1]);
    }
  }

  (0, _createClass2.default)(LngLatBounds, [{
    key: "setNorthEast",
    value: function setNorthEast(ne) {
      this.ne = ne instanceof _lng_lat.default ? new _lng_lat.default(ne.lng, ne.lat) : _lng_lat.default.convert(ne);
      return this;
    }
  }, {
    key: "setSouthWest",
    value: function setSouthWest(sw) {
      this.sw = sw instanceof _lng_lat.default ? new _lng_lat.default(sw.lng, sw.lat) : _lng_lat.default.convert(sw);
      return this;
    }
  }, {
    key: "extend",
    value: function extend(obj) {
      var sw = this.sw;
      var ne = this.ne;
      var sw2;
      var ne2;

      if (obj instanceof _lng_lat.default) {
        sw2 = obj;
        ne2 = obj;
      } else if (obj instanceof LngLatBounds) {
        sw2 = obj.sw;
        ne2 = obj.ne;

        if (!sw2 || !ne2) {
          return this;
        }
      } else {
        if (Array.isArray(obj)) {
          if (obj.length === 4 || obj.every(Array.isArray)) {
            var lngLatBoundsObj = obj;
            return this.extend(LngLatBounds.convert(lngLatBoundsObj));
          } else {
            var lngLatObj = obj;
            return this.extend(_lng_lat.default.convert(lngLatObj));
          }
        }

        return this;
      }

      if (!sw && !ne) {
        this.sw = new _lng_lat.default(sw2.lng, sw2.lat);
        this.ne = new _lng_lat.default(ne2.lng, ne2.lat);
      } else {
        sw.lng = Math.min(sw2.lng, sw.lng);
        sw.lat = Math.min(sw2.lat, sw.lat);
        ne.lng = Math.max(ne2.lng, ne.lng);
        ne.lat = Math.max(ne2.lat, ne.lat);
      }

      return this;
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return new _lng_lat.default((this.sw.lng + this.ne.lng) / 2, (this.sw.lat + this.ne.lat) / 2);
    }
  }, {
    key: "getSouthWest",
    value: function getSouthWest() {
      return this.sw;
    }
  }, {
    key: "getNorthEast",
    value: function getNorthEast() {
      return this.ne;
    }
  }, {
    key: "getNorthWest",
    value: function getNorthWest() {
      return new _lng_lat.default(this.getWest(), this.getNorth());
    }
  }, {
    key: "getSouthEast",
    value: function getSouthEast() {
      return new _lng_lat.default(this.getEast(), this.getSouth());
    }
  }, {
    key: "getWest",
    value: function getWest() {
      return this.sw.lng;
    }
  }, {
    key: "getSouth",
    value: function getSouth() {
      return this.sw.lat;
    }
  }, {
    key: "getEast",
    value: function getEast() {
      return this.ne.lng;
    }
  }, {
    key: "getNorth",
    value: function getNorth() {
      return this.ne.lat;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return [this.sw.toArray(), this.ne.toArray()];
    }
  }, {
    key: "toString",
    value: function toString() {
      return "LngLatBounds(".concat(this.sw.toString(), ", ").concat(this.ne.toString(), ")");
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !(this.sw && this.ne);
    }
  }, {
    key: "contains",
    value: function contains(lnglat) {
      var _LngLat$convert = _lng_lat.default.convert(lnglat),
          lng = _LngLat$convert.lng,
          lat = _LngLat$convert.lat;

      var containsLatitude = this.sw.lat <= lat && lat <= this.ne.lat;
      var containsLongitude = this.sw.lng <= lng && lng <= this.ne.lng;

      if (this.sw.lng > this.ne.lng) {
        containsLongitude = this.sw.lng >= lng && lng >= this.ne.lng;
      }

      return containsLatitude && containsLongitude;
    }
  }], [{
    key: "convert",
    value: function convert(input) {
      if (input instanceof LngLatBounds) {
        return input;
      }

      return new LngLatBounds(input);
    }
  }]);
  return LngLatBounds;
}();

exports.default = LngLatBounds;
//# sourceMappingURL=lng_lat_bounds.js.map