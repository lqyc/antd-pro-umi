{"version":3,"sources":["../../../src/handler/tap/single_tap_recognizer.ts"],"names":["getCentroid","points","sum","Point","point","_add","div","length","MAX_TAP_INTERVAL","MAX_TOUCH_TIME","MAX_DIST","SingleTapRecognizer","options","numTouches","centroid","startTime","aborted","touches","reset","e","mapTouches","undefined","timeStamp","newTouches","id","prevPos","pos","dist"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;;;;;;;AAEA,SAASA,WAAT,CAAqBC,MAArB,EAAsC;AACpC,MAAMC,GAAG,GAAG,IAAIC,cAAJ,CAAU,CAAV,EAAa,CAAb,CAAZ;;AADoC,6CAEhBF,MAFgB;AAAA;;AAAA;AAEpC,wDAA4B;AAAA,UAAjBG,KAAiB;;AAC1BF,MAAAA,GAAG,CAACG,IAAJ,CAASD,KAAT;AACD;AAJmC;AAAA;AAAA;AAAA;AAAA;;AAMpC,SAAOF,GAAG,CAACI,GAAJ,CAAQL,MAAM,CAACM,MAAf,CAAP;AACD;;AAEM,IAAMC,gBAAgB,GAAG,GAAzB;;AACA,IAAMC,cAAc,GAAG,GAAvB;;AACA,IAAMC,QAAQ,GAAG,EAAjB;;;IAEcC,mB;AAOnB,+BAAYC,OAAZ,EAA6C;AAAA;AAAA,SANtCC,UAMsC;AAAA,SALtCC,QAKsC;AAAA,SAJtCC,SAIsC;AAAA,SAHtCC,OAGsC;AAAA,SAFtCC,OAEsC;AAC3C,SAAKC,KAAL;AACA,SAAKL,UAAL,GAAkBD,OAAO,CAACC,UAA1B;AACD;;;;WAED,iBAAe;AACb,aAAO,KAAKC,QAAZ;AACA,aAAO,KAAKC,SAAZ;AACA,aAAO,KAAKE,OAAZ;AACA,WAAKD,OAAL,GAAe,KAAf;AACD;;;WAED,oBAAkBG,CAAlB,EAAiClB,MAAjC,EAAkDmB,UAAlD,EAAuE;AACrE,UAAI,KAAKN,QAAL,IAAiBM,UAAU,CAACb,MAAX,GAAoB,KAAKM,UAA9C,EAA0D;AACxD,aAAKG,OAAL,GAAe,IAAf;AACD;;AACD,UAAI,KAAKA,OAAT,EAAkB;AAChB;AACD;;AAED,UAAI,KAAKD,SAAL,KAAmBM,SAAvB,EAAkC;AAChC,aAAKN,SAAL,GAAiBI,CAAC,CAACG,SAAnB;AACD;;AAED,UAAIF,UAAU,CAACb,MAAX,KAAsB,KAAKM,UAA/B,EAA2C;AACzC,aAAKC,QAAL,GAAgBd,WAAW,CAACC,MAAD,CAA3B;AACA,aAAKgB,OAAL,GAAe,gCAAaG,UAAb,EAAyBnB,MAAzB,CAAf;AACD;AACF;;;WAED,mBAAiBkB,CAAjB,EAAgClB,MAAhC,EAAiDmB,UAAjD,EAAsE;AACpE,UAAI,KAAKJ,OAAL,IAAgB,CAAC,KAAKF,QAA1B,EAAoC;AAClC;AACD;;AAED,UAAMS,UAAU,GAAG,gCAAaH,UAAb,EAAyBnB,MAAzB,CAAnB;;AACA,WAAK,IAAMuB,EAAX,IAAiB,KAAKP,OAAtB,EAA+B;AAC7B,YAAI,KAAKA,OAAL,CAAaO,EAAb,CAAJ,EAAsB;AACpB,cAAMC,OAAO,GAAG,KAAKR,OAAL,CAAaO,EAAb,CAAhB;AACA,cAAME,GAAG,GAAGH,UAAU,CAACC,EAAD,CAAtB;;AACA,cAAI,CAACE,GAAD,IAAQA,GAAG,CAACC,IAAJ,CAASF,OAAT,IAAoBf,QAAhC,EAA0C;AACxC,iBAAKM,OAAL,GAAe,IAAf;AACD;AACF;AACF;AACF;;;WAED,kBAAgBG,CAAhB,EAA+BlB,MAA/B,EAAgDmB,UAAhD,EAAqE;AACnE,UAAI,CAAC,KAAKN,QAAN,IAAkBK,CAAC,CAACG,SAAF,GAAc,KAAKP,SAAnB,GAA+BN,cAArD,EAAqE;AACnE,aAAKO,OAAL,GAAe,IAAf;AACD;;AAED,UAAII,UAAU,CAACb,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAMO,QAAQ,GAAG,CAAC,KAAKE,OAAN,IAAiB,KAAKF,QAAvC;AACA,aAAKI,KAAL;;AACA,YAAIJ,QAAJ,EAAc;AACZ,iBAAOA,QAAP;AACD;AACF;AACF","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport { indexTouches } from '../handler_util';\n\nfunction getCentroid(points: Point[]) {\n  const sum = new Point(0, 0);\n  for (const point of points) {\n    sum._add(point);\n  }\n  // @ts-ignore\n  return sum.div(points.length);\n}\n\nexport const MAX_TAP_INTERVAL = 500;\nexport const MAX_TOUCH_TIME = 500;\nexport const MAX_DIST = 30;\n\nexport default class SingleTapRecognizer {\n  public numTouches: number;\n  public centroid: Point;\n  public startTime: number;\n  public aborted: boolean;\n  public touches: { [key: string]: Point };\n\n  constructor(options: { numTouches: number }) {\n    this.reset();\n    this.numTouches = options.numTouches;\n  }\n\n  public reset() {\n    delete this.centroid;\n    delete this.startTime;\n    delete this.touches;\n    this.aborted = false;\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (this.centroid || mapTouches.length > this.numTouches) {\n      this.aborted = true;\n    }\n    if (this.aborted) {\n      return;\n    }\n\n    if (this.startTime === undefined) {\n      this.startTime = e.timeStamp;\n    }\n\n    if (mapTouches.length === this.numTouches) {\n      this.centroid = getCentroid(points);\n      this.touches = indexTouches(mapTouches, points);\n    }\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (this.aborted || !this.centroid) {\n      return;\n    }\n\n    const newTouches = indexTouches(mapTouches, points);\n    for (const id in this.touches) {\n      if (this.touches[id]) {\n        const prevPos = this.touches[id];\n        const pos = newTouches[id];\n        if (!pos || pos.dist(prevPos) > MAX_DIST) {\n          this.aborted = true;\n        }\n      }\n    }\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.centroid || e.timeStamp - this.startTime > MAX_TOUCH_TIME) {\n      this.aborted = true;\n    }\n\n    if (mapTouches.length === 0) {\n      const centroid = !this.aborted && this.centroid;\n      this.reset();\n      if (centroid) {\n        return centroid;\n      }\n    }\n  }\n}\n"],"file":"single_tap_recognizer.js"}