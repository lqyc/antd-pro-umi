"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MAX_DIST = exports.MAX_TOUCH_TIME = exports.MAX_TAP_INTERVAL = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _point = _interopRequireDefault(require("../../geo/point"));

var _handler_util = require("../handler_util");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getCentroid(points) {
  var sum = new _point.default(0, 0);

  var _iterator = _createForOfIteratorHelper(points),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var point = _step.value;

      sum._add(point);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return sum.div(points.length);
}

var MAX_TAP_INTERVAL = 500;
exports.MAX_TAP_INTERVAL = MAX_TAP_INTERVAL;
var MAX_TOUCH_TIME = 500;
exports.MAX_TOUCH_TIME = MAX_TOUCH_TIME;
var MAX_DIST = 30;
exports.MAX_DIST = MAX_DIST;

var SingleTapRecognizer = function () {
  function SingleTapRecognizer(options) {
    (0, _classCallCheck2.default)(this, SingleTapRecognizer);
    this.numTouches = void 0;
    this.centroid = void 0;
    this.startTime = void 0;
    this.aborted = void 0;
    this.touches = void 0;
    this.reset();
    this.numTouches = options.numTouches;
  }

  (0, _createClass2.default)(SingleTapRecognizer, [{
    key: "reset",
    value: function reset() {
      delete this.centroid;
      delete this.startTime;
      delete this.touches;
      this.aborted = false;
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      if (this.centroid || mapTouches.length > this.numTouches) {
        this.aborted = true;
      }

      if (this.aborted) {
        return;
      }

      if (this.startTime === undefined) {
        this.startTime = e.timeStamp;
      }

      if (mapTouches.length === this.numTouches) {
        this.centroid = getCentroid(points);
        this.touches = (0, _handler_util.indexTouches)(mapTouches, points);
      }
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      if (this.aborted || !this.centroid) {
        return;
      }

      var newTouches = (0, _handler_util.indexTouches)(mapTouches, points);

      for (var id in this.touches) {
        if (this.touches[id]) {
          var prevPos = this.touches[id];
          var pos = newTouches[id];

          if (!pos || pos.dist(prevPos) > MAX_DIST) {
            this.aborted = true;
          }
        }
      }
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      if (!this.centroid || e.timeStamp - this.startTime > MAX_TOUCH_TIME) {
        this.aborted = true;
      }

      if (mapTouches.length === 0) {
        var centroid = !this.aborted && this.centroid;
        this.reset();

        if (centroid) {
          return centroid;
        }
      }
    }
  }]);
  return SingleTapRecognizer;
}();

exports.default = SingleTapRecognizer;
//# sourceMappingURL=single_tap_recognizer.js.map