"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _two_touch = _interopRequireDefault(require("./two_touch"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function isVertical(vector) {
  return Math.abs(vector.y) > Math.abs(vector.x);
}

var ALLOWED_SINGLE_TOUCH_TIME = 100;

var TouchPitchHandler = function (_TwoTouchHandler) {
  (0, _inherits2.default)(TouchPitchHandler, _TwoTouchHandler);

  var _super = _createSuper(TouchPitchHandler);

  function TouchPitchHandler() {
    var _this;

    (0, _classCallCheck2.default)(this, TouchPitchHandler);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.valid = void 0;
    _this.firstMove = void 0;
    _this.lastPoints = void 0;
    return _this;
  }

  (0, _createClass2.default)(TouchPitchHandler, [{
    key: "reset",
    value: function reset() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(TouchPitchHandler.prototype), "reset", this).call(this);
      this.valid = undefined;
      delete this.firstMove;
      delete this.lastPoints;
    }
  }, {
    key: "start",
    value: function start(points) {
      this.lastPoints = points;

      if (isVertical(points[0].sub(points[1]))) {
        this.valid = false;
      }
    }
  }, {
    key: "move",
    value: function move(points, center, e) {
      var vectorA = points[0].sub(this.lastPoints[0]);
      var vectorB = points[1].sub(this.lastPoints[1]);
      this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);

      if (!this.valid) {
        return;
      }

      this.lastPoints = points;
      this.active = true;
      var yDeltaAverage = (vectorA.y + vectorB.y) / 2;
      var degreesPerPixelMoved = -0.5;
      return {
        pitchDelta: yDeltaAverage * degreesPerPixelMoved
      };
    }
  }, {
    key: "gestureBeginsVertically",
    value: function gestureBeginsVertically(vectorA, vectorB, timeStamp) {
      if (this.valid !== undefined) {
        return this.valid;
      }

      var threshold = 2;
      var movedA = vectorA.mag() >= threshold;
      var movedB = vectorB.mag() >= threshold;

      if (!movedA && !movedB) {
        return;
      }

      if (!movedA || !movedB) {
        if (this.firstMove === undefined) {
          this.firstMove = timeStamp;
        }

        if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {
          return undefined;
        } else {
          return false;
        }
      }

      var isSameDirection = vectorA.y > 0 === vectorB.y > 0;
      return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;
    }
  }]);
  return TouchPitchHandler;
}(_two_touch.default);

exports.default = TouchPitchHandler;
//# sourceMappingURL=touch_pitch.js.map