"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _two_touch = _interopRequireDefault(require("./two_touch"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ROTATION_THRESHOLD = 25;

function getBearingDelta(a, b) {
  return a.angleWith(b) * 180 / Math.PI;
}

var TouchRotateHandler = function (_TwoTouchHandler) {
  (0, _inherits2.default)(TouchRotateHandler, _TwoTouchHandler);

  var _super = _createSuper(TouchRotateHandler);

  function TouchRotateHandler() {
    var _this;

    (0, _classCallCheck2.default)(this, TouchRotateHandler);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.minDiameter = void 0;
    return _this;
  }

  (0, _createClass2.default)(TouchRotateHandler, [{
    key: "reset",
    value: function reset() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(TouchRotateHandler.prototype), "reset", this).call(this);
      delete this.minDiameter;
      delete this.startVector;
      delete this.vector;
    }
  }, {
    key: "start",
    value: function start(points) {
      this.startVector = this.vector = points[0].sub(points[1]);
      this.minDiameter = points[0].dist(points[1]);
    }
  }, {
    key: "move",
    value: function move(points, pinchAround) {
      var lastVector = this.vector;
      this.vector = points[0].sub(points[1]);

      if (!this.active && this.isBelowThreshold(this.vector)) {
        return;
      }

      this.active = true;
      return {
        bearingDelta: getBearingDelta(this.vector, lastVector),
        pinchAround: pinchAround
      };
    }
  }, {
    key: "isBelowThreshold",
    value: function isBelowThreshold(vector) {
      this.minDiameter = Math.min(this.minDiameter, vector.mag());
      var circumference = Math.PI * this.minDiameter;
      var threshold = ROTATION_THRESHOLD / circumference * 360;
      var bearingDeltaSinceStart = getBearingDelta(vector, this.startVector);
      return Math.abs(bearingDeltaSinceStart) < threshold;
    }
  }]);
  return TouchRotateHandler;
}(_two_touch.default);

exports.default = TouchRotateHandler;
//# sourceMappingURL=touch_rotate.js.map