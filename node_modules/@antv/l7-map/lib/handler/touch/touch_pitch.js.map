{"version":3,"sources":["../../../src/handler/touch/touch_pitch.ts"],"names":["isVertical","vector","Math","abs","y","x","ALLOWED_SINGLE_TOUCH_TIME","TouchPitchHandler","valid","firstMove","lastPoints","undefined","points","sub","center","e","vectorA","vectorB","gestureBeginsVertically","timeStamp","active","yDeltaAverage","degreesPerPixelMoved","pitchDelta","threshold","movedA","mag","movedB","isSameDirection","TwoTouchHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAAsD;AACpD,SAAOC,IAAI,CAACC,GAAL,CAASF,MAAM,CAACG,CAAhB,IAAqBF,IAAI,CAACC,GAAL,CAASF,MAAM,CAACI,CAAhB,CAA5B;AACD;;AAED,IAAMC,yBAAyB,GAAG,GAAlC;;IAEqBC,iB;;;;;;;;;;;;;;;UACZC,K;UACAC,S;UACAC,U;;;;;;WAEP,iBAAe;AACb;AACA,WAAKF,KAAL,GAAaG,SAAb;AACA,aAAO,KAAKF,SAAZ;AACA,aAAO,KAAKC,UAAZ;AACD;;;WAED,eAAaE,MAAb,EAAqC;AACnC,WAAKF,UAAL,GAAkBE,MAAlB;;AACA,UAAIZ,UAAU,CAACY,MAAM,CAAC,CAAD,CAAN,CAAUC,GAAV,CAAcD,MAAM,CAAC,CAAD,CAApB,CAAD,CAAd,EAA0C;AAExC,aAAKJ,KAAL,GAAa,KAAb;AACD;AACF;;;WAED,cAAYI,MAAZ,EAAoCE,MAApC,EAAmDC,CAAnD,EAAkE;AAChE,UAAMC,OAAO,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUC,GAAV,CAAc,KAAKH,UAAL,CAAgB,CAAhB,CAAd,CAAhB;AACA,UAAMO,OAAO,GAAGL,MAAM,CAAC,CAAD,CAAN,CAAUC,GAAV,CAAc,KAAKH,UAAL,CAAgB,CAAhB,CAAd,CAAhB;AAEA,WAAKF,KAAL,GAAa,KAAKU,uBAAL,CAA6BF,OAA7B,EAAsCC,OAAtC,EAA+CF,CAAC,CAACI,SAAjD,CAAb;;AACA,UAAI,CAAC,KAAKX,KAAV,EAAiB;AACf;AACD;;AAED,WAAKE,UAAL,GAAkBE,MAAlB;AACA,WAAKQ,MAAL,GAAc,IAAd;AACA,UAAMC,aAAa,GAAG,CAACL,OAAO,CAACZ,CAAR,GAAYa,OAAO,CAACb,CAArB,IAA0B,CAAhD;AACA,UAAMkB,oBAAoB,GAAG,CAAC,GAA9B;AACA,aAAO;AACLC,QAAAA,UAAU,EAAEF,aAAa,GAAGC;AADvB,OAAP;AAGD;;;WAED,iCACEN,OADF,EAEEC,OAFF,EAGEE,SAHF,EAIE;AACA,UAAI,KAAKX,KAAL,KAAeG,SAAnB,EAA8B;AAC5B,eAAO,KAAKH,KAAZ;AACD;;AAED,UAAMgB,SAAS,GAAG,CAAlB;AACA,UAAMC,MAAM,GAAGT,OAAO,CAACU,GAAR,MAAiBF,SAAhC;AACA,UAAMG,MAAM,GAAGV,OAAO,CAACS,GAAR,MAAiBF,SAAhC;;AAGA,UAAI,CAACC,MAAD,IAAW,CAACE,MAAhB,EAAwB;AACtB;AACD;;AAID,UAAI,CAACF,MAAD,IAAW,CAACE,MAAhB,EAAwB;AACtB,YAAI,KAAKlB,SAAL,KAAmBE,SAAvB,EAAkC;AAChC,eAAKF,SAAL,GAAiBU,SAAjB;AACD;;AAED,YAAIA,SAAS,GAAG,KAAKV,SAAjB,GAA6BH,yBAAjC,EAA4D;AAE1D,iBAAOK,SAAP;AACD,SAHD,MAGO;AACL,iBAAO,KAAP;AACD;AACF;;AAED,UAAMiB,eAAe,GAAGZ,OAAO,CAACZ,CAAR,GAAY,CAAZ,KAAkBa,OAAO,CAACb,CAAR,GAAY,CAAtD;AACA,aAAOJ,UAAU,CAACgB,OAAD,CAAV,IAAuBhB,UAAU,CAACiB,OAAD,CAAjC,IAA8CW,eAArD;AACD;;;EAzE4CC,kB","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport TwoTouchHandler from './two_touch';\n\nfunction isVertical(vector: { x: number; y: number }) {\n  return Math.abs(vector.y) > Math.abs(vector.x);\n}\n\nconst ALLOWED_SINGLE_TOUCH_TIME = 100;\n\nexport default class TouchPitchHandler extends TwoTouchHandler {\n  public valid: boolean | void;\n  public firstMove: number;\n  public lastPoints: [Point, Point];\n\n  public reset() {\n    super.reset();\n    this.valid = undefined;\n    delete this.firstMove;\n    delete this.lastPoints;\n  }\n\n  public start(points: [Point, Point]) {\n    this.lastPoints = points;\n    if (isVertical(points[0].sub(points[1]))) {\n      // fingers are more horizontal than vertical\n      this.valid = false;\n    }\n  }\n\n  public move(points: [Point, Point], center: Point, e: TouchEvent) {\n    const vectorA = points[0].sub(this.lastPoints[0]);\n    const vectorB = points[1].sub(this.lastPoints[1]);\n\n    this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);\n    if (!this.valid) {\n      return;\n    }\n\n    this.lastPoints = points;\n    this.active = true;\n    const yDeltaAverage = (vectorA.y + vectorB.y) / 2;\n    const degreesPerPixelMoved = -0.5;\n    return {\n      pitchDelta: yDeltaAverage * degreesPerPixelMoved,\n    };\n  }\n\n  public gestureBeginsVertically(\n    vectorA: Point,\n    vectorB: Point,\n    timeStamp: number,\n  ) {\n    if (this.valid !== undefined) {\n      return this.valid;\n    }\n\n    const threshold = 2;\n    const movedA = vectorA.mag() >= threshold;\n    const movedB = vectorB.mag() >= threshold;\n\n    // neither finger has moved a meaningful amount, wait\n    if (!movedA && !movedB) {\n      return;\n    }\n\n    // One finger has moved and the other has not.\n    // If enough time has passed, decide it is not a pitch.\n    if (!movedA || !movedB) {\n      if (this.firstMove === undefined) {\n        this.firstMove = timeStamp;\n      }\n\n      if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {\n        // still waiting for a movement from the second finger\n        return undefined;\n      } else {\n        return false;\n      }\n    }\n\n    const isSameDirection = vectorA.y > 0 === vectorB.y > 0;\n    return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;\n  }\n}\n"],"file":"touch_pitch.js"}