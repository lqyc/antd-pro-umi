"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _point = _interopRequireDefault(require("../../geo/point"));

var _handler_util = require("../handler_util");

var TouchPanHandler = function () {
  function TouchPanHandler(options) {
    (0, _classCallCheck2.default)(this, TouchPanHandler);
    this.enabled = void 0;
    this.active = void 0;
    this.touches = void 0;
    this.minTouches = void 0;
    this.clickTolerance = void 0;
    this.sum = void 0;
    this.minTouches = 1;
    this.clickTolerance = options.clickTolerance || 1;
    this.reset();
  }

  (0, _createClass2.default)(TouchPanHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      this.touches = {};
      this.sum = new _point.default(0, 0);
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      return this.calculateTransform(e, points, mapTouches);
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      if (!this.active) {
        return;
      }

      e.preventDefault();
      return this.calculateTransform(e, points, mapTouches);
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      this.calculateTransform(e, points, mapTouches);

      if (this.active && mapTouches.length < this.minTouches) {
        this.reset();
      }
    }
  }, {
    key: "touchcancel",
    value: function touchcancel() {
      this.reset();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }, {
    key: "calculateTransform",
    value: function calculateTransform(e, points, mapTouches) {
      if (mapTouches.length > 0) {
        this.active = true;
      }

      var touches = (0, _handler_util.indexTouches)(mapTouches, points);
      var touchPointSum = new _point.default(0, 0);
      var touchDeltaSum = new _point.default(0, 0);
      var touchDeltaCount = 0;

      for (var identifier in touches) {
        if (touches[identifier]) {
          var point = touches[identifier];
          var prevPoint = this.touches[identifier];

          if (prevPoint) {
            touchPointSum._add(point);

            touchDeltaSum._add(point.sub(prevPoint));

            touchDeltaCount++;
            touches[identifier] = point;
          }
        }
      }

      this.touches = touches;

      if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {
        return;
      }

      var panDelta = touchDeltaSum.div(touchDeltaCount);

      this.sum._add(panDelta);

      if (this.sum.mag() < this.clickTolerance) {
        return;
      }

      var around = touchPointSum.div(touchDeltaCount);
      return {
        around: around,
        panDelta: panDelta
      };
    }
  }]);
  return TouchPanHandler;
}();

exports.default = TouchPanHandler;
//# sourceMappingURL=touch_pan.js.map