"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _dom = _interopRequireDefault(require("../utils/dom"));

var _event = require("./events/event");

var BoxZoomHandler = function () {
  function BoxZoomHandler(map, options) {
    (0, _classCallCheck2.default)(this, BoxZoomHandler);
    this.map = void 0;
    this.el = void 0;
    this.container = void 0;
    this.enabled = void 0;
    this.active = void 0;
    this.startPos = void 0;
    this.lastPos = void 0;
    this.box = void 0;
    this.clickTolerance = void 0;
    this.map = map;
    this.el = map.getCanvasContainer();
    this.container = map.getContainer();
    this.clickTolerance = options.clickTolerance || 1;
  }

  (0, _createClass2.default)(BoxZoomHandler, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return !!this.active;
    }
  }, {
    key: "enable",
    value: function enable() {
      if (this.isEnabled()) {
        return;
      }

      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      if (!this.isEnabled()) {
        return;
      }

      this.enabled = false;
    }
  }, {
    key: "mousedown",
    value: function mousedown(e, point) {
      if (!this.isEnabled()) {
        return;
      }

      if (!(e.shiftKey && e.button === 0)) {
        return;
      }

      _dom.default.disableDrag();

      this.startPos = this.lastPos = point;
      this.active = true;
    }
  }, {
    key: "mousemoveWindow",
    value: function mousemoveWindow(e, point) {
      if (!this.active) {
        return;
      }

      var pos = point;

      if (this.lastPos.equals(pos) || !this.box && pos.dist(this.startPos) < this.clickTolerance) {
        return;
      }

      var p0 = this.startPos;
      this.lastPos = pos;

      if (!this.box) {
        this.box = _dom.default.create('div', 'l7-boxzoom', this.container);
        this.container.classList.add('l7-crosshair');
        this.fireEvent('boxzoomstart', e);
      }

      var minX = Math.min(p0.x, pos.x);
      var maxX = Math.max(p0.x, pos.x);
      var minY = Math.min(p0.y, pos.y);
      var maxY = Math.max(p0.y, pos.y);

      _dom.default.setTransform(this.box, "translate(".concat(minX, "px,").concat(minY, "px)"));

      if (this.box) {
        this.box.style.width = "".concat(maxX - minX, "px");
        this.box.style.height = "".concat(maxY - minY, "px");
      }
    }
  }, {
    key: "mouseupWindow",
    value: function mouseupWindow(e, point) {
      var _this = this;

      if (!this.active) {
        return;
      }

      if (e.button !== 0) {
        return;
      }

      var p0 = this.startPos;
      var p1 = point;
      this.reset();

      _dom.default.suppressClick();

      if (p0.x === p1.x && p0.y === p1.y) {
        this.fireEvent('boxzoomcancel', e);
      } else {
        this.map.emit('boxzoomend', new _event.Event('boxzoomend', {
          originalEvent: e
        }));
        return {
          cameraAnimation: function cameraAnimation(map) {
            return map.fitScreenCoordinates(p0, p1, _this.map.getBearing(), {
              linear: true
            });
          }
        };
      }
    }
  }, {
    key: "keydown",
    value: function keydown(e) {
      if (!this.active) {
        return;
      }

      if (e.keyCode === 27) {
        this.reset();
        this.fireEvent('boxzoomcancel', e);
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.active = false;
      this.container.classList.remove('l7-crosshair');

      if (this.box) {
        _dom.default.remove(this.box);

        this.box = null;
      }

      _dom.default.enableDrag();

      delete this.startPos;
      delete this.lastPos;
    }
  }, {
    key: "fireEvent",
    value: function fireEvent(type, e) {
      return this.map.emit(type, new _event.Event(type, {
        originalEvent: e
      }));
    }
  }]);
  return BoxZoomHandler;
}();

var _default = BoxZoomHandler;
exports.default = _default;
//# sourceMappingURL=box_zoom.js.map