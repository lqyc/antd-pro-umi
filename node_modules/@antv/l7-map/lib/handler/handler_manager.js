"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _point = _interopRequireDefault(require("../geo/point"));

var _dom = _interopRequireDefault(require("../utils/dom"));

var _blockable_map_event = _interopRequireDefault(require("./blockable_map_event"));

var _box_zoom = _interopRequireDefault(require("./box_zoom"));

var _click_zoom = _interopRequireDefault(require("./click_zoom"));

var _event = require("./events/event");

var _render_event = _interopRequireDefault(require("./events/render_event"));

var _handler_inertia = _interopRequireDefault(require("./handler_inertia"));

var _keyboard = _interopRequireDefault(require("./keyboard"));

var _map_event = _interopRequireDefault(require("./map_event"));

var _mouse = require("./mouse");

var _scroll_zoom = _interopRequireDefault(require("./scroll_zoom"));

var _dblclick_zoom = _interopRequireDefault(require("./shim/dblclick_zoom"));

var _drag_pan = _interopRequireDefault(require("./shim/drag_pan"));

var _drag_rotate = _interopRequireDefault(require("./shim/drag_rotate"));

var _touch_zoom_rotate = _interopRequireDefault(require("./shim/touch_zoom_rotate"));

var _tap_drag_zoom = _interopRequireDefault(require("./tap/tap_drag_zoom"));

var _tap_zoom = _interopRequireDefault(require("./tap/tap_zoom"));

var _touch = require("./touch");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _isMoving = function isMoving(p) {
  return p.zoom || p.drag || p.pitch || p.rotate;
};

function hasChange(result) {
  return result.panDelta && result.panDelta.mag() || result.zoomDelta || result.bearingDelta || result.pitchDelta;
}

var HandlerManager = function () {
  function HandlerManager(map, options) {
    var _this = this;

    (0, _classCallCheck2.default)(this, HandlerManager);
    this.map = void 0;
    this.el = void 0;
    this.handlers = void 0;
    this.eventsInProgress = void 0;
    this.frameId = void 0;
    this.inertia = void 0;
    this.bearingSnap = void 0;
    this.handlersById = void 0;
    this.updatingCamera = void 0;
    this.changes = void 0;
    this.previousActiveHandlers = void 0;
    this.bearingChanged = void 0;
    this.listeners = void 0;

    this.handleWindowEvent = function (e) {
      _this.handleEvent(e, "".concat(e.type, "Window"));
    };

    this.handleEvent = function (e, eventName) {
      if (e.type === 'blur') {
        _this.stop();

        return;
      }

      _this.updatingCamera = true;
      var inputEvent = e.type === 'renderFrame' ? undefined : e;
      var mergedIHandlerResult = {
        needsRenderFrame: false
      };
      var eventsInProgress = {};
      var activeHandlers = {};
      var mapTouches = e.touches ? _this.getMapTouches(e.touches) : undefined;
      var points = mapTouches ? _dom.default.touchPos(_this.el, mapTouches) : _dom.default.mousePos(_this.el, e);

      var _iterator = _createForOfIteratorHelper(_this.handlers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _step.value,
              handlerName = _step$value.handlerName,
              handler = _step$value.handler,
              allowed = _step$value.allowed;

          if (!handler.isEnabled()) {
            continue;
          }

          var data = void 0;

          if (_this.blockedByActive(activeHandlers, allowed, handlerName)) {
            handler.reset();
          } else {
            var handerName = eventName || e.type;

            if (handler && handler[handerName]) {
              data = handler[handerName](e, points, mapTouches);

              _this.mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, data, handlerName, inputEvent);

              if (data && data.needsRenderFrame) {
                _this.triggerRenderFrame();
              }
            }
          }

          if (data || handler.isActive()) {
            activeHandlers[handlerName] = handler;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var deactivatedHandlers = {};

      for (var name in _this.previousActiveHandlers) {
        if (!activeHandlers[name]) {
          deactivatedHandlers[name] = inputEvent;
        }
      }

      _this.previousActiveHandlers = activeHandlers;

      if (Object.keys(deactivatedHandlers).length || hasChange(mergedIHandlerResult)) {
        _this.changes.push([mergedIHandlerResult, eventsInProgress, deactivatedHandlers]);

        _this.triggerRenderFrame();
      }

      if (Object.keys(activeHandlers).length || hasChange(mergedIHandlerResult)) {
        _this.map.stop(true);
      }

      _this.updatingCamera = false;
      var cameraAnimation = mergedIHandlerResult.cameraAnimation;

      if (cameraAnimation) {
        _this.inertia.clear();

        _this.fireEvents({}, {});

        _this.changes = [];
        cameraAnimation(_this.map);
      }
    };

    this.map = map;
    this.el = this.map.getCanvasContainer();
    this.handlers = [];
    this.handlersById = {};
    this.changes = [];
    this.inertia = new _handler_inertia.default(map);
    this.bearingSnap = options.bearingSnap;
    this.previousActiveHandlers = {};
    this.eventsInProgress = {};
    this.addDefaultHandlers(options);
    var el = this.el;
    this.listeners = [[el, 'touchstart', {
      passive: false
    }], [el, 'touchmove', {
      passive: false
    }], [el, 'touchend', undefined], [el, 'touchcancel', undefined], [el, 'mousedown', undefined], [el, 'mousemove', undefined], [el, 'mouseup', undefined], [window.document, 'mousemove', {
      capture: true
    }], [window.document, 'mouseup', undefined], [el, 'mouseover', undefined], [el, 'mouseout', undefined], [el, 'dblclick', undefined], [el, 'click', undefined], [el, 'keydown', {
      capture: false
    }], [el, 'keyup', undefined], [el, 'wheel', {
      passive: false
    }], [el, 'contextmenu', undefined], [window, 'blur', undefined]];

    var _iterator2 = _createForOfIteratorHelper(this.listeners),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = (0, _slicedToArray2.default)(_step2.value, 3),
            target = _step2$value[0],
            type = _step2$value[1],
            listenerOptions = _step2$value[2];

        _dom.default.addEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  (0, _createClass2.default)(HandlerManager, [{
    key: "destroy",
    value: function destroy() {
      var _iterator3 = _createForOfIteratorHelper(this.listeners),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = (0, _slicedToArray2.default)(_step3.value, 3),
              target = _step3$value[0],
              type = _step3$value[1],
              listenerOptions = _step3$value[2];

          _dom.default.removeEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.updatingCamera) {
        return;
      }

      var _iterator4 = _createForOfIteratorHelper(this.handlers),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var handler = _step4.value.handler;
          handler.reset();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      this.inertia.clear();
      this.fireEvents({}, {});
      this.changes = [];
    }
  }, {
    key: "isActive",
    value: function isActive() {
      var _iterator5 = _createForOfIteratorHelper(this.handlers),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var handler = _step5.value.handler;

          if (handler.isActive()) {
            return true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return false;
    }
  }, {
    key: "isZooming",
    value: function isZooming() {
      return !!this.eventsInProgress.zoom || this.map.scrollZoom.isZooming();
    }
  }, {
    key: "isRotating",
    value: function isRotating() {
      return !!this.eventsInProgress.rotate;
    }
  }, {
    key: "isMoving",
    value: function isMoving() {
      return Boolean(_isMoving(this.eventsInProgress)) || this.isZooming();
    }
  }, {
    key: "mergeIHandlerResult",
    value: function mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, HandlerResult, name, e) {
      if (!HandlerResult) {
        return;
      }

      (0, _merge.default)(mergedIHandlerResult, HandlerResult);
      var eventData = {
        handlerName: name,
        originalEvent: HandlerResult.originalEvent || e
      };

      if (HandlerResult.zoomDelta !== undefined) {
        eventsInProgress.zoom = eventData;
      }

      if (HandlerResult.panDelta !== undefined) {
        eventsInProgress.drag = eventData;
      }

      if (HandlerResult.pitchDelta !== undefined) {
        eventsInProgress.pitch = eventData;
      }

      if (HandlerResult.bearingDelta !== undefined) {
        eventsInProgress.rotate = eventData;
      }
    }
  }, {
    key: "triggerRenderFrame",
    value: function triggerRenderFrame() {
      var _this2 = this;

      if (this.frameId === undefined) {
        this.frameId = this.map.requestRenderFrame(function (timeStamp) {
          delete _this2.frameId;

          _this2.handleEvent(new _render_event.default('renderFrame', {
            timeStamp: timeStamp
          }));

          _this2.applyChanges();
        });
      }
    }
  }, {
    key: "addDefaultHandlers",
    value: function addDefaultHandlers(options) {
      var map = this.map;
      var el = map.getCanvasContainer();
      this.add('mapEvent', new _map_event.default(map, options));
      var boxZoom = map.boxZoom = new _box_zoom.default(map, options);
      this.add('boxZoom', boxZoom);
      var tapZoom = new _tap_zoom.default();
      var clickZoom = new _click_zoom.default();
      map.doubleClickZoom = new _dblclick_zoom.default(clickZoom, tapZoom);
      this.add('tapZoom', tapZoom);
      this.add('clickZoom', clickZoom);
      var tapDragZoom = new _tap_drag_zoom.default();
      this.add('tapDragZoom', tapDragZoom);
      var touchPitch = map.touchPitch = new _touch.TouchPitchHandler();
      this.add('touchPitch', touchPitch);
      var mouseRotate = new _mouse.MouseRotateHandler(options);
      var mousePitch = new _mouse.MousePitchHandler(options);
      map.dragRotate = new _drag_rotate.default(options, mouseRotate, mousePitch);
      this.add('mouseRotate', mouseRotate, ['mousePitch']);
      this.add('mousePitch', mousePitch, ['mouseRotate']);
      var mousePan = new _mouse.MousePanHandler(options);
      var touchPan = new _touch.TouchPanHandler(options);
      map.dragPan = new _drag_pan.default(el, mousePan, touchPan);
      this.add('mousePan', mousePan);
      this.add('touchPan', touchPan, ['touchZoom', 'touchRotate']);
      var touchRotate = new _touch.TouchRotateHandler();
      var touchZoom = new _touch.TouchZoomHandler();
      map.touchZoomRotate = new _touch_zoom_rotate.default(el, touchZoom, touchRotate, tapDragZoom);
      this.add('touchRotate', touchRotate, ['touchPan', 'touchZoom']);
      this.add('touchZoom', touchZoom, ['touchPan', 'touchRotate']);
      var scrollZoom = map.scrollZoom = new _scroll_zoom.default(map, this);
      this.add('scrollZoom', scrollZoom, ['mousePan']);
      var keyboard = map.keyboard = new _keyboard.default();
      this.add('keyboard', keyboard);
      this.add('blockableMapEvent', new _blockable_map_event.default(map));

      for (var _i = 0, _arr = ['boxZoom', 'doubleClickZoom', 'tapDragZoom', 'touchPitch', 'dragRotate', 'dragPan', 'touchZoomRotate', 'scrollZoom', 'keyboard']; _i < _arr.length; _i++) {
        var name = _arr[_i];

        if (options.interactive && options[name]) {
          map[name].enable(options[name]);
        }
      }
    }
  }, {
    key: "add",
    value: function add(handlerName, handler, allowed) {
      this.handlers.push({
        handlerName: handlerName,
        handler: handler,
        allowed: allowed
      });
      this.handlersById[handlerName] = handler;
    }
  }, {
    key: "blockedByActive",
    value: function blockedByActive(activeHandlers, allowed, myName) {
      for (var name in activeHandlers) {
        if (name === myName) {
          continue;
        }

        if (!allowed || allowed.indexOf(name) < 0) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "getMapTouches",
    value: function getMapTouches(touches) {
      var mapTouches = [];

      var _iterator6 = _createForOfIteratorHelper(touches),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var t = _step6.value;
          var target = t.target;

          if (this.el.contains(target)) {
            mapTouches.push(t);
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return mapTouches;
    }
  }, {
    key: "applyChanges",
    value: function applyChanges() {
      var combined = {};
      var combinedEventsInProgress = {};
      var combinedDeactivatedHandlers = {};

      var _iterator7 = _createForOfIteratorHelper(this.changes),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = (0, _slicedToArray2.default)(_step7.value, 3),
              change = _step7$value[0],
              eventsInProgress = _step7$value[1],
              deactivatedHandlers = _step7$value[2];

          if (change.panDelta) {
            combined.panDelta = (combined.panDelta || new _point.default(0, 0))._add(change.panDelta);
          }

          if (change.zoomDelta) {
            combined.zoomDelta = (combined.zoomDelta || 0) + change.zoomDelta;
          }

          if (change.bearingDelta) {
            combined.bearingDelta = (combined.bearingDelta || 0) + change.bearingDelta;
          }

          if (change.pitchDelta) {
            combined.pitchDelta = (combined.pitchDelta || 0) + change.pitchDelta;
          }

          if (change.around !== undefined) {
            combined.around = change.around;
          }

          if (change.pinchAround !== undefined) {
            combined.pinchAround = change.pinchAround;
          }

          if (change.noInertia) {
            combined.noInertia = change.noInertia;
          }

          (0, _merge.default)(combinedEventsInProgress, eventsInProgress);
          (0, _merge.default)(combinedDeactivatedHandlers, deactivatedHandlers);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      this.updateMapTransform(combined, combinedEventsInProgress, combinedDeactivatedHandlers);
      this.changes = [];
    }
  }, {
    key: "updateMapTransform",
    value: function updateMapTransform(combinedResult, combinedEventsInProgress, deactivatedHandlers) {
      var map = this.map;
      var tr = map.transform;

      if (!hasChange(combinedResult)) {
        return this.fireEvents(combinedEventsInProgress, deactivatedHandlers);
      }

      var panDelta = combinedResult.panDelta,
          zoomDelta = combinedResult.zoomDelta,
          bearingDelta = combinedResult.bearingDelta,
          pitchDelta = combinedResult.pitchDelta,
          pinchAround = combinedResult.pinchAround;
      var around = combinedResult.around;

      if (pinchAround !== undefined) {
        around = pinchAround;
      }

      map.stop(true);
      around = around || map.transform.centerPoint;
      var loc = tr.pointLocation(panDelta ? around.sub(panDelta) : around);

      if (bearingDelta) {
        tr.bearing += bearingDelta;
      }

      if (pitchDelta) {
        tr.pitch += pitchDelta;
      }

      if (zoomDelta) {
        tr.zoom += zoomDelta;
      }

      tr.setLocationAtPoint(loc, around);
      this.map.update();

      if (!combinedResult.noInertia) {
        this.inertia.record(combinedResult);
      }

      this.fireEvents(combinedEventsInProgress, deactivatedHandlers);
    }
  }, {
    key: "fireEvents",
    value: function fireEvents(newEventsInProgress, deactivatedHandlers) {
      var _this3 = this;

      var wasMoving = _isMoving(this.eventsInProgress);

      var nowMoving = _isMoving(newEventsInProgress);

      var startEvents = {};

      for (var eventName in newEventsInProgress) {
        if (newEventsInProgress[eventName]) {
          var originalEvent = newEventsInProgress[eventName].originalEvent;

          if (!this.eventsInProgress[eventName]) {
            startEvents["".concat(eventName, "start")] = originalEvent;
          }

          this.eventsInProgress[eventName] = newEventsInProgress[eventName];
        }
      }

      if (!wasMoving && nowMoving) {
        this.fireEvent('movestart', nowMoving.originalEvent);
      }

      for (var name in startEvents) {
        if (startEvents[name]) {
          this.fireEvent(name, startEvents[name]);
        }
      }

      if (newEventsInProgress.rotate) {
        this.bearingChanged = true;
      }

      if (nowMoving) {
        this.fireEvent('move', nowMoving.originalEvent);
      }

      for (var _eventName in newEventsInProgress) {
        if (newEventsInProgress[_eventName]) {
          var _originalEvent = newEventsInProgress[_eventName].originalEvent;
          this.fireEvent(_eventName, _originalEvent);
        }
      }

      var endEvents = {};
      var originalEndEvent;

      for (var _eventName2 in this.eventsInProgress) {
        if (this.eventsInProgress[_eventName2]) {
          var _this$eventsInProgres = this.eventsInProgress[_eventName2],
              handlerName = _this$eventsInProgres.handlerName,
              _originalEvent2 = _this$eventsInProgres.originalEvent;

          if (!this.handlersById[handlerName].isActive()) {
            delete this.eventsInProgress[_eventName2];
            originalEndEvent = deactivatedHandlers[handlerName] || _originalEvent2;
            endEvents["".concat(_eventName2, "end")] = originalEndEvent;
          }
        }
      }

      for (var _name in endEvents) {
        if (endEvents[_name]) {
          this.fireEvent(_name, endEvents[_name]);
        }
      }

      var stillMoving = _isMoving(this.eventsInProgress);

      if ((wasMoving || nowMoving) && !stillMoving) {
        this.updatingCamera = true;
        var inertialEase = this.inertia.onMoveEnd(this.map.dragPan.inertiaOptions);

        var shouldSnapToNorth = function shouldSnapToNorth(bearing) {
          return bearing !== 0 && -_this3.bearingSnap < bearing && bearing < _this3.bearingSnap;
        };

        if (inertialEase) {
          if (shouldSnapToNorth(inertialEase.bearing || this.map.getBearing())) {
            inertialEase.bearing = 0;
          }

          this.map.easeTo(inertialEase, {
            originalEvent: originalEndEvent
          });
        } else {
          this.map.emit('moveend', new _event.Event('moveend', {
            originalEvent: originalEndEvent
          }));

          if (shouldSnapToNorth(this.map.getBearing())) {
            this.map.resetNorth();
          }
        }

        this.bearingChanged = false;
        this.updatingCamera = false;
      }
    }
  }, {
    key: "fireEvent",
    value: function fireEvent(type, e) {
      this.map.emit(type, new _event.Event(type, e ? {
        originalEvent: e
      } : {}));
    }
  }]);
  return HandlerManager;
}();

var _default = HandlerManager;
exports.default = _default;
//# sourceMappingURL=handler_manager.js.map