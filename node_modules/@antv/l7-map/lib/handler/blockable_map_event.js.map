{"version":3,"sources":["../../src/handler/blockable_map_event.ts"],"names":["BlockableMapEventHandler","map","delayContextMenu","contextMenuEvent","e","emit","type","MapMouseEvent","listeners","preventDefault"],"mappings":";;;;;;;;;;;;;AAGA;;IACqBA,wB;AAKnB,oCAAYC,GAAZ,EAAsB;AAAA;AAAA,SAJdA,GAIc;AAAA,SAHdC,gBAGc;AAAA,SAFdC,gBAEc;AACpB,SAAKF,GAAL,GAAWA,GAAX;AACD;;;;WAED,iBAAe;AACb,WAAKC,gBAAL,GAAwB,KAAxB;AACA,aAAO,KAAKC,gBAAZ;AACD;;;WAED,mBAAiBC,CAAjB,EAAgC;AAE9B,WAAKH,GAAL,CAASI,IAAT,CAAcD,CAAC,CAACE,IAAhB,EAAsB,IAAIC,qBAAJ,CAAkBH,CAAC,CAACE,IAApB,EAA0B,KAAKL,GAA/B,EAAoCG,CAApC,CAAtB;AACD;;;WAED,qBAAmB;AACjB,WAAKF,gBAAL,GAAwB,IAAxB;AACD;;;WAED,mBAAiB;AACf,WAAKA,gBAAL,GAAwB,KAAxB;;AACA,UAAI,KAAKC,gBAAT,EAA2B;AACzB,aAAKF,GAAL,CAASI,IAAT,CACE,aADF,EAEE,IAAIE,qBAAJ,CAAkB,aAAlB,EAAiC,KAAKN,GAAtC,EAA2C,KAAKE,gBAAhD,CAFF;AAIA,eAAO,KAAKA,gBAAZ;AACD;AACF;;;WACD,qBAAmBC,CAAnB,EAAkC;AAChC,UAAI,KAAKF,gBAAT,EAA2B;AAEzB,aAAKC,gBAAL,GAAwBC,CAAxB;AACD,OAHD,MAGO;AAEL,aAAKH,GAAL,CAASI,IAAT,CAAcD,CAAC,CAACE,IAAhB,EAAsB,IAAIC,qBAAJ,CAAkBH,CAAC,CAACE,IAApB,EAA0B,KAAKL,GAA/B,EAAoCG,CAApC,CAAtB;AACD;;AAGD,UAAI,KAAKH,GAAL,CAASO,SAAT,CAAmB,aAAnB,CAAJ,EAAuC;AACrCJ,QAAAA,CAAC,CAACK,cAAF;AACD;AACF;;;WAED,qBAAmB;AACjB,aAAO,IAAP;AACD;;;WAED,oBAAkB;AAChB,aAAO,KAAP;AACD;;;WACD,kBAAgB;AACd,aAAO,IAAP;AACD;;;WACD,mBAAiB;AACf,aAAO,KAAP;AACD","sourcesContent":["// @ts-ignore\nimport Point from '../geo/point';\nimport { Map } from '../map';\nimport { MapMouseEvent, MapTouchEvent, MapWheelEvent } from './events';\nexport default class BlockableMapEventHandler {\n  private map: Map;\n  private delayContextMenu: boolean;\n  private contextMenuEvent: MouseEvent;\n\n  constructor(map: Map) {\n    this.map = map;\n  }\n\n  public reset() {\n    this.delayContextMenu = false;\n    delete this.contextMenuEvent;\n  }\n\n  public mousemove(e: MouseEvent) {\n    // mousemove map events should not be fired when interaction handlers (pan, rotate, etc) are active\n    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n  }\n\n  public mousedown() {\n    this.delayContextMenu = true;\n  }\n\n  public mouseup() {\n    this.delayContextMenu = false;\n    if (this.contextMenuEvent) {\n      this.map.emit(\n        'contextmenu',\n        new MapMouseEvent('contextmenu', this.map, this.contextMenuEvent),\n      );\n      delete this.contextMenuEvent;\n    }\n  }\n  public contextmenu(e: MouseEvent) {\n    if (this.delayContextMenu) {\n      // Mac: contextmenu fired on mousedown; we save it until mouseup for consistency's sake\n      this.contextMenuEvent = e;\n    } else {\n      // Windows: contextmenu fired on mouseup, so fire event now\n      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n    }\n\n    // prevent browser context menu when necessary\n    if (this.map.listeners('contextmenu')) {\n      e.preventDefault();\n    }\n  }\n\n  public isEnabled() {\n    return true;\n  }\n\n  public isActive() {\n    return false;\n  }\n  public enable() {\n    return true;\n  }\n  public disable() {\n    return false;\n  }\n}\n"],"file":"blockable_map_event.js"}