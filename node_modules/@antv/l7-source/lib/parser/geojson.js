"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = geoJSON;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _geojsonRewind = _interopRequireDefault(require("@mapbox/geojson-rewind"));

var _invariant = require("@turf/invariant");

var turfMeta = _interopRequireWildcard(require("@turf/meta"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function geoJSON(data, cfg) {
  var resultData = [];
  var featureKeys = {};
  data.features = data.features.filter(function (item) {
    var geometry = item.geometry;
    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;
  });
  (0, _geojsonRewind.default)(data, true);

  if (data.features.length === 0) {
    return {
      dataArray: [],
      featureKeys: featureKeys
    };
  }

  var i = 0;
  turfMeta.flattenEach(data, function (currentFeature, featureIndex) {
    var coord = (0, _invariant.getCoords)(currentFeature);
    var id = featureIndex;

    var dataItem = _objectSpread(_objectSpread({}, currentFeature.properties), {}, {
      coordinates: coord,
      _id: id
    });

    resultData.push(dataItem);
  });
  return {
    dataArray: resultData,
    featureKeys: featureKeys
  };
}
//# sourceMappingURL=geojson.js.map