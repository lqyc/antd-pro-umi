{"version":3,"sources":["../src/factory.ts"],"names":["TRANSFORMS","PARSERS","getParser","type","registerParser","parserFunction","getTransform","registerTransform","transFunction"],"mappings":";;;;;;AAIA,IAAMA,UAEL,GAAG,EAFJ;AAGA,IAAMC,OAEL,GAAG,EAFJ;;AAGO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;AAAA,SAAkBF,OAAO,CAACE,IAAD,CAAzB;AAAA,CAAlB;;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC5BD,IAD4B,EAE5BE,cAF4B,EAGnB;AACTJ,EAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBE,cAAhB;AACD,CALM;;;;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACH,IAAD;AAAA,SAAkBH,UAAU,CAACG,IAAD,CAA5B;AAAA,CAArB;;;;AACA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BJ,IAD+B,EAE/BK,aAF+B,EAGtB;AACTR,EAAAA,UAAU,CAACG,IAAD,CAAV,GAAmBK,aAAnB;AACD,CALM","sourcesContent":["import { IParserCfg, ITransform } from '@antv/l7-core';\nimport { IParserData } from './interface';\ntype ParserFunction = (data: any, cfg?: any) => IParserData;\ntype transformFunction = (data: IParserData, cfg?: any) => IParserData;\nconst TRANSFORMS: {\n  [type: string]: transformFunction;\n} = {};\nconst PARSERS: {\n  [type: string]: ParserFunction;\n} = {};\nexport const getParser = (type: string) => PARSERS[type];\nexport const registerParser = (\n  type: string,\n  parserFunction: ParserFunction,\n): void => {\n  PARSERS[type] = parserFunction;\n};\nexport const getTransform = (type: string) => TRANSFORMS[type];\nexport const registerTransform = (\n  type: string,\n  transFunction: transformFunction,\n): void => {\n  TRANSFORMS[type] = transFunction;\n};\n"],"file":"factory.js"}