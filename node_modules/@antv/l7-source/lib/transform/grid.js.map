{"version":3,"sources":["../../src/transform/grid.ts"],"names":["R_EARTH","aggregatorToGrid","data","option","dataArray","size","pixlSize","Math","PI","_pointsGridHash","gridHash","gridOffset","layerData","_getGridLayerDataFromGridHash","yOffset","xOffset","radius","type","latMin","Infinity","latMax","pLat","point","coordinates","Number","isFinite","centerLat","_calculateGridLatLonOffset","lat","lng","latIdx","floor","lonIdx","key","count","points","push","cellSize","latitude","_calculateLatOffset","_calculateLonOffset","dy","dx","cos","Object","keys","reduce","accu","i","idxs","split","parseInt","item","field","method","columns","Satistics","getColumn","statMap","assign","_id","rawData"],"mappings":";;;;;;;AAIA;;;;;;;;AASA,IAAMA,OAAO,GAAG,OAAhB;;AAEO,SAASC,gBAAT,CAA0BC,IAA1B,EAA6CC,MAA7C,EAAiE;AACtE,MAAMC,SAAS,GAAGF,IAAI,CAACE,SAAvB;AADsE,qBAEhDD,MAFgD,CAE9DE,IAF8D;AAAA,MAE9DA,IAF8D,6BAEvD,EAFuD;AAGtE,MAAMC,QAAQ,GAAKD,IAAI,IAAI,IAAIE,IAAI,CAACC,EAAT,GAAcR,OAAlB,CAAL,IAAoC,OAAO,EAA3C,CAAD,GAAmD,CAApE;;AAHsE,yBAIrCS,eAAe,CAACL,SAAD,EAAYC,IAAZ,CAJsB;AAAA,MAI9DK,QAJ8D,oBAI9DA,QAJ8D;AAAA,MAIpDC,UAJoD,oBAIpDA,UAJoD;;AAKtE,MAAMC,SAAS,GAAGC,6BAA6B,CAACH,QAAD,EAAWC,UAAX,EAAuBR,MAAvB,CAA/C;;AACA,SAAO;AACLW,IAAAA,OAAO,EAAER,QADJ;AAELS,IAAAA,OAAO,EAAET,QAFJ;AAGLU,IAAAA,MAAM,EAAEV,QAHH;AAILW,IAAAA,IAAI,EAAE,MAJD;AAKLb,IAAAA,SAAS,EAAEQ;AALN,GAAP;AAOD;;AAED,SAASH,eAAT,CAAyBL,SAAzB,EAA2CC,IAA3C,EAAyD;AACvD,MAAIa,MAAM,GAAGC,QAAb;AACA,MAAIC,MAAM,GAAG,CAACD,QAAd;AACA,MAAIE,IAAJ;;AAHuD,6CAKnCjB,SALmC;AAAA;;AAAA;AAKvD,wDAA+B;AAAA,UAApBkB,KAAoB;AAC7BD,MAAAA,IAAI,GAAGC,KAAK,CAACC,WAAN,CAAkB,CAAlB,CAAP;;AACA,UAAIC,MAAM,CAACC,QAAP,CAAgBJ,IAAhB,CAAJ,EAA2B;AACzBH,QAAAA,MAAM,GAAGG,IAAI,GAAGH,MAAP,GAAgBG,IAAhB,GAAuBH,MAAhC;AACAE,QAAAA,MAAM,GAAGC,IAAI,GAAGD,MAAP,GAAgBC,IAAhB,GAAuBD,MAAhC;AACD;AACF;AAXsD;AAAA;AAAA;AAAA;AAAA;;AAYvD,MAAMM,SAAS,GAAG,CAACR,MAAM,GAAGE,MAAV,IAAoB,CAAtC;;AACA,MAAMT,UAAU,GAAGgB,0BAA0B,CAACtB,IAAD,EAAOqB,SAAP,CAA7C;;AACA,MAAIf,UAAU,CAACI,OAAX,IAAsB,CAAtB,IAA2BJ,UAAU,CAACG,OAAX,IAAsB,CAArD,EAAwD;AACtD,WAAO;AAAEJ,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAVA;AAAhB,KAAP;AACD;;AACD,MAAMD,QAAmB,GAAG,EAA5B;;AAjBuD,8CAkBnCN,SAlBmC;AAAA;;AAAA;AAkBvD,2DAA+B;AAAA,UAApBkB,MAAoB;AAC7B,UAAMM,GAAG,GAAGN,MAAK,CAACC,WAAN,CAAkB,CAAlB,CAAZ;AACA,UAAMM,GAAG,GAAGP,MAAK,CAACC,WAAN,CAAkB,CAAlB,CAAZ;;AAEA,UAAIC,MAAM,CAACC,QAAP,CAAgBG,GAAhB,KAAwBJ,MAAM,CAACC,QAAP,CAAgBI,GAAhB,CAA5B,EAAkD;AAChD,YAAMC,MAAM,GAAGvB,IAAI,CAACwB,KAAL,CAAW,CAACH,GAAG,GAAG,EAAP,IAAajB,UAAU,CAACG,OAAnC,CAAf;AACA,YAAMkB,MAAM,GAAGzB,IAAI,CAACwB,KAAL,CAAW,CAACF,GAAG,GAAG,GAAP,IAAclB,UAAU,CAACI,OAApC,CAAf;;AACA,YAAMkB,IAAG,aAAMH,MAAN,cAAgBE,MAAhB,CAAT;;AAEAtB,QAAAA,QAAQ,CAACuB,IAAD,CAAR,GAAgBvB,QAAQ,CAACuB,IAAD,CAAR,IAAiB;AAAEC,UAAAA,KAAK,EAAE,CAAT;AAAYC,UAAAA,MAAM,EAAE;AAApB,SAAjC;AACAzB,QAAAA,QAAQ,CAACuB,IAAD,CAAR,CAAcC,KAAd,IAAuB,CAAvB;;AACAxB,QAAAA,QAAQ,CAACuB,IAAD,CAAR,CAAcE,MAAd,CAAqBC,IAArB,CAA0Bd,MAA1B;AACD;AACF;AA/BsD;AAAA;AAAA;AAAA;AAAA;;AAiCvD,SAAO;AAAEZ,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,UAAU,EAAVA;AAAZ,GAAP;AACD;;AAED,SAASgB,0BAAT,CAAoCU,QAApC,EAAsDC,QAAtD,EAAwE;AACtE,MAAMxB,OAAO,GAAGyB,mBAAmB,CAACF,QAAD,CAAnC;;AACA,MAAMtB,OAAO,GAAGyB,mBAAmB,CAACF,QAAD,EAAWD,QAAX,CAAnC;;AACA,SAAO;AAAEvB,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,OAAO,EAAPA;AAAX,GAAP;AACD;;AAED,SAASwB,mBAAT,CAA6BE,EAA7B,EAAyC;AACvC,SAAQA,EAAE,GAAGzC,OAAN,IAAkB,MAAMO,IAAI,CAACC,EAA7B,CAAP;AACD;;AAED,SAASgC,mBAAT,CAA6BZ,GAA7B,EAA0Cc,EAA1C,EAAsD;AACpD,SAASA,EAAE,GAAG1C,OAAN,IAAkB,MAAMO,IAAI,CAACC,EAA7B,CAAD,GAAqCD,IAAI,CAACoC,GAAL,CAAUf,GAAG,GAAGrB,IAAI,CAACC,EAAZ,GAAkB,GAA3B,CAA5C;AACD;;AACD,SAASK,6BAAT,CACEH,QADF,EAEEC,UAFF,EAGER,MAHF,EAIE;AACA,SAAOyC,MAAM,CAACC,IAAP,CAAYnC,QAAZ,EAAsBoC,MAAtB,CAA6B,UAACC,IAAD,EAAOd,GAAP,EAAYe,CAAZ,EAAkB;AACpD,QAAMC,IAAI,GAAGhB,GAAG,CAACiB,KAAJ,CAAU,GAAV,CAAb;AACA,QAAMpB,MAAM,GAAGqB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAvB;AACA,QAAMjB,MAAM,GAAGmB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAvB;AACA,QAAMG,IAEL,GAAG,EAFJ;;AAGA,QAAIjD,MAAM,CAACkD,KAAP,IAAgBlD,MAAM,CAACmD,MAA3B,EAAmC;AACjC,UAAMC,OAAO,GAAGC,mBAAUC,SAAV,CAAoB/C,QAAQ,CAACuB,GAAD,CAAR,CAAcE,MAAlC,EAA0ChC,MAAM,CAACkD,KAAjD,CAAhB;;AACAD,MAAAA,IAAI,CAACjD,MAAM,CAACmD,MAAR,CAAJ,GAAsBE,mBAAUE,OAAV,CAAkBvD,MAAM,CAACmD,MAAzB,EAAiCC,OAAjC,CAAtB;AACD;;AACDX,IAAAA,MAAM,CAACe,MAAP,CAAcP,IAAd,EAAoB;AAClBQ,MAAAA,GAAG,EAAEZ,CADa;AAElBzB,MAAAA,WAAW,EAAE,2BAAa,CACxB,CAAC,GAAD,GAAOZ,UAAU,CAACI,OAAX,IAAsBiB,MAAM,GAAG,GAA/B,CADiB,EAExB,CAAC,EAAD,GAAMrB,UAAU,CAACG,OAAX,IAAsBgB,MAAM,GAAG,GAA/B,CAFkB,CAAb,CAFK;AAMlB+B,MAAAA,OAAO,EAAEnD,QAAQ,CAACuB,GAAD,CAAR,CAAcE,MANL;AAOlBD,MAAAA,KAAK,EAAExB,QAAQ,CAACuB,GAAD,CAAR,CAAcC;AAPH,KAApB;AAUAa,IAAAA,IAAI,CAACX,IAAL,CAAUgB,IAAV;AACA,WAAOL,IAAP;AACD,GAvBM,EAuBJ,EAvBI,CAAP;AAwBD","sourcesContent":["/**\n * 生成四边形热力图\n */\nimport { IParserData, ITransform } from '@antv/l7-core';\nimport { aProjectFlat, Satistics } from '@antv/l7-utils';\n\ninterface IGridHash {\n  [key: string]: any;\n}\ninterface IGridOffset {\n  yOffset: number;\n  xOffset: number;\n}\nconst R_EARTH = 6378000;\n\nexport function aggregatorToGrid(data: IParserData, option: ITransform) {\n  const dataArray = data.dataArray;\n  const { size = 10 } = option;\n  const pixlSize = ((size / (2 * Math.PI * R_EARTH)) * (256 << 20)) / 2;\n  const { gridHash, gridOffset } = _pointsGridHash(dataArray, size);\n  const layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);\n  return {\n    yOffset: pixlSize,\n    xOffset: pixlSize,\n    radius: pixlSize,\n    type: 'grid',\n    dataArray: layerData,\n  };\n}\n\nfunction _pointsGridHash(dataArray: any[], size: number) {\n  let latMin = Infinity;\n  let latMax = -Infinity;\n  let pLat;\n\n  for (const point of dataArray) {\n    pLat = point.coordinates[1];\n    if (Number.isFinite(pLat)) {\n      latMin = pLat < latMin ? pLat : latMin;\n      latMax = pLat > latMax ? pLat : latMax;\n    }\n  }\n  const centerLat = (latMin + latMax) / 2;\n  const gridOffset = _calculateGridLatLonOffset(size, centerLat);\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return { gridHash: {}, gridOffset };\n  }\n  const gridHash: IGridHash = {};\n  for (const point of dataArray) {\n    const lat = point.coordinates[1];\n    const lng = point.coordinates[0];\n\n    if (Number.isFinite(lat) && Number.isFinite(lng)) {\n      const latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n      const lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n      const key = `${latIdx}-${lonIdx}`;\n\n      gridHash[key] = gridHash[key] || { count: 0, points: [] };\n      gridHash[key].count += 1;\n      gridHash[key].points.push(point);\n    }\n  }\n\n  return { gridHash, gridOffset };\n}\n// 计算网格偏移量\nfunction _calculateGridLatLonOffset(cellSize: number, latitude: number) {\n  const yOffset = _calculateLatOffset(cellSize);\n  const xOffset = _calculateLonOffset(latitude, cellSize);\n  return { yOffset, xOffset };\n}\n\nfunction _calculateLatOffset(dy: number) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\nfunction _calculateLonOffset(lat: number, dx: number) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\nfunction _getGridLayerDataFromGridHash(\n  gridHash: IGridHash,\n  gridOffset: IGridOffset,\n  option: ITransform,\n) {\n  return Object.keys(gridHash).reduce((accu, key, i) => {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const item: {\n      [key: string]: any;\n    } = {};\n    if (option.field && option.method) {\n      const columns = Satistics.getColumn(gridHash[key].points, option.field);\n      item[option.method] = Satistics.statMap[option.method](columns);\n    }\n    Object.assign(item, {\n      _id: i,\n      coordinates: aProjectFlat([\n        -180 + gridOffset.xOffset * (lonIdx + 0.5),\n        -90 + gridOffset.yOffset * (latIdx + 0.5),\n      ]),\n      rawData: gridHash[key].points,\n      count: gridHash[key].count,\n    });\n    // @ts-ignore\n    accu.push(item);\n    return accu;\n  }, []);\n}\n"],"file":"grid.js"}