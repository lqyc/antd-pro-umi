"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _mergeWith2 = _interopRequireDefault(require("lodash/mergeWith"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _cloneDeep2 = _interopRequireDefault(require("lodash/cloneDeep"));

var _asyncHook = require("@antv/async-hook");

var _l7Utils = require("@antv/l7-utils");

var _eventemitter = require("eventemitter3");

var _ = require("./");

var _cluster = require("./transform/cluster");

var _statistics = require("./utils/statistics");

var _util = require("./utils/util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var Source = function (_EventEmitter) {
  (0, _inherits2.default)(Source, _EventEmitter);

  var _super = _createSuper(Source);

  function Source(data, cfg) {
    var _this;

    (0, _classCallCheck2.default)(this, Source);
    _this = _super.call(this);
    _this.data = void 0;
    _this.extent = void 0;
    _this.hooks = {
      init: new _asyncHook.SyncHook()
    };
    _this.parser = {
      type: 'geojson'
    };
    _this.transforms = [];
    _this.cluster = false;
    _this.clusterOptions = {
      enable: false,
      radius: 40,
      maxZoom: 20,
      zoom: -99,
      method: 'count'
    };
    _this.originData = void 0;
    _this.rawData = void 0;
    _this.cfg = {};
    _this.clusterIndex = void 0;
    _this.originData = data;

    _this.initCfg(cfg);

    _this.hooks.init.tap('parser', function () {
      _this.excuteParser();
    });

    _this.hooks.init.tap('cluster', function () {
      _this.initCluster();
    });

    _this.hooks.init.tap('transform', function () {
      _this.executeTrans();
    });

    _this.init();

    return _this;
  }

  (0, _createClass2.default)(Source, [{
    key: "setData",
    value: function setData(data, options) {
      this.rawData = data;
      this.originData = data;
      this.initCfg(options);
      this.init();
      this.emit('update');
    }
  }, {
    key: "getClusters",
    value: function getClusters(zoom) {
      return this.clusterIndex.getClusters(this.extent, zoom);
    }
  }, {
    key: "getClustersLeaves",
    value: function getClustersLeaves(id) {
      return this.clusterIndex.getLeaves(id, Infinity);
    }
  }, {
    key: "updateClusterData",
    value: function updateClusterData(zoom) {
      var _this2 = this;

      var _this$clusterOptions = this.clusterOptions,
          _this$clusterOptions$ = _this$clusterOptions.method,
          method = _this$clusterOptions$ === void 0 ? 'sum' : _this$clusterOptions$,
          field = _this$clusterOptions.field;
      var newBounds = (0, _l7Utils.padBounds)((0, _l7Utils.bBoxToBounds)(this.extent), 2);
      var data = this.clusterIndex.getClusters(newBounds[0].concat(newBounds[1]), Math.floor(zoom));
      this.clusterOptions.zoom = zoom;
      data.forEach(function (p) {
        if (!p.id) {
          p.properties.point_count = 1;
        }
      });

      if (field || (0, _isFunction2.default)(method)) {
        data = data.map(function (item) {
          var id = item.id;

          if (id) {
            var points = _this2.clusterIndex.getLeaves(id, Infinity);

            var properties = points.map(function (d) {
              return d.properties;
            });
            var statNum;

            if ((0, _isString2.default)(method) && field) {
              var column = (0, _util.getColumn)(properties, field);
              statNum = _statistics.statMap[method](column);
            }

            if ((0, _isFunction2.default)(method)) {
              statNum = method(properties);
            }

            item.properties.stat = statNum;
          } else {
            item.properties.point_count = 1;
          }

          return item;
        });
      }

      this.data = (0, _.getParser)('geojson')({
        type: 'FeatureCollection',
        features: data
      });
      this.executeTrans();
    }
  }, {
    key: "getFeatureById",
    value: function getFeatureById(id) {
      var _this$parser$type = this.parser.type,
          type = _this$parser$type === void 0 ? 'geojson' : _this$parser$type;

      if (type === 'geojson' && !this.cluster) {
        var feature = id < this.originData.features.length ? this.originData.features[id] : 'null';
        var newFeature = (0, _cloneDeep2.default)(feature);

        if (this.transforms.length !== 0) {
          var item = this.data.dataArray.find(function (dataItem) {
            return dataItem._id === id;
          });
          newFeature.properties = item;
        }

        return newFeature;
      } else {
        return id < this.data.dataArray.length ? this.data.dataArray[id] : 'null';
      }
    }
  }, {
    key: "getFeatureId",
    value: function getFeatureId(field, value) {
      var feature = this.data.dataArray.find(function (dataItem) {
        return dataItem[field] === name;
      });
      return feature === null || feature === void 0 ? void 0 : feature._id;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeAllListeners();
      this.originData = null;
      this.clusterIndex = null;
      this.data = null;
    }
  }, {
    key: "initCfg",
    value: function initCfg(option) {
      this.cfg = (0, _mergeWith2.default)(this.cfg, option, mergeCustomizer);
      var cfg = this.cfg;

      if (cfg) {
        if (cfg.parser) {
          this.parser = cfg.parser;
        }

        if (cfg.transforms) {
          this.transforms = cfg.transforms;
        }

        this.cluster = cfg.cluster || false;

        if (cfg.clusterOptions) {
          this.cluster = true;
          this.clusterOptions = _objectSpread(_objectSpread({}, this.clusterOptions), cfg.clusterOptions);
        }
      }
    }
  }, {
    key: "excuteParser",
    value: function excuteParser() {
      var parser = this.parser;
      var type = parser.type || 'geojson';
      var sourceParser = (0, _.getParser)(type);
      this.data = sourceParser(this.originData, parser);
      this.extent = (0, _l7Utils.extent)(this.data.dataArray);
    }
  }, {
    key: "executeTrans",
    value: function executeTrans() {
      var _this3 = this;

      var trans = this.transforms;
      trans.forEach(function (tran) {
        var type = tran.type;
        var data = (0, _.getTransform)(type)(_this3.data, tran);
        Object.assign(_this3.data, data);
      });
    }
  }, {
    key: "initCluster",
    value: function initCluster() {
      if (!this.cluster) {
        return;
      }

      var clusterOptions = this.clusterOptions || {};
      this.clusterIndex = (0, _cluster.cluster)(this.data, clusterOptions);
    }
  }, {
    key: "init",
    value: function init() {
      this.hooks.init.call(this);
    }
  }]);
  return Source;
}(_eventemitter.EventEmitter);

exports.default = Source;
//# sourceMappingURL=source.js.map