import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import rewind from '@mapbox/geojson-rewind';
export default function json(data, cfg) {
  var x = cfg.x,
      y = cfg.y,
      x1 = cfg.x1,
      y1 = cfg.y1,
      coordinates = cfg.coordinates;
  var resultData = [];
  data.forEach(function (col, featureIndex) {
    var coords = [];

    if (x && y) {
      coords = [parseFloat(col[x]), parseFloat(col[y])];
    }

    if (x && y && x1 && y1) {
      var from = [parseFloat(col[x]), parseFloat(col[y])];
      var to = [parseFloat(col[x1]), parseFloat(col[y1])];
      coords = [from, to];
    }

    if (coordinates) {
      var type = 'Polygon';

      if (!Array.isArray(coordinates[0])) {
        type = 'Point';
      }

      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {
        type = 'LineString';
      }

      var geometry = {
        type: type,
        coordinates: _toConsumableArray(col[coordinates])
      };
      rewind(geometry, true);
      coords = geometry.coordinates;
    }

    var dataItem = _objectSpread(_objectSpread({}, col), {}, {
      _id: featureIndex,
      coordinates: coords
    });

    resultData.push(dataItem);
  });
  return {
    dataArray: resultData
  };
}
//# sourceMappingURL=json.js.map