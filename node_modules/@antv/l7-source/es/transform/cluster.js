import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import Supercluster from 'supercluster/dist/supercluster';
export function cluster(data, option) {
  var _option$radius = option.radius,
      radius = _option$radius === void 0 ? 40 : _option$radius,
      _option$maxZoom = option.maxZoom,
      maxZoom = _option$maxZoom === void 0 ? 18 : _option$maxZoom,
      _option$minZoom = option.minZoom,
      minZoom = _option$minZoom === void 0 ? 0 : _option$minZoom,
      _option$zoom = option.zoom,
      zoom = _option$zoom === void 0 ? 2 : _option$zoom;

  if (data.pointIndex) {
    var clusterData = data.pointIndex.getClusters(data.extent, Math.floor(zoom));
    data.dataArray = formatData(clusterData);
    return data;
  }

  var pointIndex = new Supercluster({
    radius: radius,
    minZoom: minZoom,
    maxZoom: maxZoom
  });
  var geojson = {
    type: 'FeatureCollection',
    features: []
  };
  geojson.features = data.dataArray.map(function (item) {
    return {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: item.coordinates
      },
      properties: _objectSpread({}, item)
    };
  });
  pointIndex.load(geojson.features);
  return pointIndex;
}
export function formatData(clusterPoint) {
  return clusterPoint.map(function (point, index) {
    return _objectSpread({
      coordinates: point.geometry.coordinates,
      _id: index + 1
    }, point.properties);
  });
}
//# sourceMappingURL=cluster.js.map