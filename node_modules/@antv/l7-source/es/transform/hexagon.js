import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { aProjectFlat, Satistics } from '@antv/l7-utils';
import { hexbin } from 'd3-hexbin';
var R_EARTH = 6378000;
export function pointToHexbin(data, option) {
  var dataArray = data.dataArray;
  var _option$size = option.size,
      size = _option$size === void 0 ? 10 : _option$size,
      _option$method = option.method,
      method = _option$method === void 0 ? 'sum' : _option$method;
  var pixlSize = size / (2 * Math.PI * R_EARTH) * (256 << 20) / 2;
  var screenPoints = dataArray.map(function (point) {
    var _aProjectFlat = aProjectFlat(point.coordinates),
        _aProjectFlat2 = _slicedToArray(_aProjectFlat, 2),
        x = _aProjectFlat2[0],
        y = _aProjectFlat2[1];

    return _objectSpread(_objectSpread({}, point), {}, {
      coordinates: [x, y]
    });
  });
  var newHexbin = hexbin().radius(pixlSize).x(function (d) {
    return d.coordinates[0];
  }).y(function (d) {
    return d.coordinates[1];
  });
  var hexbinBins = newHexbin(screenPoints);
  var result = {
    dataArray: hexbinBins.map(function (hex, index) {
      var _ref;

      if (option.field && method) {
        var columns = Satistics.getColumn(hex, option.field);
        hex[method] = Satistics.statMap[method](columns);
      }

      return _ref = {}, _defineProperty(_ref, option.method, hex[method]), _defineProperty(_ref, "count", hex.length), _defineProperty(_ref, "rawData", hex), _defineProperty(_ref, "coordinates", [hex.x, hex.y]), _defineProperty(_ref, "_id", index), _ref;
    }),
    radius: pixlSize,
    xOffset: pixlSize,
    yOffset: pixlSize,
    type: 'hexagon'
  };
  return result;
}
//# sourceMappingURL=hexagon.js.map