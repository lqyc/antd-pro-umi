{"version":3,"sources":["../../src/transform/hexagon.ts"],"names":["aProjectFlat","Satistics","hexbin","R_EARTH","pointToHexbin","data","option","dataArray","size","method","pixlSize","Math","PI","screenPoints","map","point","coordinates","x","y","newHexbin","radius","d","hexbinBins","result","hex","index","field","columns","getColumn","statMap","length","xOffset","yOffset","type"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,IAAMC,OAAO,GAAG,OAAhB;AAgBA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA0CC,MAA1C,EAA8D;AACnE,MAAMC,SAAS,GAAGF,IAAI,CAACE,SAAvB;AADmE,qBAE7BD,MAF6B,CAE3DE,IAF2D;AAAA,MAE3DA,IAF2D,6BAEpD,EAFoD;AAAA,uBAE7BF,MAF6B,CAEhDG,MAFgD;AAAA,MAEhDA,MAFgD,+BAEvC,KAFuC;AAGnE,MAAMC,QAAQ,GAAKF,IAAI,IAAI,IAAIG,IAAI,CAACC,EAAT,GAAcT,OAAlB,CAAL,IAAoC,OAAO,EAA3C,CAAD,GAAmD,CAApE;AACA,MAAMU,YAAwB,GAAGN,SAAS,CAACO,GAAV,CAAc,UAACC,KAAD,EAA2B;AAAA,wBACzDf,YAAY,CAACe,KAAK,CAACC,WAAP,CAD6C;AAAA;AAAA,QACjEC,CADiE;AAAA,QAC9DC,CAD8D;;AAExE,2CACKH,KADL;AAEEC,MAAAA,WAAW,EAAE,CAACC,CAAD,EAAIC,CAAJ;AAFf;AAID,GANgC,CAAjC;AAQA,MAAMC,SAAS,GAAGjB,MAAM,GACrBkB,MADe,CACRV,QADQ,EAEfO,CAFe,CAEb,UAACI,CAAD;AAAA,WAAiBA,CAAC,CAACL,WAAF,CAAc,CAAd,CAAjB;AAAA,GAFa,EAGfE,CAHe,CAGb,UAACG,CAAD;AAAA,WAAiBA,CAAC,CAACL,WAAF,CAAc,CAAd,CAAjB;AAAA,GAHa,CAAlB;AAIA,MAAMM,UAAU,GAAGH,SAAS,CAACN,YAAD,CAA5B;AAEA,MAAMU,MAAmB,GAAG;AAC1BhB,IAAAA,SAAS,EAAEe,UAAU,CAACR,GAAX,CAAe,UAACU,GAAD,EAA6BC,KAA7B,EAA+C;AAAA;;AACvE,UAAInB,MAAM,CAACoB,KAAP,IAAgBjB,MAApB,EAA4B;AAC1B,YAAMkB,OAAO,GAAG1B,SAAS,CAAC2B,SAAV,CAAoBJ,GAApB,EAAyBlB,MAAM,CAACoB,KAAhC,CAAhB;AACAF,QAAAA,GAAG,CAACf,MAAD,CAAH,GAAcR,SAAS,CAAC4B,OAAV,CAAkBpB,MAAlB,EAA0BkB,OAA1B,CAAd;AACD;;AACD,8CACGrB,MAAM,CAACG,MADV,EACmBe,GAAG,CAACf,MAAD,CADtB,kCAESe,GAAG,CAACM,MAFb,oCAGWN,GAHX,wCAIe,CAACA,GAAG,CAACP,CAAL,EAAQO,GAAG,CAACN,CAAZ,CAJf,gCAKOO,KALP;AAOD,KAZU,CADe;AAc1BL,IAAAA,MAAM,EAAEV,QAdkB;AAe1BqB,IAAAA,OAAO,EAAErB,QAfiB;AAgB1BsB,IAAAA,OAAO,EAAEtB,QAhBiB;AAiB1BuB,IAAAA,IAAI,EAAE;AAjBoB,GAA5B;AAmBA,SAAOV,MAAP;AACD","sourcesContent":["import { aProjectFlat, Satistics } from '@antv/l7-utils';\nimport { hexbin } from 'd3-hexbin';\nconst R_EARTH = 6378000;\nimport {\n  IParseDataItem,\n  IParserData,\n  ISourceCFG,\n  ITransform,\n} from '@antv/l7-core';\ninterface IHexBinItem<T> extends Array<T> {\n  x: number;\n  y: number;\n  [key: string]: any;\n}\ninterface IRawData {\n  coordinates: [number, number];\n  [key: string]: any;\n}\nexport function pointToHexbin(data: IParserData, option: ITransform) {\n  const dataArray = data.dataArray;\n  const { size = 10, method = 'sum' } = option;\n  const pixlSize = ((size / (2 * Math.PI * R_EARTH)) * (256 << 20)) / 2;\n  const screenPoints: IRawData[] = dataArray.map((point: IParseDataItem) => {\n    const [x, y] = aProjectFlat(point.coordinates);\n    return {\n      ...point,\n      coordinates: [x, y],\n    };\n  });\n\n  const newHexbin = hexbin<IRawData>()\n    .radius(pixlSize)\n    .x((d: IRawData) => d.coordinates[0])\n    .y((d: IRawData) => d.coordinates[1]);\n  const hexbinBins = newHexbin(screenPoints);\n\n  const result: IParserData = {\n    dataArray: hexbinBins.map((hex: IHexBinItem<IRawData>, index: number) => {\n      if (option.field && method) {\n        const columns = Satistics.getColumn(hex, option.field);\n        hex[method] = Satistics.statMap[method](columns);\n      }\n      return {\n        [option.method]: hex[method],\n        count: hex.length,\n        rawData: hex,\n        coordinates: [hex.x, hex.y],\n        _id: index,\n      };\n    }),\n    radius: pixlSize,\n    xOffset: pixlSize,\n    yOffset: pixlSize,\n    type: 'hexagon',\n  };\n  return result;\n}\n"],"file":"hexagon.js"}