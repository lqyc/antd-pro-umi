{"version":3,"sources":["../../src/transform/cluster.ts"],"names":["Supercluster","cluster","data","option","radius","maxZoom","minZoom","zoom","pointIndex","clusterData","getClusters","extent","Math","floor","dataArray","formatData","geojson","type","features","map","item","geometry","coordinates","properties","load","clusterPoint","point","index","_id"],"mappings":";;;;;;AAQA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,OAAO,SAASC,OAAT,CACLC,IADK,EAELC,MAFK,EAGQ;AAAA,uBACgDA,MADhD,CACLC,MADK;AAAA,MACLA,MADK,+BACI,EADJ;AAAA,wBACgDD,MADhD,CACQE,OADR;AAAA,MACQA,OADR,gCACkB,EADlB;AAAA,wBACgDF,MADhD,CACsBG,OADtB;AAAA,MACsBA,OADtB,gCACgC,CADhC;AAAA,qBACgDH,MADhD,CACmCI,IADnC;AAAA,MACmCA,IADnC,6BAC0C,CAD1C;;AAEb,MAAIL,IAAI,CAACM,UAAT,EAAqB;AACnB,QAAMC,WAAW,GAAGP,IAAI,CAACM,UAAL,CAAgBE,WAAhB,CAClBR,IAAI,CAACS,MADa,EAElBC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAFkB,CAApB;AAIAL,IAAAA,IAAI,CAACY,SAAL,GAAiBC,UAAU,CAACN,WAAD,CAA3B;AACA,WAAOP,IAAP;AACD;;AACD,MAAMM,UAAU,GAAG,IAAIR,YAAJ,CAAiB;AAClCI,IAAAA,MAAM,EAANA,MADkC;AAElCE,IAAAA,OAAO,EAAPA,OAFkC;AAGlCD,IAAAA,OAAO,EAAPA;AAHkC,GAAjB,CAAnB;AAKA,MAAMW,OAGL,GAAG;AACFC,IAAAA,IAAI,EAAE,mBADJ;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GAHJ;AAOAF,EAAAA,OAAO,CAACE,QAAR,GAAmBhB,IAAI,CAACY,SAAL,CAAeK,GAAf,CAAmB,UAACC,IAAD,EAAU;AAC9C,WAAO;AACLH,MAAAA,IAAI,EAAE,SADD;AAELI,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,IAAI,EAAE,OADE;AAERK,QAAAA,WAAW,EAAEF,IAAI,CAACE;AAFV,OAFL;AAMLC,MAAAA,UAAU,oBACLH,IADK;AANL,KAAP;AAUD,GAXkB,CAAnB;AAYAZ,EAAAA,UAAU,CAACgB,IAAX,CAAgBR,OAAO,CAACE,QAAxB;AACA,SAAOV,UAAP;AACD;AACD,OAAO,SAASO,UAAT,CAAoBU,YAApB,EAAyC;AAC9C,SAAOA,YAAY,CAACN,GAAb,CAAiB,UAACO,KAAD,EAAQC,KAAR,EAAkB;AACxC;AACEL,MAAAA,WAAW,EAAEI,KAAK,CAACL,QAAN,CAAeC,WAD9B;AAEEM,MAAAA,GAAG,EAAED,KAAK,GAAG;AAFf,OAGKD,KAAK,CAACH,UAHX;AAKD,GANM,CAAP;AAOD","sourcesContent":["import {\n  IClusterOptions,\n  IParserData,\n  ISourceCFG,\n  ITransform,\n} from '@antv/l7-core';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nexport function cluster(\n  data: IParserData,\n  option: Partial<IClusterOptions>,\n): IParserData {\n  const { radius = 40, maxZoom = 18, minZoom = 0, zoom = 2 } = option;\n  if (data.pointIndex) {\n    const clusterData = data.pointIndex.getClusters(\n      data.extent,\n      Math.floor(zoom),\n    );\n    data.dataArray = formatData(clusterData);\n    return data;\n  }\n  const pointIndex = new Supercluster({\n    radius,\n    minZoom,\n    maxZoom,\n  });\n  const geojson: {\n    type: string;\n    features: any[];\n  } = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n  geojson.features = data.dataArray.map((item) => {\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: item.coordinates,\n      },\n      properties: {\n        ...item,\n      },\n    };\n  });\n  pointIndex.load(geojson.features);\n  return pointIndex;\n}\nexport function formatData(clusterPoint: any[]) {\n  return clusterPoint.map((point, index) => {\n    return {\n      coordinates: point.geometry.coordinates,\n      _id: index + 1,\n      ...point.properties,\n    };\n  });\n}\n"],"file":"cluster.js"}