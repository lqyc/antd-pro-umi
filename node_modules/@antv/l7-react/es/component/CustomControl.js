function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { Control } from '@antv/l7';
import * as React from 'react';
import { createPortal } from 'react-dom';
import { useSceneValue } from './SceneContext';
var useEffect = React.useEffect,
    useState = React.useState;
export default function CustomControl(props) {
  var className = props.className,
      style = props.style,
      children = props.children,
      position = props.position;
  var mapScene = useSceneValue();

  var _useState = useState(function () {
    return document.createElement('div');
  }),
      _useState2 = _slicedToArray(_useState, 1),
      el = _useState2[0];

  useEffect(function () {
    var custom = new Control({
      position: position
    });

    custom.onAdd = function () {
      if (className) {
        el.className = className;
      }

      if (style) {
        var cssText = Object.keys(style).map(function (key) {
          // @ts-ignore
          return "".concat(key, ":").concat(style[key]);
        }).join(';');
        el.style.cssText = cssText;
      }

      return el;
    };

    mapScene.addControl(custom);
    return function () {
      mapScene.removeControl(custom);
    };
  }, []);
  return /*#__PURE__*/createPortal(children, el);
}