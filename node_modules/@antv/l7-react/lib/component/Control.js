"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _l = require("@antv/l7");

var _react = _interopRequireWildcard(require("react"));

var _SceneContext = require("./SceneContext");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = /*#__PURE__*/_react.default.memo(function MapControl(props) {
  var scene = (0, _SceneContext.useSceneValue)();
  var control = (0, _react.useRef)();
  var type = props.type,
      position = props.position;
  (0, _react.useEffect)(function () {
    var ctr;

    switch (type) {
      case 'scale':
        ctr = new _l.Scale({
          position: position || 'bottomright'
        });
        break;

      case 'zoom':
        ctr = new _l.Zoom({
          position: position || 'topright'
        });
        break;

      case 'logo':
        ctr = new _l.Logo({
          position: position || 'bottomleft'
        });
    }

    control.current = ctr;
    scene.addControl(ctr);
    return function () {
      control.current = undefined;
      scene.removeControl(ctr);
    };
  }, [type]);
  (0, _react.useEffect)(function () {
    control.current && control.current.setPosition(position);
  }, [position]);
  return null;
});

exports.default = _default;