/**
 * MapboxService
 */
import { Bounds, ILngLat, IMapService, IMercator, IPoint, IStatusOptions, IViewport } from '@antv/l7-core';
import mapboxgl, { Map } from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { IMapboxInstance } from '../../typings/index';
/**
 * AMapService
 */
export default class MapboxService implements IMapService<Map & IMapboxInstance> {
    map: Map & IMapboxInstance;
    private readonly config;
    private readonly configService;
    private readonly logger;
    private readonly coordinateSystemService;
    private eventEmitter;
    private viewport;
    private markerContainer;
    private cameraChangedCallback;
    private $mapContainer;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    on(type: string, handle: (...args: any[]) => void): void;
    off(type: string, handle: (...args: any[]) => void): void;
    getContainer(): HTMLElement | null;
    getMapCanvasContainer(): HTMLElement;
    getSize(): [number, number];
    getType(): string;
    getZoom(): number;
    setZoom(zoom: number): mapboxgl.Map & IMapboxInstance;
    getCenter(): ILngLat;
    setCenter(lnglat: [number, number]): void;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMinZoom(): number;
    getMaxZoom(): number;
    setRotation(rotation: number): void;
    zoomIn(option?: any, eventData?: any): void;
    zoomOut(option?: any, eventData?: any): void;
    setPitch(pitch: number): mapboxgl.Map & IMapboxInstance;
    panTo(p: [number, number]): void;
    panBy(pixel: [number, number]): void;
    fitBounds(bound: Bounds, fitBoundsOptions?: unknown): void;
    setMaxZoom(max: number): void;
    setMinZoom(min: number): void;
    setMapStatus(option: Partial<IStatusOptions>): void;
    setZoomAndCenter(zoom: number, center: [number, number]): void;
    setMapStyle(style: any): void;
    pixelToLngLat(pixel: [number, number]): ILngLat;
    lngLatToPixel(lnglat: [number, number]): IPoint;
    containerToLngLat(pixel: [number, number]): ILngLat;
    lngLatToContainer(lnglat: [number, number]): IPoint;
    lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number], origin?: IMercator): number[];
    init(): Promise<void>;
    destroy(): void;
    emit(name: string, ...args: any[]): void;
    once(name: string, ...args: any[]): void;
    getMapContainer(): HTMLElement | null;
    exportMap(type: 'jpg' | 'png'): string;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    private handleCameraChanged;
    private creatAmapContainer;
    private getMapStyle;
}
