import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { mat4, vec3 } from 'gl-matrix';
var DEGREES_TO_RADIANS = Math.PI / 180;

var Viewport = function () {
  function Viewport() {
    _classCallCheck(this, Viewport);

    this.projectionMatrix = mat4.create();
    this.viewMatrix = mat4.create();
    this.viewProjectionMatrix = mat4.create();
    this.ViewProjectionMatrixUncentered = mat4.create();
    this.viewUncenteredMatrix = mat4.create();
    this.zoom = void 0;
    this.center = void 0;
  }

  _createClass(Viewport, [{
    key: "syncWithMapCamera",
    value: function syncWithMapCamera(mapCamera) {
      var _mapCamera$zoom = mapCamera.zoom,
          zoom = _mapCamera$zoom === void 0 ? 1 : _mapCamera$zoom,
          _mapCamera$pitch = mapCamera.pitch,
          pitch = _mapCamera$pitch === void 0 ? 0 : _mapCamera$pitch,
          _mapCamera$bearing = mapCamera.bearing,
          bearing = _mapCamera$bearing === void 0 ? 0 : _mapCamera$bearing,
          _mapCamera$center = mapCamera.center,
          center = _mapCamera$center === void 0 ? [0, 0] : _mapCamera$center,
          _mapCamera$offsetOrig = mapCamera.offsetOrigin,
          offsetOrigin = _mapCamera$offsetOrig === void 0 ? [0, 0] : _mapCamera$offsetOrig,
          _mapCamera$cameraHeig = mapCamera.cameraHeight,
          cameraHeight = _mapCamera$cameraHeig === void 0 ? 1 : _mapCamera$cameraHeig,
          _mapCamera$aspect = mapCamera.aspect,
          aspect = _mapCamera$aspect === void 0 ? 1 : _mapCamera$aspect,
          _mapCamera$near = mapCamera.near,
          near = _mapCamera$near === void 0 ? 0.1 : _mapCamera$near,
          _mapCamera$far = mapCamera.far,
          far = _mapCamera$far === void 0 ? 1000 : _mapCamera$far,
          _mapCamera$fov = mapCamera.fov,
          fov = _mapCamera$fov === void 0 ? 0 : _mapCamera$fov;
      this.zoom = zoom;
      this.center = center;
      var pitchInRadians = pitch * DEGREES_TO_RADIANS;
      var rotationInRadians = (360 - bearing) * DEGREES_TO_RADIANS;
      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);
      var eye = vec3.fromValues(cameraHeight * Math.sin(pitchInRadians) * Math.sin(rotationInRadians), -cameraHeight * Math.sin(pitchInRadians) * Math.cos(rotationInRadians), cameraHeight * Math.cos(pitchInRadians));
      var up = vec3.fromValues(-Math.cos(pitchInRadians) * Math.sin(rotationInRadians), Math.cos(pitchInRadians) * Math.cos(rotationInRadians), Math.sin(pitchInRadians));
      mat4.lookAt(this.viewMatrix, eye, vec3.fromValues(0, 0, 0), up);
      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);
      mat4.translate(this.viewMatrix, this.viewMatrix, vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0));
      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);
      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.zoom;
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return 524288;
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      var _this$center = _slicedToArray(this.center, 2),
          lng = _this$center[0],
          lat = _this$center[1];

      return [lng, lat];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      return this.projectionMatrix;
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewMatrix;
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewUncenteredMatrix;
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.viewProjectionMatrix;
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.ViewProjectionMatrixUncentered;
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return 1;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      var maxs = 85.0511287798;
      var lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);
      var zoomScale = 256 << 20;
      var d = Math.PI / 180;
      var x = lngLat[0] * d;
      var y = lat * d;
      y = Math.log(Math.tan(Math.PI / 4 + y / 2));
      var a = 0.5 / Math.PI;
      var b = 0.5;
      var c = -0.5 / Math.PI;
      d = 0.5;
      x = zoomScale * (a * x + b) - 215440491;
      y = -(zoomScale * (c * y + d) - 106744817);
      return [x, y];
    }
  }]);

  return Viewport;
}();

export { Viewport as default };
//# sourceMappingURL=Viewport.js.map