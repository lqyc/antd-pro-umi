/// <reference types="amap-js-api" />
import { Bounds, ILngLat, IMapService, IMercator, IPoint, IStatusOptions, IViewport } from '@antv/l7-core';
import { IAMapInstance } from '../../typings/index';
import './logo.css';
/**
 * AMapService
 */
export default class AMapService implements IMapService<AMap.Map & IAMapInstance> {
    /**
     * 原始地图实例
     */
    map: AMap.Map & IAMapInstance;
    private readonly configService;
    private readonly logger;
    private readonly config;
    private readonly coordinateSystemService;
    private eventEmitter;
    private markerContainer;
    private $mapContainer;
    private viewport;
    private cameraChangedCallback;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    on(type: string, handler: (...args: any[]) => void): void;
    off(type: string, handler: (...args: any[]) => void): void;
    getContainer(): HTMLElement | null;
    getMapCanvasContainer(): HTMLElement;
    getSize(): [number, number];
    getType(): string;
    getZoom(): number;
    setZoom(zoom: number): void;
    getCenter(): ILngLat;
    setCenter(lnglat: [number, number]): void;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMinZoom(): number;
    getMaxZoom(): number;
    setRotation(rotation: number): void;
    setPitch(pitch: number): void;
    zoomIn(): void;
    zoomOut(): void;
    panTo(p: [number, number]): void;
    panBy(pixel: [number, number]): void;
    fitBounds(extent: Bounds): void;
    setZoomAndCenter(zoom: number, center: [number, number]): void;
    setMapStyle(style: string): void;
    setMapStatus(option: Partial<IStatusOptions>): void;
    pixelToLngLat(pixel: [number, number]): ILngLat;
    lngLatToPixel(lnglat: [number, number]): IPoint;
    containerToLngLat(pixel: [number, number]): ILngLat;
    lngLatToContainer(lnglat: [number, number]): IPoint;
    lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number], origin?: IMercator): number[];
    init(): Promise<void>;
    exportMap(type: 'jpg' | 'png'): string;
    emit(name: string, ...args: any[]): void;
    once(name: string, ...args: any[]): void;
    destroy(): void;
    getMapContainer(): HTMLElement | null;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    private handleCameraChanged;
    private getMapStyle;
    private creatAmapContainer;
}
