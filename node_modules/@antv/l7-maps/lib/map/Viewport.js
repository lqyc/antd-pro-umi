"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));

var Viewport = function () {
  function Viewport() {
    (0, _classCallCheck2.default)(this, Viewport);
    this.viewport = void 0;
  }

  (0, _createClass2.default)(Viewport, [{
    key: "syncWithMapCamera",
    value: function syncWithMapCamera(mapCamera) {
      var center = mapCamera.center,
          zoom = mapCamera.zoom,
          pitch = mapCamera.pitch,
          bearing = mapCamera.bearing,
          viewportHeight = mapCamera.viewportHeight,
          viewportWidth = mapCamera.viewportWidth;
      this.viewport = new _viewportMercatorProject.default({
        width: viewportWidth,
        height: viewportHeight,
        longitude: center && center[0],
        latitude: center && center[1],
        zoom: zoom,
        pitch: pitch,
        bearing: bearing
      });
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.viewport.zoom;
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return Math.pow(2, this.getZoom());
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return [this.viewport.longitude, this.viewport.latitude];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      return this.viewport.projectionMatrix;
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewport.viewMatrix;
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewport.viewMatrixUncentered;
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.viewport.viewProjectionMatrix;
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.viewport.viewProjectionMatrix;
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return 1;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      return this.viewport.projectFlat(lngLat, scale);
    }
  }]);
  return Viewport;
}();

exports.default = Viewport;
//# sourceMappingURL=Viewport.js.map