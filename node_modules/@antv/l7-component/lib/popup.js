"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _eventemitter = require("eventemitter3");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Popup = function (_EventEmitter) {
  (0, _inherits2.default)(Popup, _EventEmitter);

  var _super = _createSuper(Popup);

  function Popup(cfg) {
    var _this;

    (0, _classCallCheck2.default)(this, Popup);
    _this = _super.call(this);
    _this.popupOption = void 0;
    _this.mapsService = void 0;
    _this.sceneSerive = void 0;
    _this.lngLat = void 0;
    _this.content = void 0;
    _this.closeButton = void 0;
    _this.timeoutInstance = void 0;
    _this.container = void 0;
    _this.tip = void 0;
    _this.scene = void 0;
    _this.popupOption = _objectSpread(_objectSpread({}, _this.getdefault()), cfg);
    (0, _l7Utils.bindAll)(['update', 'onClickClose', 'remove'], (0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Popup, [{
    key: "addTo",
    value: function addTo(scene) {
      var _this2 = this;

      this.mapsService = scene.get(_l7Core.TYPES.IMapService);
      this.sceneSerive = scene.get(_l7Core.TYPES.ISceneService);
      this.mapsService.on('camerachange', this.update);
      this.scene = scene;
      this.update();

      if (this.popupOption.closeOnClick) {
        this.timeoutInstance = setTimeout(function () {
          _this2.mapsService.on('click', _this2.onClickClose);
        }, 30);
      }

      this.emit('open');
      return this;
    }
  }, {
    key: "close",
    value: function close() {
      this.remove();
    }
  }, {
    key: "open",
    value: function open() {
      this.addTo(this.scene);
    }
  }, {
    key: "setHTML",
    value: function setHTML(html) {
      var frag = window.document.createDocumentFragment();
      var temp = window.document.createElement('body');
      var child;
      temp.innerHTML = html;

      while (true) {
        child = temp.firstChild;

        if (!child) {
          break;
        }

        frag.appendChild(child);
      }

      return this.setDOMContent(frag);
    }
  }, {
    key: "setLnglat",
    value: function setLnglat(lngLat) {
      this.lngLat = lngLat;

      if (Array.isArray(lngLat)) {
        this.lngLat = {
          lng: lngLat[0],
          lat: lngLat[1]
        };
      }

      if (this.mapsService) {
        this.mapsService.on('camerachange', this.update);
      }

      this.update();
      return this;
    }
  }, {
    key: "getLnglat",
    value: function getLnglat() {
      return this.lngLat;
    }
  }, {
    key: "setText",
    value: function setText(text) {
      return this.setDOMContent(window.document.createTextNode(text));
    }
  }, {
    key: "setMaxWidth",
    value: function setMaxWidth(maxWidth) {
      this.popupOption.maxWidth = maxWidth;
      this.update();
      return this;
    }
  }, {
    key: "setDOMContent",
    value: function setDOMContent(htmlNode) {
      this.createContent();
      this.content.appendChild(htmlNode);
      this.update();
      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.content) {
        this.removeDom(this.content);
      }

      if (this.container) {
        this.removeDom(this.container);
        delete this.container;
      }

      if (this.mapsService) {
        this.mapsService.off('camerachange', this.update);
        this.mapsService.off('click', this.onClickClose);
        delete this.mapsService;
      }

      clearTimeout(this.timeoutInstance);
      this.emit('close');
      return this;
    }
  }, {
    key: "isOpen",
    value: function isOpen() {
      return !!this.mapsService;
    }
  }, {
    key: "createContent",
    value: function createContent() {
      if (this.content) {
        _l7Utils.DOM.remove(this.content);
      }

      this.content = _l7Utils.DOM.create('div', 'l7-popup-content', this.container);

      if (this.popupOption.closeButton) {
        this.closeButton = _l7Utils.DOM.create('button', 'l7-popup-close-button', this.content);
        this.closeButton.setAttribute('aria-label', 'Close popup');
        this.closeButton.innerHTML = '&#215;';
        this.closeButton.addEventListener('click', this.onClickClose);
      }
    }
  }, {
    key: "creatDom",
    value: function creatDom(tagName, className, container) {
      var el = window.document.createElement(tagName);

      if (className !== undefined) {
        el.className = className;
      }

      if (container) {
        container.appendChild(el);
      }

      return el;
    }
  }, {
    key: "removeDom",
    value: function removeDom(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }
  }, {
    key: "getdefault",
    value: function getdefault() {
      return {
        closeButton: true,
        closeOnClick: true,
        maxWidth: '240px',
        offsets: [0, 0],
        anchor: _l7Utils.anchorType.BOTTOM,
        className: '',
        stopPropagation: true
      };
    }
  }, {
    key: "onClickClose",
    value: function onClickClose(e) {
      if (e.stopPropagation) {
        e.stopPropagation();
      }

      this.remove();
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      var hasPosition = this.lngLat;
      var _this$popupOption = this.popupOption,
          className = _this$popupOption.className,
          maxWidth = _this$popupOption.maxWidth,
          anchor = _this$popupOption.anchor;

      if (!this.mapsService || !hasPosition || !this.content) {
        return;
      }

      var popupContainer = this.mapsService.getMarkerContainer();

      if (!this.container && popupContainer) {
        this.container = this.creatDom('div', 'l7-popup', popupContainer);
        this.tip = this.creatDom('div', 'l7-popup-tip', this.container);
        this.container.appendChild(this.content);

        if (className) {
          className.split(' ').forEach(function (name) {
            return _this3.container.classList.add(name);
          });
        }

        var stopPropagation = this.popupOption.stopPropagation;

        if (stopPropagation) {
          ['mousemove', 'mousedown', 'mouseup', 'click', 'dblclick'].forEach(function (type) {
            _this3.container.addEventListener(type, function (e) {
              e.stopPropagation();
            });
          });
        }
      }

      if (maxWidth && this.container.style.maxWidth !== maxWidth) {
        this.container.style.maxWidth = maxWidth;
      }

      this.updatePosition();

      _l7Utils.DOM.setTransform(this.container, "".concat(_l7Utils.anchorTranslate[anchor]));

      (0, _l7Utils.applyAnchorClass)(this.container, anchor, 'popup');
    }
  }, {
    key: "updatePosition",
    value: function updatePosition() {
      if (!this.mapsService) {
        return;
      }

      var _this$lngLat = this.lngLat,
          lng = _this$lngLat.lng,
          lat = _this$lngLat.lat;
      var offsets = this.popupOption.offsets;
      var pos = this.mapsService.lngLatToContainer([lng, lat]);
      this.container.style.left = pos.x + offsets[0] + 'px';
      this.container.style.top = pos.y - offsets[1] + 'px';
    }
  }]);
  return Popup;
}(_eventemitter.EventEmitter);

exports.default = Popup;
//# sourceMappingURL=popup.js.map