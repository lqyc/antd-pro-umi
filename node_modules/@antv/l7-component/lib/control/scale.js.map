{"version":3,"sources":["../../src/control/scale.ts"],"names":["Scale","cfg","mScale","iScale","position","PositionType","BOTTOMLEFT","maxWidth","metric","updateWhenIdle","imperial","name","className","container","DOM","create","addScales","controlOption","mapsService","on","update","off","y","getSize","p1","containerToLngLat","p2","maxMeters","lng","lat","updateScales","updateMetric","updateImperial","meters","getRoundNum","label","updateScale","maxFeet","maxMiles","miles","feet","scale","text","ratio","style","width","Math","round","innerHTML","num","pow10","pow","floor","length","d","Control"],"mappings":"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","sourcesContent":["import { IControlOption } from '@antv/l7-core';\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\n\nimport Control, { PositionType } from './BaseControl';\nexport interface IScaleControlOption extends IControlOption {\n  maxWidth: number;\n  metric: boolean;\n  updateWhenIdle: boolean;\n  imperial: boolean;\n}\nexport default class Scale extends Control {\n  private mScale: HTMLElement;\n  private iScale: HTMLElement;\n  constructor(cfg?: Partial<IScaleControlOption>) {\n    super(cfg);\n    bindAll(['update'], this);\n  }\n\n  public getDefault() {\n    return {\n      position: PositionType.BOTTOMLEFT,\n      maxWidth: 100,\n      metric: true,\n      updateWhenIdle: false,\n      imperial: false,\n      name: 'scale',\n    };\n  }\n\n  public onAdd() {\n    const className = 'l7-control-scale';\n    const container = DOM.create('div', className);\n    this.addScales(className + '-line', container);\n    const { updateWhenIdle } = this.controlOption;\n    // TODO: 高德地图和MapBox地图事件不一致问题\n    // 高德zoomchange\n    this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    this.mapsService.on(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n    this.update();\n\n    return container;\n  }\n  public onRemove() {\n    const { updateWhenIdle } = this.controlOption;\n    this.mapsService.off(\n      updateWhenIdle ? 'zoomend' : 'zoomchange',\n      this.update,\n    );\n    this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n  }\n  public update() {\n    const mapsService = this.mapsService;\n    const { maxWidth } = this.controlOption;\n    const y = mapsService.getSize()[1] / 2;\n\n    const p1 = mapsService.containerToLngLat([0, y]);\n    const p2 = mapsService.containerToLngLat([maxWidth, y]);\n    const maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n    this.updateScales(maxMeters);\n  }\n  public updateScales(maxMeters: number) {\n    const { metric, imperial } = this.controlOption;\n    if (metric && maxMeters) {\n      this.updateMetric(maxMeters);\n    }\n    if (imperial && maxMeters) {\n      this.updateImperial(maxMeters);\n    }\n  }\n  private updateMetric(maxMeters: number) {\n    const meters = this.getRoundNum(maxMeters);\n    const label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n    this.updateScale(this.mScale, label, meters / maxMeters);\n  }\n  private updateImperial(maxMeters: number) {\n    const maxFeet = maxMeters * 3.2808399;\n    let maxMiles: number;\n    let miles: number;\n    let feet: number;\n\n    if (maxFeet > 5280) {\n      maxMiles = maxFeet / 5280;\n      miles = this.getRoundNum(maxMiles);\n      this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n    } else {\n      feet = this.getRoundNum(maxFeet);\n      this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n    }\n  }\n  private updateScale(scale: HTMLElement, text: string, ratio: number) {\n    const { maxWidth } = this.controlOption;\n    scale.style.width = Math.round(maxWidth * ratio) + 'px';\n    scale.innerHTML = text;\n  }\n  private getRoundNum(num: number) {\n    const pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n    let d = num / pow10;\n\n    d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n\n    return pow10 * d;\n  }\n  private addScales(className: string, container: HTMLElement) {\n    const { metric, imperial } = this.controlOption;\n    if (metric) {\n      this.mScale = DOM.create('div', className, container);\n    }\n    if (imperial) {\n      this.iScale = DOM.create('div', className, container);\n    }\n  }\n}\n"],"file":"scale.js"}