"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PositionType = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _eventemitter = require("eventemitter3");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PositionType;
exports.PositionType = PositionType;

(function (PositionType) {
  PositionType["TOPRIGHT"] = "topright";
  PositionType["TOPLEFT"] = "topleft";
  PositionType["BOTTOMRIGHT"] = "bottomright";
  PositionType["BOTTOMLEFT"] = "bottomleft";
})(PositionType || (exports.PositionType = PositionType = {}));

var controlId = 0;

var Control = function (_EventEmitter) {
  (0, _inherits2.default)(Control, _EventEmitter);

  var _super = _createSuper(Control);

  function Control(cfg) {
    var _this;

    (0, _classCallCheck2.default)(this, Control);
    _this = _super.call(this);
    _this.controlOption = void 0;
    _this.container = void 0;
    _this.sceneContainer = void 0;
    _this.mapsService = void 0;
    _this.renderService = void 0;
    _this.layerService = void 0;
    _this.controlService = void 0;
    _this.isShow = void 0;
    _this.controlOption = _objectSpread(_objectSpread({}, _this.getDefault()), cfg || {});
    return _this;
  }

  (0, _createClass2.default)(Control, [{
    key: "getDefault",
    value: function getDefault() {
      return {
        position: PositionType.TOPRIGHT,
        name: "".concat(controlId++)
      };
    }
  }, {
    key: "setPosition",
    value: function setPosition(position) {
      var controlService = this.controlService;

      if (controlService) {
        controlService.removeControl(this);
      }

      this.controlOption.position = position;

      if (controlService) {
        controlService.addControl(this, this.sceneContainer);
      }

      return this;
    }
  }, {
    key: "addTo",
    value: function addTo(sceneContainer) {
      this.mapsService = sceneContainer.get(_l7Core.TYPES.IMapService);
      this.renderService = sceneContainer.get(_l7Core.TYPES.IRendererService);
      this.layerService = sceneContainer.get(_l7Core.TYPES.ILayerService);
      this.controlService = sceneContainer.get(_l7Core.TYPES.IControlService);
      this.sceneContainer = sceneContainer;
      this.isShow = true;
      this.container = this.onAdd();
      var container = this.container;
      var pos = this.controlOption.position;
      var corner = this.controlService.controlCorners[pos];

      _l7Utils.DOM.addClass(container, 'l7-control');

      if (pos.indexOf('bottom') !== -1) {
        corner.insertBefore(container, corner.firstChild);
      } else {
        corner.appendChild(container);
      }

      return this;
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "hide",
    value: function hide() {
      var container = this.container;

      _l7Utils.DOM.addClass(container, 'l7-control-hide');

      this.isShow = false;
    }
  }, {
    key: "show",
    value: function show() {
      var container = this.container;

      _l7Utils.DOM.removeClass(container, 'l7-control-hide');

      this.isShow = true;
    }
  }, {
    key: "remove",
    value: function remove() {
      if (!this.mapsService) {
        return this;
      }

      _l7Utils.DOM.remove(this.container);

      this.onRemove();
    }
  }, {
    key: "_refocusOnMap",
    value: function _refocusOnMap(e) {
      if (this.mapsService && e && e.screenX > 0 && e.screenY > 0) {
        var container = this.mapsService.getContainer();

        if (container !== null) {
          container.focus();
        }
      }
    }
  }]);
  return Control;
}(_eventemitter.EventEmitter);

exports.default = Control;
//# sourceMappingURL=BaseControl.js.map