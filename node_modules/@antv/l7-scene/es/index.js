import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { Logo } from '@antv/l7-component';
import { createLayerContainer, createSceneContainer, SceneEventList, TYPES } from '@antv/l7-core';
import { ReglRendererService } from '@antv/l7-renderer';
import { DOM } from '@antv/l7-utils';

var Scene = function () {
  function Scene(config) {
    _classCallCheck(this, Scene);

    this.sceneService = void 0;
    this.mapService = void 0;
    this.controlService = void 0;
    this.layerService = void 0;
    this.iconService = void 0;
    this.markerService = void 0;
    this.popupService = void 0;
    this.fontService = void 0;
    this.interactionService = void 0;
    this.container = void 0;
    var id = config.id,
        map = config.map;
    var sceneContainer = createSceneContainer();
    this.container = sceneContainer;
    map.setContainer(sceneContainer, id);
    sceneContainer.bind(TYPES.IRendererService).to(ReglRendererService).inSingletonScope();
    this.sceneService = sceneContainer.get(TYPES.ISceneService);
    this.mapService = sceneContainer.get(TYPES.IMapService);
    this.iconService = sceneContainer.get(TYPES.IIconService);
    this.fontService = sceneContainer.get(TYPES.IFontService);
    this.controlService = sceneContainer.get(TYPES.IControlService);
    this.layerService = sceneContainer.get(TYPES.ILayerService);
    this.markerService = sceneContainer.get(TYPES.IMarkerService);
    this.interactionService = sceneContainer.get(TYPES.IInteractionService);
    this.popupService = sceneContainer.get(TYPES.IPopupService);
    this.initComponent(id);
    this.sceneService.init(config);
    this.initControl();
  }

  _createClass(Scene, [{
    key: "getServiceContainer",
    value: function getServiceContainer() {
      return this.container;
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return this.mapService.getSize();
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      return this.mapService.getMinZoom();
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      return this.mapService.getMaxZoom();
    }
  }, {
    key: "getType",
    value: function getType() {
      return this.mapService.getType();
    }
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.mapService.getMapContainer();
    }
  }, {
    key: "getMapCanvasContainer",
    value: function getMapCanvasContainer() {
      return this.mapService.getMapCanvasContainer();
    }
  }, {
    key: "getMapService",
    value: function getMapService() {
      return this.mapService;
    }
  }, {
    key: "exportPng",
    value: function exportPng(type) {
      return this.sceneService.exportPng(type);
    }
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      return this.sceneService.exportPng(type);
    }
  }, {
    key: "registerRenderService",
    value: function registerRenderService(render) {
      var _this = this;

      if (this.sceneService.loaded) {
        var renderSerivce = new render(this);
        renderSerivce.init();
      } else {
        this.on('loaded', function () {
          var renderSerivce = new render(_this);
          renderSerivce.init();
        });
      }
    }
  }, {
    key: "map",
    get: function get() {
      return this.mapService.map;
    }
  }, {
    key: "addLayer",
    value: function addLayer(layer) {
      var layerContainer = createLayerContainer(this.container);
      layer.setContainer(layerContainer);
      this.sceneService.addLayer(layer);
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.layerService.getLayers();
    }
  }, {
    key: "getLayer",
    value: function getLayer(id) {
      return this.layerService.getLayer(id);
    }
  }, {
    key: "getLayerByName",
    value: function getLayerByName(name) {
      return this.layerService.getLayerByName(name);
    }
  }, {
    key: "removeLayer",
    value: function removeLayer(layer) {
      this.layerService.remove(layer);
    }
  }, {
    key: "removeAllLayer",
    value: function removeAllLayer() {
      this.layerService.removeAllLayers();
    }
  }, {
    key: "render",
    value: function render() {
      this.sceneService.render();
    }
  }, {
    key: "addImage",
    value: function addImage(id, img) {
      this.iconService.addImage(id, img);
    }
  }, {
    key: "hasImage",
    value: function hasImage(id) {
      return this.iconService.hasImage(id);
    }
  }, {
    key: "removeImage",
    value: function removeImage(id) {
      this.iconService.removeImage(id);
    }
  }, {
    key: "addIconFontGlyphs",
    value: function addIconFontGlyphs(fontFamily, glyphs) {
      this.fontService.addIconGlyphs(glyphs);
    }
  }, {
    key: "addControl",
    value: function addControl(ctr) {
      this.controlService.addControl(ctr, this.container);
    }
  }, {
    key: "removeControl",
    value: function removeControl(ctr) {
      this.controlService.removeControl(ctr);
    }
  }, {
    key: "getControlByName",
    value: function getControlByName(name) {
      return this.controlService.getControlByName(name);
    }
  }, {
    key: "addMarker",
    value: function addMarker(marker) {
      this.markerService.addMarker(marker);
    }
  }, {
    key: "addMarkerLayer",
    value: function addMarkerLayer(layer) {
      this.markerService.addMarkerLayer(layer);
    }
  }, {
    key: "removeMarkerLayer",
    value: function removeMarkerLayer(layer) {
      this.markerService.removeMarkerLayer(layer);
    }
  }, {
    key: "removeAllMakers",
    value: function removeAllMakers() {
      this.markerService.removeAllMarkers();
    }
  }, {
    key: "addPopup",
    value: function addPopup(popup) {
      this.popupService.addPopup(popup);
    }
  }, {
    key: "on",
    value: function on(type, handle) {
      SceneEventList.indexOf(type) === -1 ? this.mapService.on(type, handle) : this.sceneService.on(type, handle);
    }
  }, {
    key: "off",
    value: function off(type, handle) {
      SceneEventList.indexOf(type) === -1 ? this.mapService.off(type, handle) : this.sceneService.off(type, handle);
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.mapService.getZoom();
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return this.mapService.getCenter();
    }
  }, {
    key: "setCenter",
    value: function setCenter(center) {
      return this.mapService.setCenter(center);
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return this.mapService.getPitch();
    }
  }, {
    key: "setPitch",
    value: function setPitch(pitch) {
      return this.mapService.setPitch(pitch);
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      return this.mapService.getRotation();
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      return this.mapService.getBounds();
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      this.mapService.setRotation(rotation);
    }
  }, {
    key: "zoomIn",
    value: function zoomIn() {
      this.mapService.zoomIn();
    }
  }, {
    key: "zoomOut",
    value: function zoomOut() {
      this.mapService.zoomOut();
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.mapService.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy(pixel) {
      this.mapService.panBy(pixel);
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.mapService.getContainer();
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      this.mapService.setZoom(zoom);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(bound, options) {
      var _this$sceneService$ge = this.sceneService.getSceneConfig(),
          fitBoundsOptions = _this$sceneService$ge.fitBoundsOptions,
          animate = _this$sceneService$ge.animate;

      this.mapService.fitBounds(bound, options || _objectSpread(_objectSpread({}, fitBoundsOptions), {}, {
        animate: animate
      }));
    }
  }, {
    key: "setZoomAndCenter",
    value: function setZoomAndCenter(zoom, center) {
      this.mapService.setZoomAndCenter(zoom, center);
    }
  }, {
    key: "setMapStyle",
    value: function setMapStyle(style) {
      this.mapService.setMapStyle(style);
    }
  }, {
    key: "setMapStatus",
    value: function setMapStatus(options) {
      this.mapService.setMapStatus(options);
    }
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(pixel) {
      return this.mapService.pixelToLngLat(pixel);
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      return this.mapService.lngLatToPixel(lnglat);
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(pixel) {
      return this.mapService.containerToLngLat(pixel);
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      return this.mapService.lngLatToContainer(lnglat);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.sceneService.destroy();
    }
  }, {
    key: "registerPostProcessingPass",
    value: function registerPostProcessingPass(constructor, name) {
      this.container.bind(TYPES.IPostProcessingPass).to(constructor).whenTargetNamed(name);
    }
  }, {
    key: "initComponent",
    value: function initComponent(id) {
      this.controlService.init({
        container: DOM.getContainer(id)
      }, this.container);
      this.markerService.init(this.container);
      this.popupService.init(this.container);
    }
  }, {
    key: "initControl",
    value: function initControl() {
      var _this$sceneService$ge2 = this.sceneService.getSceneConfig(),
          logoVisible = _this$sceneService$ge2.logoVisible,
          logoPosition = _this$sceneService$ge2.logoPosition;

      if (logoVisible) {
        this.addControl(new Logo({
          position: logoPosition
        }));
      }
    }
  }]);

  return Scene;
}();

export { Scene };
//# sourceMappingURL=index.js.map