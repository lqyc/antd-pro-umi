import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var docStyle = window.document.documentElement.style;
export function getContainer(domId) {
  var $dom = domId;

  if (typeof domId === 'string') {
    $dom = document.getElementById(domId);
  }

  return $dom;
}
export function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
export function splitWords(str) {
  return trim(str).split(/\s+/);
}

function testProp(props) {
  if (!docStyle) {
    return props[0];
  }

  for (var i in props) {
    if (props[i] && props[i] in docStyle) {
      return props[i];
    }
  }

  return props[0];
}

export function create(tagName, className, container) {
  var el = document.createElement(tagName);
  el.className = className || '';

  if (container) {
    container.appendChild(el);
  }

  return el;
}
export function remove(el) {
  var parent = el.parentNode;

  if (parent) {
    parent.removeChild(el);
  }
}
export function addClass(el, name) {
  if (el.classList !== undefined) {
    var classes = splitWords(name);

    for (var i = 0, len = classes.length; i < len; i++) {
      el.classList.add(classes[i]);
    }
  } else if (!hasClass(el, name)) {
    var className = getClass(el);
    setClass(el, (className ? className + ' ' : '') + name);
  }
}
export function removeClass(el, name) {
  if (el.classList !== undefined) {
    el.classList.remove(name);
  } else {
    setClass(el, trim((' ' + getClass(el) + ' ').replace(' ' + name + ' ', ' ')));
  }
}
export function hasClass(el, name) {
  if (el.classList !== undefined) {
    return el.classList.contains(name);
  }

  var className = getClass(el);
  return className.length > 0 && new RegExp('(^|\\s)' + name + '(\\s|$)').test(className);
}
export function setClass(el, name) {
  if (el instanceof HTMLElement) {
    el.className = name;
  } else {
    el.className.baseVal = name;
  }
}
export function getClass(el) {
  if (el instanceof SVGElement) {
    el = el.correspondingElement;
  }

  return el.className.baseVal === undefined ? el.className : el.className.baseVal;
}
export function empty(el) {
  while (el && el.firstChild) {
    el.removeChild(el.firstChild);
  }
}
var transformProp = testProp(['transform', 'WebkitTransform']);
export function setTransform(el, value) {
  el.style[transformProp] = value;
}
export function triggerResize() {
  if (typeof Event === 'function') {
    window.dispatchEvent(new Event('resize'));
  } else {
    var evt = window.document.createEvent('UIEvents');
    evt.initUIEvent('resize', true, false, window, 0);
    window.dispatchEvent(evt);
  }
}
export function printCanvas(canvas) {
  var css = ['padding: ' + (canvas.height / 2 - 8) + 'px ' + canvas.width / 2 + 'px;', 'line-height: ' + canvas.height + 'px;', 'background-image: url(' + canvas.toDataURL() + ');'];
  console.log('%c\n', css.join(''));
}
export function getViewPortScale() {
  var _content;

  var meta = document.querySelector('meta[name="viewport"]');

  if (!meta) {
    return 1;
  }

  var contentItems = (_content = meta.content) === null || _content === void 0 ? void 0 : _content.split(',');
  var scale = contentItems.find(function (item) {
    var _item$split = item.split('='),
        _item$split2 = _slicedToArray(_item$split, 2),
        key = _item$split2[0],
        value = _item$split2[1];

    return key === 'initial-scale';
  });
  return scale ? scale.split('=')[1] * 1 : 1;
}
export var DPR = getViewPortScale() < 1 ? 1 : window.devicePixelRatio;
//# sourceMappingURL=dom.js.map