import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
export var LRUCache = function () {
  function LRUCache() {
    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
    var destroy = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, LRUCache);

    this.limit = void 0;
    this.cache = void 0;
    this.destroy = void 0;
    this.order = void 0;
    this.limit = limit;
    this.destroy = destroy || this.defaultDestroy;
    this.order = [];
    this.clear();
  }

  _createClass(LRUCache, [{
    key: "clear",
    value: function clear() {
      var _this = this;

      this.order.forEach(function (key) {
        _this.delete(key);
      });
      this.cache = {};
      this.order = [];
    }
  }, {
    key: "get",
    value: function get(key) {
      var value = this.cache[key];

      if (value) {
        this.deleteOrder(key);
        this.appendOrder(key);
      }

      return value;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (!this.cache[key]) {
        if (Object.keys(this.cache).length === this.limit) {
          this.delete(this.order[0]);
        }

        this.cache[key] = value;
        this.appendOrder(key);
      } else {
        this.delete(key);
        this.cache[key] = value;
        this.appendOrder(key);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var value = this.cache[key];

      if (value) {
        this.deleteCache(key);
        this.deleteOrder(key);
        this.destroy(value, key);
      }
    }
  }, {
    key: "deleteCache",
    value: function deleteCache(key) {
      delete this.cache[key];
    }
  }, {
    key: "deleteOrder",
    value: function deleteOrder(key) {
      var index = this.order.findIndex(function (o) {
        return o === key;
      });

      if (index >= 0) {
        this.order.splice(index, 1);
      }
    }
  }, {
    key: "appendOrder",
    value: function appendOrder(key) {
      this.order.push(key);
    }
  }, {
    key: "defaultDestroy",
    value: function defaultDestroy(value, key) {
      return null;
    }
  }]);

  return LRUCache;
}();
//# sourceMappingURL=lru_cache.js.map