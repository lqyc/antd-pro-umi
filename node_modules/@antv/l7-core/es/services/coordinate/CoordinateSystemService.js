import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _class, _class2, _descriptor, _temp;

import { mat4, vec4 } from 'gl-matrix';
import { inject, injectable } from 'inversify';
import { TYPES } from '../../types';
import { getDistanceScales } from '../../utils/project';
import { CoordinateSystem } from './ICoordinateSystemService';
var VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
var CoordinateSystemService = (_dec = injectable(), _dec2 = inject(TYPES.ICameraService), _dec(_class = (_class2 = (_temp = function () {
  function CoordinateSystemService() {
    _classCallCheck(this, CoordinateSystemService);

    this.needRefresh = true;

    _initializerDefineProperty(this, "cameraService", _descriptor, this);

    this.coordinateSystem = void 0;
    this.viewportCenter = void 0;
    this.viewportCenterProjection = void 0;
    this.pixelsPerDegree = void 0;
    this.pixelsPerDegree2 = void 0;
    this.pixelsPerMeter = void 0;
  }

  _createClass(CoordinateSystemService, [{
    key: "refresh",
    value: function refresh() {
      var zoom = this.cameraService.getZoom();
      var zoomScale = this.cameraService.getZoomScale();
      var center = this.cameraService.getCenter();

      var _getDistanceScales = getDistanceScales({
        latitude: center[1],
        zoom: zoom
      }),
          pixelsPerMeter = _getDistanceScales.pixelsPerMeter,
          pixelsPerDegree = _getDistanceScales.pixelsPerDegree;

      this.viewportCenter = center;
      this.viewportCenterProjection = [0, 0, 0, 0];
      this.pixelsPerMeter = pixelsPerMeter;
      this.pixelsPerDegree = pixelsPerDegree;
      this.pixelsPerDegree2 = [0, 0, 0];

      if (this.coordinateSystem === CoordinateSystem.LNGLAT || this.coordinateSystem === CoordinateSystem.P20) {
        this.cameraService.setViewProjectionMatrix(undefined);
      } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {
        this.calculateLnglatOffset(center, zoom);
      } else if (this.coordinateSystem === CoordinateSystem.P20_OFFSET) {
        this.calculateLnglatOffset(center, zoom, zoomScale, true);
      }

      this.needRefresh = false;
    }
  }, {
    key: "getCoordinateSystem",
    value: function getCoordinateSystem() {
      return this.coordinateSystem;
    }
  }, {
    key: "setCoordinateSystem",
    value: function setCoordinateSystem(coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
    }
  }, {
    key: "getViewportCenter",
    value: function getViewportCenter() {
      return this.viewportCenter;
    }
  }, {
    key: "getViewportCenterProjection",
    value: function getViewportCenterProjection() {
      return this.viewportCenterProjection;
    }
  }, {
    key: "getPixelsPerDegree",
    value: function getPixelsPerDegree() {
      return this.pixelsPerDegree;
    }
  }, {
    key: "getPixelsPerDegree2",
    value: function getPixelsPerDegree2() {
      return this.pixelsPerDegree2;
    }
  }, {
    key: "getPixelsPerMeter",
    value: function getPixelsPerMeter() {
      return this.pixelsPerMeter;
    }
  }, {
    key: "calculateLnglatOffset",
    value: function calculateLnglatOffset(center, zoom, scale, flipY) {
      var _getDistanceScales2 = getDistanceScales({
        latitude: center[1],
        zoom: zoom,
        scale: scale,
        flipY: flipY,
        highPrecision: true
      }),
          ppm = _getDistanceScales2.pixelsPerMeter,
          ppd = _getDistanceScales2.pixelsPerDegree,
          pixelsPerDegree2 = _getDistanceScales2.pixelsPerDegree2;

      var viewMatrix = this.cameraService.getViewMatrix();
      var projectionMatrix = this.cameraService.getProjectionMatrix();
      var viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);
      var positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));
      this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);
      viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;
      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);
      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
      this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);
      this.pixelsPerMeter = ppm;
      this.pixelsPerDegree = ppd;
      this.pixelsPerDegree2 = pixelsPerDegree2;
    }
  }]);

  return CoordinateSystemService;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cameraService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { CoordinateSystemService as default };
//# sourceMappingURL=CoordinateSystemService.js.map