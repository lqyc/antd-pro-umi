{"version":3,"sources":["../../../src/services/layer/IStyleAttributeService.ts"],"names":["ScaleTypes","StyleScaleType","AttributeType"],"mappings":"AAgBA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAgCZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAsBZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a","sourcesContent":["import {\n  IAttribute,\n  IAttributeInitializationOptions,\n} from '../renderer/IAttribute';\nimport { IBufferInitializationOptions } from '../renderer/IBuffer';\nimport { IElements } from '../renderer/IElements';\nimport { IParseDataItem, IParserData } from '../source/ISourceService';\nimport { ILayer } from './ILayerService';\n\n/**\n * 1. 提供各个 Layer 样式属性初始值的注册服务\n * 2. 当 Layer 通过 style() 改变某些样式属性时，需要感知并标记该属性已经失效，\n *    随后当 Layer 重绘时通过 dirty 标记进行脏检查。重新传入 uniform 或者构建顶点数据（更新 Buffer 中的指定位置）。\n * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/qfuzg8\n */\n\nexport enum ScaleTypes {\n  LINEAR = 'linear',\n  POWER = 'power',\n  LOG = 'log',\n  IDENTITY = 'identity',\n  TIME = 'time',\n  QUANTILE = 'quantile',\n  QUANTIZE = 'quantize',\n  THRESHOLD = 'threshold',\n  CAT = 'cat',\n}\nexport type ScaleTypeName =\n  | 'linear'\n  | 'power'\n  | 'log'\n  | 'identity'\n  | 'time'\n  | 'quantile'\n  | 'quantize'\n  | 'threshold'\n  | 'cat';\n\nexport type ScaleAttributeType = 'color' | 'size' | 'shape';\nexport interface IScale {\n  type: ScaleTypeName;\n  field?: string;\n  ticks?: any[];\n  nice?: boolean;\n  format?: () => any;\n  domain?: any[];\n}\n\nexport enum StyleScaleType {\n  CONSTANT = 'constant',\n  VARIABLE = 'variable',\n}\nexport interface IScaleOption {\n  field?: string;\n  attr?: ScaleAttributeType;\n  type: ScaleTypeName;\n  ticks?: any[];\n  nice?: boolean;\n  format?: () => any;\n  domain?: any[];\n}\nexport interface IScaleOptions {\n  [key: string]: IScale;\n}\nexport interface IStyleScale {\n  scale: any;\n  field: string | number;\n  type: StyleScaleType;\n  option: IScaleOption | undefined;\n}\nexport enum AttributeType {\n  Attribute,\n  InstancedAttribute,\n  Uniform,\n}\n\nexport interface IAnimateOption {\n  enable: boolean;\n  interval?: number;\n  duration?: number;\n  trailLength?: number;\n  repeat?: number;\n  speed?: number;\n  rings?: number;\n}\n\nexport interface IEncodeFeature {\n  color?: Color;\n  size?: number | number[];\n  shape?: string | number;\n  pattern?: string;\n  id?: number;\n  coordinates: Position | Position[] | Position[][];\n  [key: string]: any;\n}\n\nexport interface IVertexAttributeDescriptor\n  extends Omit<IAttributeInitializationOptions, 'buffer'> {\n  /**\n   * attribute name in vertex shader\n   */\n  name: string;\n  /**\n   * 创建 buffer 的参数\n   */\n  buffer: IBufferInitializationOptions;\n  update?: (\n    feature: IEncodeFeature,\n    featureIdx: number,\n    vertex: number[],\n    attributeIdx: number,\n    normal: number[],\n  ) => number[];\n}\n\ntype Position = number[];\ntype Color = [number, number, number, number];\ntype CallBack = (...args: any[]) => any;\nexport type StyleAttributeField = string | string[] | number[];\nexport type StyleAttributeOption = string | number | boolean | any[] | CallBack;\nexport type StyleAttrField = string | string[] | number | number[];\nexport interface IAttributeScale {\n  field: string | number;\n  func: unknown;\n  option: IScaleOption | undefined;\n}\n\nexport interface IStyleAttributeInitializationOptions {\n  name: string;\n  type: AttributeType;\n  scale?: {\n    field: StyleAttributeField;\n    values: unknown[] | string;\n    defaultValues: unknown[] | string;\n    names: string[] | number[];\n    type: StyleScaleType;\n    callback?: (...args: any[]) => [];\n    scalers?: IAttributeScale[];\n  };\n  descriptor: IVertexAttributeDescriptor;\n}\n\nexport interface IFeatureRange {\n  startIndex: number;\n  endIndex: number;\n}\n\nexport interface IStyleAttribute extends IStyleAttributeInitializationOptions {\n  needRescale: boolean;\n  needRemapping: boolean;\n  needRegenerateVertices: boolean;\n  featureRange: IFeatureRange;\n  /**\n   * 保存渲染层 IAttribute 引用\n   */\n  vertexAttribute: IAttribute;\n  mapping?(...params: unknown[]): unknown[];\n  setProps(props: Partial<IStyleAttributeInitializationOptions>): void;\n  resetDescriptor(): void;\n}\n\nexport type Triangulation = (\n  feature: IEncodeFeature,\n) => {\n  vertices: number[];\n  indices: number[];\n  size: number;\n  normals?: number[];\n};\n\nexport interface IStyleAttributeUpdateOptions {\n  featureRange: IFeatureRange;\n}\n\nexport interface IStyleAttributeService {\n  // registerDefaultStyleOptions(\n  //   layerName: string,\n  //   options: ILayerStyleOptions,\n  // ): void;\n  attributesAndIndices: {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  };\n  registerStyleAttribute(\n    options: Partial<IStyleAttributeInitializationOptions>,\n  ): IStyleAttribute;\n  updateStyleAttribute(\n    attributeName: string,\n    attributeOptions: Partial<IStyleAttributeInitializationOptions>,\n    updateOptions: IStyleAttributeUpdateOptions,\n  ): void;\n  getLayerStyleAttributes(): IStyleAttribute[] | undefined;\n  getLayerStyleAttribute(attributeName: string): IStyleAttribute | undefined;\n  getLayerAttributeScale(attributeName: string): any;\n  createAttributesAndIndices(\n    encodedFeatures: IEncodeFeature[],\n    triangulation?: Triangulation,\n  ): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  };\n  /**\n   * 根据 feature range 更新指定属性\n   */\n  updateAttributeByFeatureRange(\n    attributeName: string,\n    features: IEncodeFeature[],\n    startFeatureIdx?: number,\n    endFeatureIdx?: number,\n  ): void;\n  /**\n   * 清除当前管理的所有属性\n   */\n  clearAllAttributes(): void;\n}\n"],"file":"IStyleAttributeService.js"}