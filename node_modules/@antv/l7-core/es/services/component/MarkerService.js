import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class, _temp;

import { injectable } from 'inversify';
import { TYPES } from '../../types';
var MarkerService = (_dec = injectable(), _dec(_class = (_temp = function () {
  function MarkerService() {
    _classCallCheck(this, MarkerService);

    this.container = void 0;
    this.scene = void 0;
    this.mapsService = void 0;
    this.markers = [];
    this.markerLayers = [];
    this.unAddMarkers = [];
    this.unAddMarkerLayers = [];
  }

  _createClass(MarkerService, [{
    key: "addMarkerLayer",
    value: function addMarkerLayer(markerLayer) {
      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
        this.markerLayers.push(markerLayer);
        markerLayer.addTo(this.scene);
      } else {
        this.unAddMarkerLayers.push(markerLayer);
      }
    }
  }, {
    key: "removeMarkerLayer",
    value: function removeMarkerLayer(layer) {
      layer.destroy();
      this.markerLayers.indexOf(layer);
      var markerIndex = this.markerLayers.indexOf(layer);

      if (markerIndex > -1) {
        this.markerLayers.splice(markerIndex, 1);
      }
    }
  }, {
    key: "addMarker",
    value: function addMarker(marker) {
      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
        this.markers.push(marker);
        marker.addTo(this.scene);
      } else {
        this.unAddMarkers.push(marker);
      }
    }
  }, {
    key: "addMarkers",
    value: function addMarkers() {
      var _this = this;

      this.unAddMarkers.forEach(function (marker) {
        marker.addTo(_this.scene);

        _this.markers.push(marker);
      });
      this.unAddMarkers = [];
    }
  }, {
    key: "addMarkerLayers",
    value: function addMarkerLayers() {
      var _this2 = this;

      this.unAddMarkerLayers.forEach(function (markerLayer) {
        _this2.markerLayers.push(markerLayer);

        markerLayer.addTo(_this2.scene);
      });
      this.unAddMarkers = [];
    }
  }, {
    key: "removeMarker",
    value: function removeMarker(marker) {
      marker.remove();
      this.markers.indexOf(marker);
      var markerIndex = this.markers.indexOf(marker);

      if (markerIndex > -1) {
        this.markers.splice(markerIndex, 1);
      }
    }
  }, {
    key: "removeAllMarkers",
    value: function removeAllMarkers() {
      this.destroy();
    }
  }, {
    key: "init",
    value: function init(scene) {
      this.scene = scene;
      this.mapsService = scene.get(TYPES.IMapService);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.markers.forEach(function (marker) {
        marker.remove();
      });
      this.markers = [];
      this.markerLayers.forEach(function (layer) {
        layer.destroy();
      });
      this.markerLayers = [];
    }
  }, {
    key: "removeMakerLayerMarker",
    value: function removeMakerLayerMarker(layer) {
      layer.destroy();
    }
  }]);

  return MarkerService;
}(), _temp)) || _class);
export { MarkerService as default };
//# sourceMappingURL=MarkerService.js.map