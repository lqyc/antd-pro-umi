import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class, _temp;

import { mat4 } from 'gl-matrix';
import { injectable } from 'inversify';
var CameraService = (_dec = injectable(), _dec(_class = (_temp = function () {
  function CameraService() {
    _classCallCheck(this, CameraService);

    this.viewport = void 0;
    this.overridedViewProjectionMatrix = void 0;
    this.jitteredViewProjectionMatrix = void 0;
    this.jitteredProjectionMatrix = void 0;
    this.viewMatrixInverse = void 0;
    this.cameraPosition = void 0;
  }

  _createClass(CameraService, [{
    key: "init",
    value: function init() {}
  }, {
    key: "update",
    value: function update(viewport) {
      this.viewport = viewport;
      this.viewMatrixInverse = mat4.invert(mat4.create(), this.getViewMatrix());
      this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      return this.jitteredProjectionMatrix || this.viewport.getProjectionMatrix();
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewport.getViewMatrix();
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewport.getViewMatrixUncentered();
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.viewport.getViewProjectionMatrixUncentered();
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.overridedViewProjectionMatrix || this.jitteredViewProjectionMatrix || this.viewport.getViewProjectionMatrix();
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.viewport.getZoom();
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return this.viewport.getZoomScale();
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      var _this$viewport$getCen = this.viewport.getCenter(),
          _this$viewport$getCen2 = _slicedToArray(_this$viewport$getCen, 2),
          lng = _this$viewport$getCen2[0],
          lat = _this$viewport$getCen2[1];

      return [lng, lat];
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return this.viewport.getFocalDistance();
    }
  }, {
    key: "getCameraPosition",
    value: function getCameraPosition() {
      return this.cameraPosition;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      return this.viewport.projectFlat(lngLat, scale);
    }
  }, {
    key: "setViewProjectionMatrix",
    value: function setViewProjectionMatrix(viewProjectionMatrix) {
      this.overridedViewProjectionMatrix = viewProjectionMatrix;
    }
  }, {
    key: "jitterProjectionMatrix",
    value: function jitterProjectionMatrix(x, y) {
      var translation = mat4.fromTranslation(mat4.create(), [x, y, 0]);
      this.jitteredProjectionMatrix = mat4.multiply(mat4.create(), translation, this.viewport.getProjectionMatrix());
      this.jitteredViewProjectionMatrix = mat4.multiply(mat4.create(), this.jitteredProjectionMatrix, this.viewport.getViewMatrix());
    }
  }, {
    key: "clearJitterProjectionMatrix",
    value: function clearJitterProjectionMatrix() {
      this.jitteredProjectionMatrix = undefined;
      this.jitteredViewProjectionMatrix = undefined;
    }
  }]);

  return CameraService;
}(), _temp)) || _class);
export { CameraService as default };
//# sourceMappingURL=CameraService.js.map