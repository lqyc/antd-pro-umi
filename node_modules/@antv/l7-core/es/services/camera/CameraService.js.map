{"version":3,"sources":["../../../src/services/camera/CameraService.ts"],"names":["mat4","injectable","CameraService","viewport","overridedViewProjectionMatrix","jitteredViewProjectionMatrix","jitteredProjectionMatrix","viewMatrixInverse","cameraPosition","invert","create","getViewMatrix","getProjectionMatrix","getViewMatrixUncentered","getViewProjectionMatrixUncentered","getViewProjectionMatrix","getZoom","getZoomScale","getCenter","lng","lat","getFocalDistance","lngLat","scale","projectFlat","viewProjectionMatrix","x","y","translation","fromTranslation","multiply","undefined"],"mappings":";;;;;;AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAAiBC,UAAjB,QAAmC,WAAnC;IAIqBC,a,WADpBD,UAAU,E;;;;SAEDE,Q;SAKAC,6B;SAKAC,4B;SAKAC,wB;SAKAC,iB;SAKAC,c;;;;;WAER,gBAAc,CAEb;;;WAKD,gBAAcL,QAAd,EAAmC;AACjC,WAAKA,QAAL,GAAgBA,QAAhB;AAGA,WAAKI,iBAAL,GAA0BP,IAAI,CAACS,MAAL,CACxBT,IAAI,CAACU,MAAL,EADwB,EAEvB,KAAKC,aAAL,EAFuB,CAA1B;AAKA,WAAKH,cAAL,GAAsB,CACpB,KAAKD,iBAAL,CAAuB,EAAvB,CADoB,EAEpB,KAAKA,iBAAL,CAAuB,EAAvB,CAFoB,EAGpB,KAAKA,iBAAL,CAAuB,EAAvB,CAHoB,CAAtB;AAKD;;;WAED,+BAAuC;AAErC,aAAO,KAAKD,wBAAL,IAAiC,KAAKH,QAAL,CAAcS,mBAAd,EAAxC;AACD;;;WAED,yBAAiC;AAC/B,aAAO,KAAKT,QAAL,CAAcQ,aAAd,EAAP;AACD;;;WAED,mCAA2C;AACzC,aAAO,KAAKR,QAAL,CAAcU,uBAAd,EAAP;AACD;;;WAED,6CAAqD;AACnD,aAAO,KAAKV,QAAL,CAAcW,iCAAd,EAAP;AACD;;;WAED,mCAA2C;AACzC,aACE,KAAKV,6BAAL,IACA,KAAKC,4BADL,IAEA,KAAKF,QAAL,CAAcY,uBAAd,EAHF;AAKD;;;WAED,mBAAyB;AACvB,aAAO,KAAKZ,QAAL,CAAca,OAAd,EAAP;AACD;;;WAED,wBAA8B;AAC5B,aAAO,KAAKb,QAAL,CAAcc,YAAd,EAAP;AACD;;;WAED,qBAAqC;AAAA,kCAChB,KAAKd,QAAL,CAAce,SAAd,EADgB;AAAA;AAAA,UAC5BC,GAD4B;AAAA,UACvBC,GADuB;;AAEnC,aAAO,CAACD,GAAD,EAAMC,GAAN,CAAP;AACD;;;WAED,4BAA0B;AACxB,aAAO,KAAKjB,QAAL,CAAckB,gBAAd,EAAP;AACD;;;WAED,6BAA2B;AACzB,aAAO,KAAKb,cAAZ;AACD;;;WAED,qBACEc,MADF,EAEEC,KAFF,EAGoB;AAClB,aAAO,KAAKpB,QAAL,CAAcqB,WAAd,CAA0BF,MAA1B,EAAkCC,KAAlC,CAAP;AACD;;;WAKD,iCAA+BE,oBAA/B,EAA2E;AACzE,WAAKrB,6BAAL,GAAqCqB,oBAArC;AACD;;;WAED,gCAA8BC,CAA9B,EAAyCC,CAAzC,EAAoD;AAClD,UAAMC,WAAW,GAAG5B,IAAI,CAAC6B,eAAL,CAAqB7B,IAAI,CAACU,MAAL,EAArB,EAAoC,CAACgB,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAApC,CAApB;AAEA,WAAKrB,wBAAL,GAAiCN,IAAI,CAAC8B,QAAL,CAC/B9B,IAAI,CAACU,MAAL,EAD+B,EAE/BkB,WAF+B,EAG9B,KAAKzB,QAAL,CAAcS,mBAAd,EAH8B,CAAjC;AAMA,WAAKP,4BAAL,GAAqCL,IAAI,CAAC8B,QAAL,CACnC9B,IAAI,CAACU,MAAL,EADmC,EAElC,KAAKJ,wBAF6B,EAGlC,KAAKH,QAAL,CAAcQ,aAAd,EAHkC,CAArC;AAKD;;;WAED,uCAAqC;AACnC,WAAKL,wBAAL,GAAgCyB,SAAhC;AACA,WAAK1B,4BAAL,GAAoC0B,SAApC;AACD;;;;;SAlIkB7B,a","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { ICameraService, IViewport } from './ICameraService';\n\n@injectable()\nexport default class CameraService implements ICameraService {\n  private viewport: IViewport;\n\n  /**\n   * 不使用 Viewport 计算的 VP 矩阵，例如偏移坐标系场景\n   */\n  private overridedViewProjectionMatrix: number[] | undefined;\n\n  /**\n   * 抖动后的 VP 矩阵\n   */\n  private jitteredViewProjectionMatrix: number[] | undefined;\n\n  /**\n   * 抖动后的 Projection 矩阵\n   */\n  private jitteredProjectionMatrix: number[] | undefined;\n\n  /**\n   * ViewMatrix 逆矩阵，用于计算相机位置\n   */\n  private viewMatrixInverse: number[];\n\n  /**\n   * 相机位置\n   */\n  private cameraPosition: number[];\n\n  public init() {\n    //\n  }\n\n  /**\n   * 同步根据相机参数创建的视口\n   */\n  public update(viewport: IViewport) {\n    this.viewport = viewport;\n\n    // 计算逆矩阵\n    this.viewMatrixInverse = (mat4.invert(\n      mat4.create(),\n      (this.getViewMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n\n    this.cameraPosition = [\n      this.viewMatrixInverse[12],\n      this.viewMatrixInverse[13],\n      this.viewMatrixInverse[14],\n    ];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // 优先返回抖动后的 ProjectionMatrix\n    return this.jitteredProjectionMatrix || this.viewport.getProjectionMatrix();\n  }\n\n  public getViewMatrix(): number[] {\n    return this.viewport.getViewMatrix();\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    return this.viewport.getViewMatrixUncentered();\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    return this.viewport.getViewProjectionMatrixUncentered();\n  }\n\n  public getViewProjectionMatrix(): number[] {\n    return (\n      this.overridedViewProjectionMatrix ||\n      this.jitteredViewProjectionMatrix ||\n      this.viewport.getViewProjectionMatrix()\n    );\n  }\n\n  public getZoom(): number {\n    return this.viewport.getZoom();\n  }\n\n  public getZoomScale(): number {\n    return this.viewport.getZoomScale();\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.viewport.getCenter();\n    return [lng, lat];\n  }\n\n  public getFocalDistance() {\n    return this.viewport.getFocalDistance();\n  }\n\n  public getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n\n  /**\n   * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵\n   */\n  public setViewProjectionMatrix(viewProjectionMatrix: number[] | undefined) {\n    this.overridedViewProjectionMatrix = viewProjectionMatrix;\n  }\n\n  public jitterProjectionMatrix(x: number, y: number) {\n    const translation = mat4.fromTranslation(mat4.create(), [x, y, 0]);\n\n    this.jitteredProjectionMatrix = (mat4.multiply(\n      mat4.create(),\n      translation,\n      (this.viewport.getProjectionMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n\n    this.jitteredViewProjectionMatrix = (mat4.multiply(\n      mat4.create(),\n      (this.jitteredProjectionMatrix as unknown) as mat4,\n      (this.viewport.getViewMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n  }\n\n  public clearJitterProjectionMatrix() {\n    this.jitteredProjectionMatrix = undefined;\n    this.jitteredViewProjectionMatrix = undefined;\n  }\n}\n"],"file":"CameraService.js"}