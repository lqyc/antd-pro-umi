{"version":3,"sources":["../../../src/services/asset/IconService.ts"],"names":["EventEmitter","injectable","buildIconMaping","BUFFER","MAX_CANVAS_WIDTH","imageSize","IconService","canvasHeight","texture","canvas","iconData","iconMap","ctx","loadingImageCount","document","createElement","getContext","id","image","imagedata","Image","hasImage","Error","push","size","updateIconMap","loadImage","then","img","iconImage","find","icon","width","height","update","hasOwnProperty","filter","updateIconAtlas","emit","Object","keys","forEach","item","x","y","max","Math","ratio","drawHeight","drawWidth","drawImage","mapping","url","Promise","resolve","reject","HTMLImageElement","crossOrigin","onload","onerror","src","File","URL","createObjectURL"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { buildIconMaping } from '../../utils/font_util';\nimport { ITexture2D } from '../renderer/ITexture2D';\nimport {\n  IIcon,\n  IICONMap,\n  IIconService,\n  IIconValue,\n  IImage,\n} from './IIconService';\nconst BUFFER = 3;\nconst MAX_CANVAS_WIDTH = 1024;\nconst imageSize = 64;\n@injectable()\nexport default class IconService extends EventEmitter implements IIconService {\n  public canvasHeight: number = 128;\n  private texture: ITexture2D;\n  private canvas: HTMLCanvasElement;\n  private iconData: IIcon[];\n  private iconMap: IICONMap;\n  private ctx: CanvasRenderingContext2D;\n  private loadingImageCount = 0;\n\n  public isLoading() {\n    return this.loadingImageCount === 0;\n  }\n  public init() {\n    this.iconData = [];\n    this.iconMap = {};\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n  }\n\n  public addImage(id: string, image: IImage) {\n    let imagedata = new Image();\n    this.loadingImageCount++;\n    if (this.hasImage(id)) {\n      throw new Error('Image Id already exists');\n    }\n    this.iconData.push({\n      id,\n      size: imageSize,\n    });\n    this.updateIconMap();\n    this.loadImage(image).then((img) => {\n      imagedata = img as HTMLImageElement;\n      const iconImage = this.iconData.find((icon: IIcon) => {\n        return icon.id === id;\n      });\n      if (iconImage) {\n        iconImage.image = imagedata;\n        iconImage.width = imagedata.width;\n        iconImage.height = imagedata.height;\n      }\n      this.update();\n    });\n  }\n\n  public getTexture(): ITexture2D {\n    return this.texture;\n  }\n\n  public getIconMap() {\n    return this.iconMap;\n  }\n\n  public getCanvas() {\n    return this.canvas;\n  }\n\n  public hasImage(id: string): boolean {\n    return this.iconMap.hasOwnProperty(id);\n  }\n\n  public removeImage(id: string): void {\n    if (this.hasImage(id)) {\n      this.iconData = this.iconData.filter((icon) => {\n        return icon.id !== id;\n      });\n      delete this.iconMap[id];\n      this.update();\n    }\n  }\n  public destroy(): void {\n    this.iconData = [];\n    this.iconMap = {};\n  }\n  private update() {\n    this.updateIconMap();\n    this.updateIconAtlas();\n    this.loadingImageCount--;\n    if (this.loadingImageCount === 0) {\n      this.emit('imageUpdate');\n    }\n  }\n\n  private updateIconAtlas() {\n    this.canvas.width = MAX_CANVAS_WIDTH;\n    this.canvas.height = this.canvasHeight;\n    Object.keys(this.iconMap).forEach((item: string) => {\n      const { x, y, image, width = 64, height = 64 } = this.iconMap[item];\n      const max = Math.max(width as number, height as number);\n      const ratio = max / imageSize;\n      const drawHeight = height / ratio;\n      const drawWidth = width / ratio;\n      if (image) {\n        this.ctx.drawImage(\n          image,\n          x + (imageSize - drawWidth) / 2,\n          y + (imageSize - drawHeight) / 2,\n          drawWidth,\n          drawHeight,\n        );\n      }\n    });\n  }\n\n  private updateIconMap() {\n    const { mapping, canvasHeight } = buildIconMaping(\n      this.iconData,\n      BUFFER,\n      MAX_CANVAS_WIDTH,\n    );\n    this.iconMap = mapping;\n    this.canvasHeight = canvasHeight;\n  }\n\n  private loadImage(url: IImage) {\n    return new Promise((resolve, reject) => {\n      if (url instanceof HTMLImageElement) {\n        resolve(url);\n        return;\n      }\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.onload = () => {\n        resolve(image);\n      };\n      image.onerror = () => {\n        reject(new Error('Could not load image at ' + url));\n      };\n      image.src = url instanceof File ? URL.createObjectURL(url) : url;\n    });\n  }\n}\n"],"file":"IconService.js"}