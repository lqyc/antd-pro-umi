import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

var _dec, _class, _temp;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { EventEmitter } from 'eventemitter3';
import { injectable } from 'inversify';
import { buildIconMaping } from '../../utils/font_util';
var BUFFER = 3;
var MAX_CANVAS_WIDTH = 1024;
var imageSize = 64;
var IconService = (_dec = injectable(), _dec(_class = (_temp = function (_EventEmitter) {
  _inherits(IconService, _EventEmitter);

  var _super = _createSuper(IconService);

  function IconService() {
    var _this;

    _classCallCheck(this, IconService);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.canvasHeight = 128;
    _this.texture = void 0;
    _this.canvas = void 0;
    _this.iconData = void 0;
    _this.iconMap = void 0;
    _this.ctx = void 0;
    _this.loadingImageCount = 0;
    return _this;
  }

  _createClass(IconService, [{
    key: "isLoading",
    value: function isLoading() {
      return this.loadingImageCount === 0;
    }
  }, {
    key: "init",
    value: function init() {
      this.iconData = [];
      this.iconMap = {};
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
    }
  }, {
    key: "addImage",
    value: function addImage(id, image) {
      var _this2 = this;

      var imagedata = new Image();
      this.loadingImageCount++;

      if (this.hasImage(id)) {
        throw new Error('Image Id already exists');
      }

      this.iconData.push({
        id: id,
        size: imageSize
      });
      this.updateIconMap();
      this.loadImage(image).then(function (img) {
        imagedata = img;

        var iconImage = _this2.iconData.find(function (icon) {
          return icon.id === id;
        });

        if (iconImage) {
          iconImage.image = imagedata;
          iconImage.width = imagedata.width;
          iconImage.height = imagedata.height;
        }

        _this2.update();
      });
    }
  }, {
    key: "getTexture",
    value: function getTexture() {
      return this.texture;
    }
  }, {
    key: "getIconMap",
    value: function getIconMap() {
      return this.iconMap;
    }
  }, {
    key: "getCanvas",
    value: function getCanvas() {
      return this.canvas;
    }
  }, {
    key: "hasImage",
    value: function hasImage(id) {
      return this.iconMap.hasOwnProperty(id);
    }
  }, {
    key: "removeImage",
    value: function removeImage(id) {
      if (this.hasImage(id)) {
        this.iconData = this.iconData.filter(function (icon) {
          return icon.id !== id;
        });
        delete this.iconMap[id];
        this.update();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.iconData = [];
      this.iconMap = {};
    }
  }, {
    key: "update",
    value: function update() {
      this.updateIconMap();
      this.updateIconAtlas();
      this.loadingImageCount--;

      if (this.loadingImageCount === 0) {
        this.emit('imageUpdate');
      }
    }
  }, {
    key: "updateIconAtlas",
    value: function updateIconAtlas() {
      var _this3 = this;

      this.canvas.width = MAX_CANVAS_WIDTH;
      this.canvas.height = this.canvasHeight;
      Object.keys(this.iconMap).forEach(function (item) {
        var _this3$iconMap$item = _this3.iconMap[item],
            x = _this3$iconMap$item.x,
            y = _this3$iconMap$item.y,
            image = _this3$iconMap$item.image,
            _this3$iconMap$item$w = _this3$iconMap$item.width,
            width = _this3$iconMap$item$w === void 0 ? 64 : _this3$iconMap$item$w,
            _this3$iconMap$item$h = _this3$iconMap$item.height,
            height = _this3$iconMap$item$h === void 0 ? 64 : _this3$iconMap$item$h;
        var max = Math.max(width, height);
        var ratio = max / imageSize;
        var drawHeight = height / ratio;
        var drawWidth = width / ratio;

        if (image) {
          _this3.ctx.drawImage(image, x + (imageSize - drawWidth) / 2, y + (imageSize - drawHeight) / 2, drawWidth, drawHeight);
        }
      });
    }
  }, {
    key: "updateIconMap",
    value: function updateIconMap() {
      var _buildIconMaping = buildIconMaping(this.iconData, BUFFER, MAX_CANVAS_WIDTH),
          mapping = _buildIconMaping.mapping,
          canvasHeight = _buildIconMaping.canvasHeight;

      this.iconMap = mapping;
      this.canvasHeight = canvasHeight;
    }
  }, {
    key: "loadImage",
    value: function loadImage(url) {
      return new Promise(function (resolve, reject) {
        if (url instanceof HTMLImageElement) {
          resolve(url);
          return;
        }

        var image = new Image();
        image.crossOrigin = 'anonymous';

        image.onload = function () {
          resolve(image);
        };

        image.onerror = function () {
          reject(new Error('Could not load image at ' + url));
        };

        image.src = url instanceof File ? URL.createObjectURL(url) : url;
      });
    }
  }]);

  return IconService;
}(EventEmitter), _temp)) || _class);
export { IconService as default };
//# sourceMappingURL=IconService.js.map