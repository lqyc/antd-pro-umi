import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _merge from "lodash/merge";

var _dec, _class, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { injectable } from 'inversify';
import WarnInfo from './warnInfo';
var defaultSceneConfig = {
  id: 'map',
  logoPosition: 'bottomleft',
  logoVisible: true,
  antialias: true,
  preserveDrawingBuffer: false,
  pickBufferScale: 1.0,
  fitBoundsOptions: {
    animate: false
  }
};
var defaultLayerConfig = {
  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],
  size: 10,
  shape: 'circle',
  scales: {},
  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],
  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],
  minZoom: -1,
  maxZoom: 24,
  visible: true,
  autoFit: false,
  pickingBuffer: 0,
  enablePropagation: false,
  zIndex: 0,
  blend: 'normal',
  pickedFeatureID: -1,
  enableMultiPassRenderer: false,
  enablePicking: true,
  active: false,
  activeColor: '#2f54eb',
  enableHighlight: false,
  enableSelect: false,
  highlightColor: '#2f54eb',
  selectColor: 'blue',
  enableTAA: false,
  jitterScale: 1,
  enableLighting: false,
  animateOption: {
    enable: false,
    interval: 0.2,
    duration: 4,
    trailLength: 0.15
  }
};
var GlobalConfigService = (_dec = injectable(), _dec(_class = (_temp = function () {
  function GlobalConfigService() {
    _classCallCheck(this, GlobalConfigService);

    this.sceneConfigCache = {};
    this.layerConfigCache = {};
  }

  _createClass(GlobalConfigService, [{
    key: "getSceneConfig",
    value: function getSceneConfig(sceneId) {
      return this.sceneConfigCache[sceneId];
    }
  }, {
    key: "getSceneWarninfo",
    value: function getSceneWarninfo(id) {
      return WarnInfo[id];
    }
  }, {
    key: "setSceneConfig",
    value: function setSceneConfig(sceneId, config) {
      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);
    }
  }, {
    key: "getLayerConfig",
    value: function getLayerConfig(layerId) {
      return this.layerConfigCache[layerId];
    }
  }, {
    key: "setLayerConfig",
    value: function setLayerConfig(sceneId, layerId, config) {
      this.layerConfigCache[layerId] = _objectSpread({}, _merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));
    }
  }, {
    key: "clean",
    value: function clean() {
      this.sceneConfigCache = {};
      this.layerConfigCache = {};
    }
  }]);

  return GlobalConfigService;
}(), _temp)) || _class);
export { GlobalConfigService as default };
//# sourceMappingURL=ConfigService.js.map