import { ILayer } from '../../layer/ILayerService';
import { IFramebuffer } from '../IFramebuffer';
import { IPostProcessingPass, IPostProcessor } from '../IMultiPassRenderer';
import { IRendererService } from '../IRendererService';
/**
 * ported from Three.js EffectComposer
 * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕
 */
export default class PostProcessor implements IPostProcessor {
    protected readonly rendererService: IRendererService;
    private passes;
    private readFBO;
    private writeFBO;
    getReadFBO(): IFramebuffer;
    getWriteFBO(): IFramebuffer;
    render(layer: ILayer): Promise<void>;
    resize(width: number, height: number): void;
    add<T>(pass: IPostProcessingPass<T>, layer: ILayer, config?: Partial<T>): void;
    insert<T>(pass: IPostProcessingPass<T>, index: number, layer: ILayer, config?: Partial<T>): void;
    getPostProcessingPassByName(name: string): IPostProcessingPass<unknown> | undefined;
    private init;
    private isLastEnabledPass;
    private swap;
}
