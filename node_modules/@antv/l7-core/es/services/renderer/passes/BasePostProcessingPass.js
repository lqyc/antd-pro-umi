import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
import _upperFirst from "lodash/upperFirst";
import _isNil from "lodash/isNil";
import _camelCase from "lodash/camelCase";

var _dec, _dec2, _class, _class2, _descriptor, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { inject, injectable } from 'inversify';
import { gl } from '../../../index';
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
import { TYPES } from '../../../types';
import { PassType } from '../IMultiPassRenderer';
var BasePostProcessingPass = (_dec = injectable(), _dec2 = inject(TYPES.IShaderModuleService), _dec(_class = (_class2 = (_temp = function () {
  function BasePostProcessingPass() {
    _classCallCheck(this, BasePostProcessingPass);

    _initializerDefineProperty(this, "shaderModuleService", _descriptor, this);

    this.rendererService = void 0;
    this.config = void 0;
    this.quad = quad;
    this.enabled = true;
    this.renderToScreen = false;
    this.model = void 0;
    this.name = void 0;
    this.optionsToUpdate = {};
  }

  _createClass(BasePostProcessingPass, [{
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "setName",
    value: function setName(name) {
      this.name = name;
    }
  }, {
    key: "getType",
    value: function getType() {
      return PassType.PostProcessing;
    }
  }, {
    key: "init",
    value: function init(layer, config) {
      this.config = config;
      this.rendererService = layer.getContainer().get(TYPES.IRendererService);
      var _this$rendererService = this.rendererService,
          createAttribute = _this$rendererService.createAttribute,
          createBuffer = _this$rendererService.createBuffer,
          createModel = _this$rendererService.createModel;

      var _this$setupShaders = this.setupShaders(),
          vs = _this$setupShaders.vs,
          fs = _this$setupShaders.fs,
          uniforms = _this$setupShaders.uniforms;

      this.model = createModel({
        vs: vs,
        fs: fs,
        attributes: {
          a_Position: createAttribute({
            buffer: createBuffer({
              data: [-4, -4, 4, -4, 0, 4],
              type: gl.FLOAT
            }),
            size: 2
          })
        },
        uniforms: _objectSpread(_objectSpread({
          u_Texture: null
        }, uniforms), this.config && this.convertOptionsToUniforms(this.config)),
        depth: {
          enable: false
        },
        count: 3,
        blend: {
          enable: this.getName() === 'copy'
        }
      });
    }
  }, {
    key: "render",
    value: function render(layer) {
      var _this = this;

      var postProcessor = layer.multiPassRenderer.getPostProcessor();
      var _this$rendererService2 = this.rendererService,
          useFramebuffer = _this$rendererService2.useFramebuffer,
          getViewportSize = _this$rendererService2.getViewportSize,
          clear = _this$rendererService2.clear;

      var _getViewportSize = getViewportSize(),
          width = _getViewportSize.width,
          height = _getViewportSize.height;

      useFramebuffer(this.renderToScreen ? null : postProcessor.getWriteFBO(), function () {
        clear({
          framebuffer: postProcessor.getWriteFBO(),
          color: [0, 0, 0, 0],
          depth: 1,
          stencil: 0
        });

        _this.model.draw({
          uniforms: _objectSpread({
            u_Texture: postProcessor.getReadFBO(),
            u_ViewportSize: [width, height]
          }, _this.convertOptionsToUniforms(_this.optionsToUpdate))
        });
      });
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "setEnabled",
    value: function setEnabled(enabled) {
      this.enabled = enabled;
    }
  }, {
    key: "setRenderToScreen",
    value: function setRenderToScreen(renderToScreen) {
      this.renderToScreen = renderToScreen;
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(config) {
      this.optionsToUpdate = _objectSpread(_objectSpread({}, this.optionsToUpdate), config);
    }
  }, {
    key: "setupShaders",
    value: function setupShaders() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "convertOptionsToUniforms",
    value: function convertOptionsToUniforms(options) {
      var uniforms = {};
      Object.keys(options).forEach(function (optionName) {
        if (!_isNil(options[optionName])) {
          uniforms["u_".concat(_upperFirst(_camelCase(optionName)))] = options[optionName];
        }
      });
      return uniforms;
    }
  }]);

  return BasePostProcessingPass;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "shaderModuleService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { BasePostProcessingPass as default };
//# sourceMappingURL=BasePostProcessingPass.js.map