{"version":3,"sources":["../../../../src/services/renderer/passes/TAAPass.ts"],"names":["inject","injectable","TYPES","gl","PassType","BaseNormalPass","halton","index","base","result","f","i","Math","floor","accumulatingId","TAAPass","IShaderModuleService","ILogService","haltonSequence","frame","timer","undefined","sampleRenderTarget","prevRenderTarget","outputRenderTarget","copyRenderTarget","blendModel","outputModel","copyModel","Normal","layer","config","rendererService","createFramebuffer","createTexture2D","color","width","height","wrapS","CLAMP_TO_EDGE","wrapT","push","createTriangleModel","blendFS","copyFS","blend","enable","func","srcRGB","ONE","dstRGB","ONE_MINUS_SRC_ALPHA","srcAlpha","dstAlpha","equation","rgb","FUNC_ADD","alpha","clear","getViewportSize","useFramebuffer","resize","resetFrame","stopAccumulating","readFBO","multiPassRenderer","getPostProcessor","getReadFBO","depth","stencil","framebuffer","setRenderFlag","render","accumulate","id","isFinished","doRender","requestAnimationFrame","window","setTimeout","logger","debug","getLayerConfig","jitterScale","offset","length","cameraService","jitterProjectionMatrix","hooks","beforeRender","call","afterRender","layerStyleOptions","draw","uniforms","u_opacity","opacity","u_MixRatio","u_Diffuse1","u_Diffuse2","u_Texture","tmp","clearJitterProjectionMatrix","clearTimeout","shaderModuleName","fragmentShader","options","shaderModuleService","registerModule","vs","quadVS","fs","getModule","createAttribute","createBuffer","createModel","attributes","a_Position","buffer","data","type","FLOAT","size","count"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport blendFS from '../../../shaders/post-processing/blend.glsl';\nimport copyFS from '../../../shaders/post-processing/copy.glsl';\nimport quadVS from '../../../shaders/post-processing/quad.glsl';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { ILogService } from '../../log/ILogService';\nimport { IShaderModuleService } from '../../shader/IShaderModuleService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n// Generate halton sequence\n// https://en.wikipedia.org/wiki/Halton_sequence\nfunction halton(index: number, base: number) {\n  let result = 0;\n  let f = 1 / base;\n  let i = index;\n  while (i > 0) {\n    result = result + f * (i % base);\n    i = Math.floor(i / base);\n    f = f / base;\n  }\n  return result;\n}\n\n// 累加计数器\nlet accumulatingId = 1;\n\n/**\n * TAA（Temporal Anti-Aliasing）\n * 在需要后处理的场景中（例如 L7 的热力图需要 blur pass、PBR 中的 SSAO 环境光遮蔽），无法使用浏览器内置的 MSAA，\n * 只能使用 TAA\n * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/ri52hv\n */\n@injectable()\nexport default class TAAPass<InitializationOptions = {}> extends BaseNormalPass<\n  InitializationOptions\n> {\n  @inject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  @inject(TYPES.ILogService)\n  protected readonly logger: ILogService;\n\n  /**\n   * 低差异序列\n   */\n  private haltonSequence: Array<[number, number]> = [];\n\n  /**\n   * 当前累加任务 ID，例如用户连续拖拽时上一次累加很有可能没有结束，此时在开启新一轮累加之前需要结束掉之前未完成的\n   */\n  private accumulatingId: number = 0;\n\n  /**\n   * 每一轮累加中的 frameID\n   */\n  private frame: number = 0;\n\n  /**\n   * 每一轮累加中的 frame 定时器\n   */\n  private timer: number | undefined = undefined;\n\n  private sampleRenderTarget: IFramebuffer;\n  private prevRenderTarget: IFramebuffer;\n  private outputRenderTarget: IFramebuffer;\n  private copyRenderTarget: IFramebuffer;\n\n  private blendModel: IModel;\n  private outputModel: IModel;\n  private copyModel: IModel;\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'taa';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n\n    const { createFramebuffer, createTexture2D } = this.rendererService;\n    this.sampleRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.prevRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.outputRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.copyRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    for (let i = 0; i < 30; i++) {\n      this.haltonSequence.push([halton(i, 2), halton(i, 3)]);\n    }\n\n    this.blendModel = this.createTriangleModel('blend-pass', blendFS);\n    this.outputModel = this.createTriangleModel('copy-pass', copyFS, {\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          srcAlpha: gl.ONE,\n          dstAlpha: gl.ONE_MINUS_SRC_ALPHA,\n        },\n        equation: {\n          rgb: gl.FUNC_ADD,\n          alpha: gl.FUNC_ADD,\n        },\n      },\n    });\n    this.copyModel = this.createTriangleModel('copy-pass', copyFS);\n  }\n\n  public render(layer: ILayer) {\n    const { clear, getViewportSize, useFramebuffer } = this.rendererService;\n    const { width, height } = getViewportSize();\n    this.sampleRenderTarget.resize({ width, height });\n    this.prevRenderTarget.resize({ width, height });\n    this.outputRenderTarget.resize({ width, height });\n    this.copyRenderTarget.resize({ width, height });\n\n    this.resetFrame();\n    // 首先停止上一次的累加\n    this.stopAccumulating();\n\n    // 先输出到 PostProcessor\n    const readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n    useFramebuffer(readFBO, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: readFBO,\n      });\n\n      // render to post processor\n      layer.multiPassRenderer.setRenderFlag(false);\n      layer.render();\n      layer.multiPassRenderer.setRenderFlag(true);\n    });\n\n    const accumulate = (id: number) => {\n      // 在开启新一轮累加之前，需要先结束掉之前的累加\n      if (!this.accumulatingId || id !== this.accumulatingId) {\n        return;\n      }\n\n      if (!this.isFinished()) {\n        this.doRender(layer);\n\n        requestAnimationFrame(() => {\n          accumulate(id);\n        });\n      }\n    };\n\n    this.accumulatingId = accumulatingId++;\n    this.timer = window.setTimeout(() => {\n      accumulate(this.accumulatingId);\n    }, 50);\n  }\n\n  private doRender(layer: ILayer) {\n    this.logger.debug(`accumulatingId: ${this.accumulatingId}`);\n\n    const { clear, getViewportSize, useFramebuffer } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { jitterScale = 1 } = layer.getLayerConfig();\n\n    // 使用 Halton 序列抖动投影矩阵\n    const offset = this.haltonSequence[this.frame % this.haltonSequence.length];\n    this.cameraService.jitterProjectionMatrix(\n      ((offset[0] * 2.0 - 1.0) / width) * jitterScale,\n      ((offset[1] * 2.0 - 1.0) / height) * jitterScale,\n    );\n\n    // 按抖动后的投影矩阵渲染\n    layer.multiPassRenderer.setRenderFlag(false);\n    layer.hooks.beforeRender.call();\n    useFramebuffer(this.sampleRenderTarget, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.sampleRenderTarget,\n      });\n\n      layer.render();\n    });\n    layer.hooks.afterRender.call();\n    layer.multiPassRenderer.setRenderFlag(true);\n\n    // 混合\n    const layerStyleOptions = layer.getLayerConfig();\n    useFramebuffer(this.outputRenderTarget, () => {\n      this.blendModel.draw({\n        uniforms: {\n          // @ts-ignore\n          u_opacity: layerStyleOptions.opacity || 1,\n          u_MixRatio: this.frame === 0 ? 1 : 0.9,\n          u_Diffuse1: this.sampleRenderTarget,\n          u_Diffuse2:\n            this.frame === 0\n              ? layer.multiPassRenderer.getPostProcessor().getReadFBO()\n              : this.prevRenderTarget,\n        },\n      });\n    });\n\n    // 输出累加结果\n    if (this.frame === 0) {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.copyRenderTarget,\n      });\n    }\n\n    if (this.frame >= 1) {\n      useFramebuffer(this.copyRenderTarget, () => {\n        this.outputModel.draw({\n          uniforms: {\n            u_Texture: this.outputRenderTarget,\n          },\n        });\n      });\n\n      useFramebuffer(\n        layer.multiPassRenderer.getPostProcessor().getReadFBO(),\n        () => {\n          this.copyModel.draw({\n            uniforms: {\n              u_Texture: this.copyRenderTarget,\n            },\n          });\n        },\n      );\n      layer.multiPassRenderer.getPostProcessor().render(layer);\n    }\n\n    // 保存前序帧结果\n    const tmp = this.prevRenderTarget;\n    this.prevRenderTarget = this.outputRenderTarget;\n    this.outputRenderTarget = tmp;\n\n    this.frame++;\n\n    // 恢复 jitter 后的相机\n    this.cameraService.clearJitterProjectionMatrix();\n  }\n\n  /**\n   * 是否已经完成累加\n   * @return {boolean} isFinished\n   */\n  private isFinished() {\n    return this.frame >= this.haltonSequence.length;\n  }\n\n  private resetFrame() {\n    this.frame = 0;\n  }\n\n  private stopAccumulating() {\n    this.accumulatingId = 0;\n    window.clearTimeout(this.timer);\n  }\n\n  private createTriangleModel(\n    shaderModuleName: string,\n    fragmentShader: string,\n    options?: Partial<IModelInitializationOptions>,\n  ) {\n    this.shaderModuleService.registerModule(shaderModuleName, {\n      vs: quadVS,\n      fs: fragmentShader,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      shaderModuleName,\n    );\n    const { createAttribute, createBuffer, createModel } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: false,\n      },\n      count: 3,\n      ...options,\n    });\n  }\n}\n"],"file":"TAAPass.js"}