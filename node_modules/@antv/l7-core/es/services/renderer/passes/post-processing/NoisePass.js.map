{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/NoisePass.ts"],"names":["injectable","BasePostProcessingPass","NoisePass","shaderModuleService","registerModule","vs","quad","fs","noise","getModule"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B;;;AAGA,OAAOC,sBAAP,MAAmC,2BAAnC;IAOqBC,S,WADpBF,UAAU,E;;;;;;;;;;;;;WAIT,wBAAsB;AACpB,WAAKG,mBAAL,CAAyBC,cAAzB,CAAwC,YAAxC,EAAsD;AACpDC,QAAAA,EAAE,EAAEC,IADgD;AAEpDC,QAAAA,EAAE,EAAEC;AAFgD,OAAtD;AAKA,aAAO,KAAKL,mBAAL,CAAyBM,SAAzB,CAAmC,YAAnC,CAAP;AACD;;;;EAVoCR,sB;SAAlBC,S","sourcesContent":["import { injectable } from 'inversify';\nimport noise from '../../../../shaders/post-processing/noise.glsl';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface INoisePassConfig {\n  amount: number;\n}\n\n@injectable()\nexport default class NoisePass extends BasePostProcessingPass<\n  INoisePassConfig\n> {\n  public setupShaders() {\n    this.shaderModuleService.registerModule('noise-pass', {\n      vs: quad,\n      fs: noise,\n    });\n\n    return this.shaderModuleService.getModule('noise-pass');\n  }\n}\n"],"file":"NoisePass.js"}