import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { injectable } from 'inversify';
var copy = "varying vec2 v_UV;\n\nuniform sampler2D u_Texture;\n\nvoid main() {\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\n}";
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
import BasePostProcessingPass from '../BasePostProcessingPass';
var CopyPass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {
  _inherits(CopyPass, _BasePostProcessingPa);

  var _super = _createSuper(CopyPass);

  function CopyPass() {
    _classCallCheck(this, CopyPass);

    return _super.apply(this, arguments);
  }

  _createClass(CopyPass, [{
    key: "setupShaders",
    value: function setupShaders() {
      this.shaderModuleService.registerModule('copy-pass', {
        vs: quad,
        fs: copy
      });
      return this.shaderModuleService.getModule('copy-pass');
    }
  }]);

  return CopyPass;
}(BasePostProcessingPass)) || _class);
export { CopyPass as default };
//# sourceMappingURL=CopyPass.js.map