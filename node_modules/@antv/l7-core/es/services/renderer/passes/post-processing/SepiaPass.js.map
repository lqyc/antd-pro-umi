{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/SepiaPass.ts"],"names":["injectable","BasePostProcessingPass","SepiaPass","shaderModuleService","registerModule","vs","quad","fs","sepia","getModule"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B;;;AAGA,OAAOC,sBAAP,MAAmC,2BAAnC;IAOqBC,S,WADpBF,UAAU,E;;;;;;;;;;;;;WAIT,wBAAsB;AACpB,WAAKG,mBAAL,CAAyBC,cAAzB,CAAwC,YAAxC,EAAsD;AACpDC,QAAAA,EAAE,EAAEC,IADgD;AAEpDC,QAAAA,EAAE,EAAEC;AAFgD,OAAtD;AAKA,aAAO,KAAKL,mBAAL,CAAyBM,SAAzB,CAAmC,YAAnC,CAAP;AACD;;;;EAVoCR,sB;SAAlBC,S","sourcesContent":["import { injectable } from 'inversify';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport sepia from '../../../../shaders/post-processing/sepia.glsl';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface ISepiaPassConfig {\n  amount: number;\n}\n\n@injectable()\nexport default class SepiaPass extends BasePostProcessingPass<\n  ISepiaPassConfig\n> {\n  public setupShaders() {\n    this.shaderModuleService.registerModule('sepia-pass', {\n      vs: quad,\n      fs: sepia,\n    });\n\n    return this.shaderModuleService.getModule('sepia-pass');\n  }\n}\n"],"file":"SepiaPass.js"}