import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { injectable } from 'inversify';
import { PassType } from '../IMultiPassRenderer';
import BaseNormalPass from './BaseNormalPass';
var RenderPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {
  _inherits(RenderPass, _BaseNormalPass);

  var _super = _createSuper(RenderPass);

  function RenderPass() {
    _classCallCheck(this, RenderPass);

    return _super.apply(this, arguments);
  }

  _createClass(RenderPass, [{
    key: "getType",
    value: function getType() {
      return PassType.Normal;
    }
  }, {
    key: "getName",
    value: function getName() {
      return 'render';
    }
  }, {
    key: "init",
    value: function init(layer, config) {
      _get(_getPrototypeOf(RenderPass.prototype), "init", this).call(this, layer, config);
    }
  }, {
    key: "render",
    value: function render(layer) {
      var _this$rendererService = this.rendererService,
          useFramebuffer = _this$rendererService.useFramebuffer,
          clear = _this$rendererService.clear;
      useFramebuffer(null, function () {
        clear({
          color: [0, 0, 0, 0],
          depth: 1,
          stencil: 0
        });
        layer.multiPassRenderer.setRenderFlag(false);
        layer.render();
        layer.multiPassRenderer.setRenderFlag(true);
      });
    }
  }]);

  return RenderPass;
}(BaseNormalPass)) || _class);
export { RenderPass as default };
//# sourceMappingURL=RenderPass.js.map