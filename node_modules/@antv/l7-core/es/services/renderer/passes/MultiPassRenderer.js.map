{"version":3,"sources":["../../../../src/services/renderer/passes/MultiPassRenderer.ts"],"names":["inject","injectable","TYPES","PassType","MultiPassRenderer","IPostProcessor","passes","layer","renderFlag","width","height","postProcessor","pass","render","renderModels","config","getType","PostProcessing","add","init","push","index","splice","length"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAKEC,QALF,QAMO,uBANP;IA4BqBC,iB,WADpBH,UAAU,E,UAIRD,MAAM,CAACE,KAAK,CAACG,cAAP,C;;;;SAFCC,M,GAAgC,E;;;;SAKhCC,K;SACAC,U;SAEAC,K,GAAgB,C;SAEhBC,M,GAAiB,C;;;;;WAEzB,kBAAgBH,KAAhB,EAA+B;AAC7B,WAAKA,KAAL,GAAaA,KAAb;AACD;;;WAED,uBAAqBC,UAArB,EAA0C;AACxC,WAAKA,UAAL,GAAkBA,UAAlB;AACD;;;WAED,yBAAuB;AACrB,aAAO,KAAKA,UAAZ;AACD;;;WAED,4BAA0B;AACxB,aAAO,KAAKG,aAAZ;AACD;;;;+DAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uDACqB,KAAKL,MAD1B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACaM,gBAAAA,IADb;AAAA;AAAA,uBAEUA,IAAI,CAACC,MAAL,CAAY,KAAKN,KAAjB,CAFV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAIE,qBAAKA,KAAL,CAAWO,YAAX;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAQA,gBAAcL,KAAd,EAA6BC,MAA7B,EAA6C;AAC3C,UAAI,KAAKD,KAAL,KAAeA,KAAf,IAAwB,KAAKC,MAAL,KAAgBA,MAA5C,EAAoD;AAElD,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,MAAL,GAAcA,MAAd;AACD;AACF;;;WAED,aAAcE,IAAd,EAA8BG,MAA9B,EAAmD;AACjD,UAAIH,IAAI,CAACI,OAAL,OAAmBb,QAAQ,CAACc,cAAhC,EAAgD;AAC9C,aAAKN,aAAL,CAAmBO,GAAnB,CACEN,IADF,EAEE,KAAKL,KAFP,EAGEQ,MAHF;AAKD,OAND,MAMO;AACLH,QAAAA,IAAI,CAACO,IAAL,CAAU,KAAKZ,KAAf,EAAsBQ,MAAtB;AACA,aAAKT,MAAL,CAAYc,IAAZ,CAAiBR,IAAjB;AACD;AACF;;;WAED,gBAAiBA,IAAjB,EAAiCG,MAAjC,EAAqDM,KAArD,EAAoE;AAClET,MAAAA,IAAI,CAACO,IAAL,CAAU,KAAKZ,KAAf,EAAsBQ,MAAtB;AACA,WAAKT,MAAL,CAAYgB,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,EAA6BT,IAA7B;AACD;;;WAED,mBAAiB;AACf,WAAKN,MAAL,CAAYiB,MAAZ,GAAqB,CAArB;AACD;;;;;;;;;;SAjEkBnB,iB","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n  IPostProcessor,\n  PassType,\n} from '../IMultiPassRenderer';\n\n/**\n * ported from Three.js EffectComposer\n * @example\n * const renderer = new MultiPassRenderer([\n *   new ClearPass(),\n *   new RenderPass({\n *     models: [\n *       new Model(),\n *       new Model(),\n *     ],\n *   }),\n *   new CopyPass({\n *     renderToScreen: true,\n *   }),\n *   new TAAPass(),\n * ]);\n * renderer.render();\n * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/apuvbf#dRM8W\n */\n@injectable()\nexport default class MultiPassRenderer implements IMultiPassRenderer {\n  private passes: Array<IPass<unknown>> = [];\n\n  @inject(TYPES.IPostProcessor)\n  private postProcessor: IPostProcessor;\n\n  private layer: ILayer;\n  private renderFlag: boolean;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  public setLayer(layer: ILayer) {\n    this.layer = layer;\n  }\n\n  public setRenderFlag(renderFlag: boolean) {\n    this.renderFlag = renderFlag;\n  }\n\n  public getRenderFlag() {\n    return this.renderFlag;\n  }\n\n  public getPostProcessor() {\n    return this.postProcessor;\n  }\n\n  public async render() {\n    for (const pass of this.passes) {\n      await pass.render(this.layer);\n    }\n    this.layer.renderModels();\n    // await this.postProcessor.render(this.layer);\n  }\n\n  public resize(width: number, height: number) {\n    if (this.width !== width || this.height !== height) {\n      // this.postProcessor.resize(width, height);\n      this.width = width;\n      this.height = height;\n    }\n  }\n\n  public add<T>(pass: IPass<T>, config?: Partial<T>) {\n    if (pass.getType() === PassType.PostProcessing) {\n      this.postProcessor.add<T>(\n        pass as IPostProcessingPass<T>,\n        this.layer,\n        config,\n      );\n    } else {\n      pass.init(this.layer, config);\n      this.passes.push(pass);\n    }\n  }\n\n  public insert<T>(pass: IPass<T>, config: Partial<T>, index: number) {\n    pass.init(this.layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n\n  public destroy() {\n    this.passes.length = 0;\n  }\n}\n"],"file":"MultiPassRenderer.js"}