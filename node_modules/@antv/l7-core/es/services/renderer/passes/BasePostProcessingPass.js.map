{"version":3,"sources":["../../../../src/services/renderer/passes/BasePostProcessingPass.ts"],"names":["inject","injectable","gl","TYPES","PassType","BasePostProcessingPass","IShaderModuleService","rendererService","config","quad","enabled","renderToScreen","model","name","optionsToUpdate","PostProcessing","layer","getContainer","get","IRendererService","createAttribute","createBuffer","createModel","setupShaders","vs","fs","uniforms","attributes","a_Position","buffer","data","type","FLOAT","size","u_Texture","convertOptionsToUniforms","depth","enable","count","blend","getName","postProcessor","multiPassRenderer","getPostProcessor","useFramebuffer","getViewportSize","clear","width","height","getWriteFBO","framebuffer","color","stencil","draw","getReadFBO","u_ViewportSize","Error","options","Object","keys","forEach","optionName"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { camelCase, isNil, upperFirst } from 'lodash';\nimport {\n  gl,\n  IModel,\n  IRendererService,\n  IShaderModuleService,\n} from '../../../index';\nimport quad from '../../../shaders/post-processing/quad.glsl';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { IPostProcessingPass, PassType } from '../IMultiPassRenderer';\nimport { IUniform } from '../IUniform';\n\n/**\n * 后处理 Pass 基类，通过 PostProcessor 驱动。\n *\n * 约定使用 u_Texture 传递渲染纹理。\n */\n@injectable()\nexport default class BasePostProcessingPass<InitializationOptions = {}>\n  implements IPostProcessingPass<InitializationOptions> {\n  @inject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  protected rendererService: IRendererService;\n\n  protected config: Partial<InitializationOptions> | undefined;\n\n  protected quad: string = quad;\n\n  /**\n   * 启用开关\n   */\n  private enabled: boolean = true;\n\n  /**\n   * 是否渲染到屏幕\n   */\n  private renderToScreen: boolean = false;\n\n  /**\n   * 渲染命令\n   */\n  private model: IModel;\n\n  /**\n   * 效果名，便于在图层中引用\n   */\n  private name: string;\n\n  private optionsToUpdate: Partial<InitializationOptions> = {};\n\n  public getName() {\n    return this.name;\n  }\n\n  public setName(name: string) {\n    this.name = name;\n  }\n\n  public getType() {\n    return PassType.PostProcessing;\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    this.config = config;\n    this.rendererService = layer\n      .getContainer()\n      .get<IRendererService>(TYPES.IRendererService);\n\n    const { createAttribute, createBuffer, createModel } = this.rendererService;\n    const { vs, fs, uniforms } = this.setupShaders();\n\n    this.model = createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      // @ts-ignore\n      uniforms: {\n        // @ts-ignore\n        u_Texture: null,\n        ...uniforms,\n        ...(this.config && this.convertOptionsToUniforms(this.config)),\n      },\n      depth: {\n        enable: false,\n      },\n      count: 3,\n      blend: {\n        // copy pass 需要混合\n        enable: this.getName() === 'copy',\n      },\n    });\n  }\n\n  public render(layer: ILayer) {\n    const postProcessor = layer.multiPassRenderer.getPostProcessor();\n    const { useFramebuffer, getViewportSize, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n    useFramebuffer(\n      this.renderToScreen ? null : postProcessor.getWriteFBO(),\n      () => {\n        clear({\n          framebuffer: postProcessor.getWriteFBO(),\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n        });\n        this.model.draw({\n          uniforms: {\n            u_Texture: postProcessor.getReadFBO(),\n            u_ViewportSize: [width, height],\n            ...this.convertOptionsToUniforms(this.optionsToUpdate),\n          },\n        });\n      },\n    );\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n  }\n\n  public setRenderToScreen(renderToScreen: boolean) {\n    this.renderToScreen = renderToScreen;\n  }\n\n  public updateOptions(config: Partial<InitializationOptions>) {\n    this.optionsToUpdate = {\n      ...this.optionsToUpdate,\n      ...config,\n    };\n  }\n\n  protected setupShaders(): {\n    vs: string;\n    fs: string;\n    uniforms?: { [key: string]: IUniform };\n  } {\n    throw new Error('Method not implemented.');\n  }\n\n  protected convertOptionsToUniforms(\n    options: Partial<InitializationOptions>,\n  ): {\n    [uniformName: string]: IUniform;\n  } | void {\n    const uniforms: {\n      [key: string]: IUniform;\n    } = {};\n\n    Object.keys(options).forEach((optionName) => {\n      // @ts-ignore\n      if (!isNil(options[optionName])) {\n        uniforms[`u_${upperFirst(camelCase(optionName))}`] =\n          // @ts-ignore\n          options[optionName];\n      }\n    });\n\n    return uniforms;\n  }\n}\n"],"file":"BasePostProcessingPass.js"}