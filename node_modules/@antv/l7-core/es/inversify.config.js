import 'reflect-metadata';
import { EventEmitter } from 'eventemitter3';
import { Container, decorate, injectable } from 'inversify';
import getDecorators from 'inversify-inject-decorators';
import { TYPES } from './types';
import FontService from './services/asset/FontService';
import IconService from './services/asset/IconService';
import CameraService from './services/camera/CameraService';
import ControlService from './services/component/ControlService';
import MarkerService from './services/component/MarkerService';
import PopupService from './services/component/PopupService';
import GlobalConfigService from './services/config/ConfigService';
import CoordinateSystemService from './services/coordinate/CoordinateSystemService';
import InteractionService from './services/interaction/InteractionService';
import PickingService from './services/interaction/PickingService';
import LayerService from './services/layer/LayerService';
import StyleAttributeService from './services/layer/StyleAttributeService';
import LogService from './services/log/LogService';
import SceneService from './services/scene/SceneService';
import ShaderModuleService from './services/shader/ShaderModuleService';
import ClearPass from './services/renderer/passes/ClearPass';
import MultiPassRenderer from './services/renderer/passes/MultiPassRenderer';
import PixelPickingPass from './services/renderer/passes/PixelPickingPass';
import BlurHPass from './services/renderer/passes/post-processing/BlurHPass';
import BlurVPass from './services/renderer/passes/post-processing/BlurVPass';
import ColorHalfTonePass from './services/renderer/passes/post-processing/ColorHalfTonePass';
import CopyPass from './services/renderer/passes/post-processing/CopyPass';
import HexagonalPixelatePass from './services/renderer/passes/post-processing/HexagonalPixelatePass';
import InkPass from './services/renderer/passes/post-processing/InkPass';
import NoisePass from './services/renderer/passes/post-processing/NoisePass';
import SepiaPass from './services/renderer/passes/post-processing/SepiaPass';
import PostProcessor from './services/renderer/passes/PostProcessor';
import RenderPass from './services/renderer/passes/RenderPass';
import TAAPass from './services/renderer/passes/TAAPass';
var container = new Container();
container.bind(TYPES.IGlobalConfigService).to(GlobalConfigService).inSingletonScope();
container.bind(TYPES.IShaderModuleService).to(ShaderModuleService).inSingletonScope();
container.bind(TYPES.ILogService).to(LogService).inSingletonScope();
decorate(injectable(), EventEmitter);
container.bind(TYPES.IEventEmitter).to(EventEmitter);
var DECORATORS = getDecorators(container, false);
export var lazyInject = function lazyInject(serviceIdentifier) {
  var original = DECORATORS.lazyInject(serviceIdentifier);
  return function (proto, key, descriptor) {
    original.call(this, proto, key);

    if (descriptor) {
      descriptor.initializer = function () {
        return proto[key];
      };
    }
  };
};
export var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {
  var original = DECORATORS.lazyMultiInject(serviceIdentifier);
  return function (proto, key, descriptor) {
    original.call(this, proto, key);

    if (descriptor) {
      descriptor.initializer = function () {
        return proto[key];
      };
    }
  };
};
export default container;
var sceneIdCounter = 0;
export function createSceneContainer() {
  var sceneContainer = new Container();
  sceneContainer.parent = container;
  sceneContainer.bind(TYPES.SceneID).toConstantValue("".concat(sceneIdCounter++));
  sceneContainer.bind(TYPES.ILayerService).to(LayerService).inSingletonScope();
  sceneContainer.bind(TYPES.ISceneService).to(SceneService).inSingletonScope();
  sceneContainer.bind(TYPES.ICameraService).to(CameraService).inSingletonScope();
  sceneContainer.bind(TYPES.ICoordinateSystemService).to(CoordinateSystemService).inSingletonScope();
  sceneContainer.bind(TYPES.IInteractionService).to(InteractionService).inSingletonScope();
  sceneContainer.bind(TYPES.IPickingService).to(PickingService).inSingletonScope();
  sceneContainer.bind(TYPES.IControlService).to(ControlService).inSingletonScope();
  sceneContainer.bind(TYPES.IMarkerService).to(MarkerService).inSingletonScope();
  sceneContainer.bind(TYPES.IIconService).to(IconService).inSingletonScope();
  sceneContainer.bind(TYPES.IFontService).to(FontService).inSingletonScope();
  sceneContainer.bind(TYPES.IPopupService).to(PopupService).inSingletonScope();
  sceneContainer.bind(TYPES.INormalPass).to(ClearPass).whenTargetNamed('clear');
  sceneContainer.bind(TYPES.INormalPass).to(PixelPickingPass).whenTargetNamed('pixelPicking');
  sceneContainer.bind(TYPES.INormalPass).to(RenderPass).whenTargetNamed('render');
  sceneContainer.bind(TYPES.INormalPass).to(TAAPass).whenTargetNamed('taa');
  sceneContainer.bind(TYPES.IFactoryNormalPass).toFactory(function (context) {
    return function (named) {
      return context.container.getNamed(TYPES.INormalPass, named);
    };
  });
  sceneContainer.bind(TYPES.IPostProcessingPass).to(CopyPass).whenTargetNamed('copy');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(BlurHPass).whenTargetNamed('blurH');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(BlurVPass).whenTargetNamed('blurV');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(NoisePass).whenTargetNamed('noise');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(SepiaPass).whenTargetNamed('sepia');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(ColorHalfTonePass).whenTargetNamed('colorHalftone');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(HexagonalPixelatePass).whenTargetNamed('hexagonalPixelate');
  sceneContainer.bind(TYPES.IPostProcessingPass).to(InkPass).whenTargetNamed('ink');
  sceneContainer.bind(TYPES.IFactoryPostProcessingPass).toFactory(function (context) {
    return function (named) {
      var pass = context.container.getNamed(TYPES.IPostProcessingPass, named);
      pass.setName(named);
      return pass;
    };
  });
  return sceneContainer;
}
export function createLayerContainer(sceneContainer) {
  var layerContainer = new Container();
  layerContainer.parent = sceneContainer;
  layerContainer.bind(TYPES.IStyleAttributeService).to(StyleAttributeService).inSingletonScope();
  layerContainer.bind(TYPES.IMultiPassRenderer).to(MultiPassRenderer).inSingletonScope();
  layerContainer.bind(TYPES.IPostProcessor).to(PostProcessor).inSingletonScope();
  return layerContainer;
}
//# sourceMappingURL=inversify.config.js.map