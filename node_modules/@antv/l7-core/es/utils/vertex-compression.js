import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _clamp from "lodash/clamp";
import { getShapeIndex } from './sdf-2d';
export var LEFT_SHIFT1 = 2;
export var LEFT_SHIFT2 = 4;
export var LEFT_SHIFT6 = 64;
export var LEFT_SHIFT7 = 128;
export var LEFT_SHIFT8 = 256;
export var LEFT_SHIFT9 = 512;
export var LEFT_SHIFT13 = 8192;
export var LEFT_SHIFT14 = 16384;
export var LEFT_SHIFT15 = 32768;
export var LEFT_SHIFT16 = 32768 * 2;
export var LEFT_SHIFT17 = 131072.0;
export var LEFT_SHIFT18 = 262144.0;
export var LEFT_SHIFT19 = 524288.0;
export var LEFT_SHIFT20 = 1048576.0;
export var LEFT_SHIFT21 = 2097152.0;
export var LEFT_SHIFT22 = 4194304.0;
export var LEFT_SHIFT23 = 8388608.0;
export var LEFT_SHIFT24 = 16777216.0;
export var LEFT_SHIFT25 = 16777216.0 * 2;
export function packUint8ToFloat(a, b) {
  a = _clamp(Math.floor(a), 0, 255);
  b = _clamp(Math.floor(b), 0, 255);
  return 256 * a + b;
}
export function packCircleVertex(props) {
  var color = props.color,
      radius = props.radius,
      tileX = props.tileX,
      tileY = props.tileY,
      shape = props.shape,
      opacity = props.opacity,
      stroke = props.stroke,
      strokeWidth = props.strokeWidth,
      strokeOpacity = props.strokeOpacity;
  var packedBuffer = [];
  var packedBuffer2 = [];
  var packedBuffer3 = [];
  var packedColor = [packUint8ToFloat(color[0], color[1]), packUint8ToFloat(color[2], color[3])];
  var packedStrokeColor = [packUint8ToFloat(stroke[0], stroke[1]), packUint8ToFloat(stroke[2], stroke[3])];
  [[-1, -1], [1, -1], [1, 1], [-1, 1]].forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        extrudeX = _ref2[0],
        extrudeY = _ref2[1];

    packedBuffer.push([].concat(packedColor, [(extrudeX + 1) * LEFT_SHIFT23 + (extrudeY + 1) * LEFT_SHIFT21 + getShapeIndex(shape) * LEFT_SHIFT17 + radius, (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6]));
    packedBuffer2.push([].concat(packedStrokeColor, [strokeWidth, strokeOpacity]));
    packedBuffer3.push([opacity, 0, 0, 0]);
  });
  return {
    packedBuffer: packedBuffer,
    packedBuffer2: packedBuffer2,
    packedBuffer3: packedBuffer3
  };
}
export function packOpacity(opacity, placed) {
  if (opacity === 0 && !placed) {
    return 0;
  } else if (opacity === 1 && placed) {
    return 4294967295;
  }

  var targetBit = placed ? 1 : 0;
  var opacityBits = Math.floor(opacity * 127);
  return opacityBits * LEFT_SHIFT25 + targetBit * LEFT_SHIFT24 + opacityBits * LEFT_SHIFT17 + targetBit * LEFT_SHIFT16 + opacityBits * LEFT_SHIFT9 + targetBit * LEFT_SHIFT8 + opacityBits * LEFT_SHIFT1 + targetBit;
}
//# sourceMappingURL=vertex-compression.js.map