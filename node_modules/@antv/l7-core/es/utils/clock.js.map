{"version":3,"sources":["../../src/utils/clock.ts"],"names":["Clock","autoStart","startTime","oldTime","running","elapsedTime","performance","Date","now","getElapsedTime","getDelta","diff","start","newTime"],"mappings":";;;IACqBA,K;AAMnB,mBAA8B;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;;AAAA;;AAAA,SALtBA,SAKsB;AAAA,SAJtBC,SAIsB,GAJF,CAIE;AAAA,SAHtBC,OAGsB,GAHJ,CAGI;AAAA,SAFtBC,OAEsB,GAFH,KAEG;AAAA,SADtBC,WACsB,GADA,CACA;AAC5B,SAAKJ,SAAL,GAAiBA,SAAjB;AACD;;;;WACD,iBAAe;AACb,WAAKC,SAAL,GAAiB,CAAC,OAAOI,WAAP,KAAuB,WAAvB,GACdC,IADc,GAEdD,WAFa,EAGfE,GAHe,EAAjB;AAKA,WAAKL,OAAL,GAAe,KAAKD,SAApB;AACA,WAAKG,WAAL,GAAmB,CAAnB;AACA,WAAKD,OAAL,GAAe,IAAf;AACD;;;WACD,gBAAc;AACZ,WAAKK,cAAL;AACA,WAAKL,OAAL,GAAe,KAAf;AACA,WAAKH,SAAL,GAAiB,KAAjB;AACD;;;WAED,0BAAwB;AACtB,WAAKS,QAAL;AACA,aAAO,KAAKL,WAAZ;AACD;;;WACD,oBAAkB;AAChB,UAAIM,IAAI,GAAG,CAAX;;AAEA,UAAI,KAAKV,SAAL,IAAkB,CAAC,KAAKG,OAA5B,EAAqC;AACnC,aAAKQ,KAAL;AACA,eAAO,CAAP;AACD;;AAED,UAAI,KAAKR,OAAT,EAAkB;AAChB,YAAMS,OAAO,GAAG,CAAC,OAAOP,WAAP,KAAuB,WAAvB,GACbC,IADa,GAEbD,WAFY,EAGdE,GAHc,EAAhB;AAIAG,QAAAA,IAAI,GAAG,CAACE,OAAO,GAAG,KAAKV,OAAhB,IAA2B,IAAlC;AACA,aAAKA,OAAL,GAAeU,OAAf;AACA,aAAKR,WAAL,IAAoBM,IAApB;AACD;;AACD,aAAOA,IAAP;AACD;;;;;;SA/CkBX,K","sourcesContent":["// https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js\nexport default class Clock {\n  private autoStart: boolean;\n  private startTime: number = 0;\n  private oldTime: number = 0;\n  private running: boolean = false;\n  private elapsedTime: number = 0;\n  constructor(autoStart = true) {\n    this.autoStart = autoStart;\n  }\n  public start() {\n    this.startTime = (typeof performance === 'undefined'\n      ? Date\n      : performance\n    ).now();\n\n    this.oldTime = this.startTime;\n    this.elapsedTime = 0;\n    this.running = true;\n  }\n  public stop() {\n    this.getElapsedTime();\n    this.running = false;\n    this.autoStart = false;\n  }\n\n  public getElapsedTime() {\n    this.getDelta();\n    return this.elapsedTime;\n  }\n  public getDelta() {\n    let diff = 0;\n\n    if (this.autoStart && !this.running) {\n      this.start();\n      return 0;\n    }\n\n    if (this.running) {\n      const newTime = (typeof performance === 'undefined'\n        ? Date\n        : performance\n      ).now();\n      diff = (newTime - this.oldTime) / 1000;\n      this.oldTime = newTime;\n      this.elapsedTime += diff;\n    }\n    return diff;\n  }\n}\n"],"file":"clock.js"}