{"version":3,"sources":["../../src/utils/shader-module.ts"],"names":["getUniformLengthByType","type","arrayLength","uniformRegExp","extractUniforms","content","uniforms","replace","_","c","defaultValues","split","uniformName","trim","defaultValue","length","Number","reduce","prev","cur","push","Array","fill"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,IAAhC,EAAsD;AAC3D,MAAIC,WAAW,GAAG,CAAlB;;AACA,UAAQD,IAAR;AACE,SAAK,MAAL;AACA,SAAK,OAAL;AACEC,MAAAA,WAAW,GAAG,CAAd;AACA;;AACF,SAAK,MAAL;AACA,SAAK,OAAL;AACEA,MAAAA,WAAW,GAAG,CAAd;AACA;;AACF,SAAK,MAAL;AACA,SAAK,OAAL;AACA,SAAK,MAAL;AACEA,MAAAA,WAAW,GAAG,CAAd;AACA;;AACF,SAAK,MAAL;AACEA,MAAAA,WAAW,GAAG,CAAd;AACA;;AACF,SAAK,MAAL;AACEA,MAAAA,WAAW,GAAG,EAAd;AACA;;AACF;AApBF;;AAsBA,SAAOA,WAAP;AACD;AAED,IAAMC,aAAa,GAAG,iHAAtB;AACA,OAAO,SAASC,eAAT,CACLC,OADK,EAOL;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,OAAO,GAAGA,OAAO,CAACE,OAAR,CAAgBJ,aAAhB,EAA+B,UAACK,CAAD,EAAIP,IAAJ,EAAUQ,CAAV,EAAgB;AACvD,QAAMC,aAAa,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAtB;AACA,QAAMC,WAAW,GAAGF,aAAa,CAAC,CAAD,CAAb,CAAiBG,IAAjB,EAApB;AACA,QAAIC,YAAiB,GAAG,EAAxB;;AACA,QAAIJ,aAAa,CAACK,MAAd,GAAuB,CAA3B,EAA8B;AAC5BD,MAAAA,YAAY,GAAGJ,aAAa,CAAC,CAAD,CAAb,CAAiBG,IAAjB,EAAf;AACD;;AAID,YAAQZ,IAAR;AACE,WAAK,MAAL;AACEa,QAAAA,YAAY,GAAGA,YAAY,KAAK,MAAhC;AACA;;AACF,WAAK,OAAL;AACA,WAAK,KAAL;AACEA,QAAAA,YAAY,GAAGE,MAAM,CAACF,YAAD,CAArB;AACA;;AACF,WAAK,MAAL;AACA,WAAK,MAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACA,WAAK,MAAL;AACA,WAAK,MAAL;AACA,WAAK,MAAL;AACE,YAAIA,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,GAAGA,YAAY,CACxBP,OADY,CACJ,GADI,EACC,EADD,EAEZA,OAFY,CAEJ,GAFI,EAEC,EAFD,EAGZI,KAHY,CAGN,GAHM,EAIZM,MAJY,CAIL,UAACC,IAAD,EAAiBC,GAAjB,EAAiC;AACvCD,YAAAA,IAAI,CAACE,IAAL,CAAUJ,MAAM,CAACG,GAAG,CAACN,IAAJ,EAAD,CAAhB;AACA,mBAAOK,IAAP;AACD,WAPY,EAOV,EAPU,CAAf;AAQD,SATD,MASO;AACLJ,UAAAA,YAAY,GAAG,IAAIO,KAAJ,CAAUrB,sBAAsB,CAACC,IAAD,CAAhC,EAAwCqB,IAAxC,CAA6C,CAA7C,CAAf;AACD;;AACD;;AACF;AA9BF;;AAkCAhB,IAAAA,QAAQ,CAACM,WAAD,CAAR,GAAwBE,YAAxB;AACA,6BAAkBb,IAAlB,cAA0BW,WAA1B;AACD,GA9CS,CAAV;AA+CA,SAAO;AACLP,IAAAA,OAAO,EAAPA,OADK;AAELC,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID","sourcesContent":["export function getUniformLengthByType(type: string): number {\n  let arrayLength = 0;\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n    case 'mat3':\n      arrayLength = 9;\n      break;\n    case 'mat4':\n      arrayLength = 16;\n      break;\n    default:\n  }\n  return arrayLength;\n}\n\nconst uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(\n  content: string,\n): {\n  content: string;\n  uniforms: {\n    [key: string]: any;\n  };\n} {\n  const uniforms = {};\n  content = content.replace(uniformRegExp, (_, type, c) => {\n    const defaultValues = c.split(':');\n    const uniformName = defaultValues[0].trim();\n    let defaultValue: any = '';\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    }\n\n    // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue\n            .replace('[', '')\n            .replace(']', '')\n            .split(',')\n            .reduce((prev: number[], cur: string) => {\n              prev.push(Number(cur.trim()));\n              return prev;\n            }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n        break;\n      default:\n    }\n\n    // @ts-ignore\n    uniforms[uniformName] = defaultValue;\n    return `uniform ${type} ${uniformName};\\n`;\n  });\n  return {\n    content,\n    uniforms,\n  };\n}\n"],"file":"shader-module.js"}