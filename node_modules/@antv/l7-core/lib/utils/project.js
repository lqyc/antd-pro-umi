"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDistanceScales = getDistanceScales;
var DEGREES_TO_RADIANS = Math.PI / 180;
var TILE_SIZE = 512;
var EARTH_CIRCUMFERENCE = 40.03e6;

function getDistanceScales(_ref) {
  var _ref$latitude = _ref.latitude,
      latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,
      _ref$zoom = _ref.zoom,
      zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,
      scale = _ref.scale,
      _ref$highPrecision = _ref.highPrecision,
      highPrecision = _ref$highPrecision === void 0 ? false : _ref$highPrecision,
      _ref$flipY = _ref.flipY,
      flipY = _ref$flipY === void 0 ? false : _ref$flipY;
  scale = scale !== undefined ? scale : Math.pow(2, zoom);
  var result = {};
  var worldSize = TILE_SIZE * scale;
  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
  var pixelsPerDegreeX = worldSize / 360;
  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;
  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;
  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];
  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];
  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];
  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];

  if (highPrecision) {
    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;
    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;
    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;
    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;
    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];
    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];

    if (flipY) {
      result.pixelsPerDegree2[1] = -result.pixelsPerDegree2[1];
      result.pixelsPerMeter2[1] = -result.pixelsPerMeter2[1];
    }
  }

  if (flipY) {
    result.pixelsPerMeter[1] = -result.pixelsPerMeter[1];
    result.metersPerPixel[1] = -result.metersPerPixel[1];
    result.pixelsPerDegree[1] = -result.pixelsPerDegree[1];
    result.degreesPerPixel[1] = -result.degreesPerPixel[1];
  }

  return result;
}
//# sourceMappingURL=project.js.map