{"version":3,"sources":["../../../src/services/interaction/InteractionService.ts"],"names":["DragEventMap","panstart","panmove","panend","pancancel","InteractionService","TYPES","IMapService","ILogService","hammertime","lastClickTime","lastClickXY","clickTimer","$containter","onDrag","target","interactionTarget","interactionEvent","type","emit","InteractionEvent","Drag","onHammer","srcEvent","stopPropagation","Hover","onTouch","touch","touches","onHover","x","pageX","y","pageY","event","clientX","clientY","mapService","getMapContainer","getBoundingClientRect","top","left","clientLeft","clientTop","lngLat","containerToLngLat","document","documentElement","isDoubleTap","addEventListenerOnMap","destroy","removeEventListenerOnMap","off","id","Select","featureId","Active","Hammer","Manager","add","Tap","taps","Pan","threshold","pointers","Press","on","addEventListener","logger","debug","removeEventListener","pointerType","Math","floor","nowTime","Date","getTime","abs","clearTimeout","setTimeout","EventEmitter"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport Hammer from 'hammerjs';\nimport { inject, injectable } from 'inversify';\n// @ts-ignore\nimport { TYPES } from '../../types';\nimport { ILogService } from '../log/ILogService';\nimport { ILngLat, IMapService } from '../map/IMapService';\nimport { IInteractionService, InteractionEvent } from './IInteractionService';\nconst DragEventMap: { [key: string]: string } = {\n  panstart: 'dragstart',\n  panmove: 'dragging',\n  panend: 'dragend',\n  pancancel: 'dragcancle',\n};\n/**\n * 由于目前 L7 与地图结合的方案为双 canvas 而非共享 WebGL Context，事件监听注册在地图底图上。\n * 除此之外，后续如果支持非地图场景，事件监听就需要注册在 L7 canvas 上。\n */\n@injectable()\nexport default class InteractionService extends EventEmitter\n  implements IInteractionService {\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  private hammertime: HammerManager;\n\n  private lastClickTime: number = 0;\n\n  private lastClickXY: number[] = [-1, -1];\n\n  private clickTimer: number;\n\n  private $containter: HTMLElement;\n\n  public init() {\n    // 注册事件在地图底图上\n    this.addEventListenerOnMap();\n    this.$containter = this.mapService.getMapContainer() as HTMLElement;\n  }\n\n  public destroy() {\n    if (this.hammertime) {\n      this.hammertime.destroy();\n    }\n    this.removeEventListenerOnMap();\n    this.off(InteractionEvent.Hover);\n  }\n\n  public triggerHover({ x, y }: { x: number; y: number }) {\n    this.emit(InteractionEvent.Hover, { x, y });\n  }\n  public triggerSelect(id: number): void {\n    this.emit(InteractionEvent.Select, { featureId: id });\n  }\n\n  public triggerActive(id: number): void {\n    this.emit(InteractionEvent.Active, { featureId: id });\n  }\n\n  private addEventListenerOnMap() {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const hammertime = new Hammer.Manager($containter);\n      hammertime.add(\n        new Hammer.Tap({\n          event: 'dblclick',\n          taps: 2,\n        }),\n      );\n      hammertime.add(\n        new Hammer.Tap({\n          event: 'click',\n        }),\n      );\n      hammertime.add(new Hammer.Pan({ threshold: 0, pointers: 0 }));\n      hammertime.add(new Hammer.Press({}));\n      // hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });\n      // hammertime.get('pinch').set({ enable: true });\n      hammertime.on('dblclick click', this.onHammer);\n      hammertime.on('panstart panmove panend pancancel', this.onDrag);\n      // $containter.addEventListener('touchstart', this.onTouch);\n      $containter.addEventListener('mousemove', this.onHover);\n      // $containter.addEventListener('click', this.onHover);\n      $containter.addEventListener('mousedown', this.onHover, true);\n      $containter.addEventListener('mouseup', this.onHover);\n      $containter.addEventListener('contextmenu', this.onHover);\n\n      this.hammertime = hammertime;\n\n      // TODO: 根据场景注册事件到 L7 canvas 上\n      this.logger.debug('add event listeners on canvas');\n    }\n  }\n  private removeEventListenerOnMap() {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      $containter.removeEventListener('mousemove', this.onHover);\n      // this.hammertime.off('dblclick click', this.onHammer);\n      this.hammertime.off('panstart panmove panend pancancel', this.onDrag);\n      // $containter.removeEventListener('touchstart', this.onTouch);\n      // $containter.removeEventListener('click', this.onHover);\n      $containter.removeEventListener('mousedown', this.onHover);\n      $containter.removeEventListener('mouseup', this.onHover);\n      // $containter.removeEventListener('dblclick', this.onHover);\n      $containter.removeEventListener('contextmenu', this.onHover);\n    }\n  }\n  private onDrag = (target: HammerInput) => {\n    const interactionTarget = this.interactionEvent(target);\n    interactionTarget.type = DragEventMap[interactionTarget.type];\n    this.emit(InteractionEvent.Drag, interactionTarget);\n  };\n  private onHammer = (target: HammerInput) => {\n    target.srcEvent.stopPropagation();\n    const interactionTarget = this.interactionEvent(target);\n    this.emit(InteractionEvent.Hover, interactionTarget);\n  };\n  private onTouch = (target: TouchEvent) => {\n    const touch = target.touches[0];\n    // @ts-ignore\n    this.onHover({\n      x: touch.pageX,\n      y: touch.pageY,\n      type: 'touch',\n    });\n  };\n\n  private interactionEvent(target: HammerInput) {\n    const { type, pointerType } = target;\n    let clientX;\n    let clientY;\n    if (pointerType === 'touch') {\n      clientY = Math.floor(target.pointers[0].clientY);\n      clientX = Math.floor(target.pointers[0].clientX);\n    } else {\n      clientY = Math.floor((target.srcEvent as MouseEvent).y);\n      clientX = Math.floor((target.srcEvent as MouseEvent).x);\n    }\n\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const { top, left } = $containter.getBoundingClientRect();\n      clientX -= left;\n      clientY -= top;\n    }\n    const lngLat = this.mapService.containerToLngLat([clientX, clientY]);\n    return { x: clientX, y: clientY, lngLat, type, target: target.srcEvent };\n  }\n  private onHover = (event: MouseEvent) => {\n    const { clientX, clientY } = event;\n    let x = clientX;\n    let y = clientY;\n    const type = event.type;\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const { top, left } = $containter.getBoundingClientRect();\n      x = x - left - $containter.clientLeft;\n      y = y - top - $containter.clientTop;\n    }\n    const lngLat = this.mapService.containerToLngLat([x, y]);\n\n    if (type === 'click') {\n      if ('ontouchstart' in document.documentElement === true) {\n        return;\n      }\n      this.isDoubleTap(x, y, lngLat);\n      return;\n    }\n    if (type === 'touch') {\n      this.isDoubleTap(x, y, lngLat);\n      return;\n    }\n    if (type !== 'click' && type !== 'dblclick') {\n      this.emit(InteractionEvent.Hover, {\n        x,\n        y,\n        lngLat,\n        type,\n        target: event,\n      });\n    }\n  };\n\n  private isDoubleTap(x: number, y: number, lngLat: ILngLat) {\n    const nowTime = new Date().getTime();\n    let type = 'click';\n    if (\n      nowTime - this.lastClickTime < 400 &&\n      Math.abs(this.lastClickXY[0] - x) < 10 &&\n      Math.abs(this.lastClickXY[1] - y) < 10\n    ) {\n      this.lastClickTime = 0;\n      this.lastClickXY = [-1, -1];\n      if (this.clickTimer) {\n        clearTimeout(this.clickTimer);\n      }\n      type = 'dblclick';\n      this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n    } else {\n      this.lastClickTime = nowTime;\n      this.lastClickXY = [x, y];\n      // @ts-ignore\n      this.clickTimer = setTimeout(() => {\n        type = 'click';\n        this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n      }, 400);\n    }\n  }\n}\n"],"file":"InteractionService.js"}