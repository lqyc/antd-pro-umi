{"version":3,"sources":["../../../src/services/layer/ILayerService.ts"],"names":["BlendType"],"mappings":";;;;;;IA8BYA,S;;;WAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,yBAAAA,S","sourcesContent":["// @ts-ignore\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport { Container } from 'inversify';\nimport Clock from '../../utils/clock';\nimport { ISceneConfig } from '../config/IConfigService';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IBlendOptions,\n  IModel,\n  IModelInitializationOptions,\n} from '../renderer/IModel';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n} from '../renderer/IMultiPassRenderer';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IUniform } from '../renderer/IUniform';\nimport { ISource, ISourceCFG } from '../source/ISourceService';\nimport {\n  IAnimateOption,\n  IEncodeFeature,\n  IScale,\n  IScaleOptions,\n  IStyleAttributeService,\n  ScaleAttributeType,\n  StyleAttrField,\n  StyleAttributeOption,\n  Triangulation,\n} from './IStyleAttributeService';\nexport enum BlendType {\n  normal = 'normal',\n  additive = 'additive',\n  subtractive = 'subtractive',\n  min = 'min',\n  max = 'max',\n  none = 'none',\n}\nexport interface IBlendTypes {\n  [key: string]: Partial<IBlendOptions>;\n}\nexport interface IDataState {\n  dataSourceNeedUpdate: boolean;\n  dataMappingNeedUpdate: boolean;\n  filterNeedUpdate: boolean;\n  featureScaleNeedUpdate: boolean;\n  StyleAttrNeedUpdate: boolean;\n}\nexport interface ILayerModelInitializationOptions {\n  moduleName: string;\n  vertexShader: string;\n  fragmentShader: string;\n  triangulation: Triangulation;\n}\nexport interface ILayerModel {\n  render(): void;\n  getUninforms(): IModelUniform;\n  getDefaultStyle(): unknown;\n  getAnimateUniforms(): IModelUniform;\n  buildModels(): IModel[];\n  initModels(): IModel[];\n  needUpdate(): boolean;\n  clearModels(): void;\n}\nexport interface IModelUniform {\n  [key: string]: IUniform;\n}\n\nexport interface IPickedFeature {\n  x: number;\n  y: number;\n  lnglat?: { lng: number; lat: number };\n  feature?: unknown;\n}\n// 交互样式\nexport interface IActiveOption {\n  color: string | number[];\n}\n\nexport interface ILayer {\n  id: string; // 一个场景中同一类型 Layer 可能存在多个\n  type: string; // 代表 Layer 的类型\n  name: string; //\n  inited: boolean; // 是否初始化完成\n  zIndex: number;\n  plugins: ILayerPlugin[];\n  layerModelNeedUpdate: boolean;\n  styleNeedUpdate: boolean;\n  layerModel: ILayerModel;\n  dataState: IDataState; // 数据流状态\n  pickedFeatureID: number | null;\n  hooks: {\n    init: SyncBailHook;\n    afterInit: SyncBailHook;\n    beforeRenderData: SyncWaterfallHook;\n    beforeRender: SyncBailHook;\n    afterRender: SyncHook;\n    beforePickingEncode: SyncHook;\n    afterPickingEncode: SyncHook;\n    beforeHighlight: SyncHook;\n    beforeSelect: SyncHook;\n    afterSelect: SyncHook;\n    afterHighlight: SyncHook;\n    beforeDestroy: SyncHook;\n    afterDestroy: SyncHook;\n  };\n  models: IModel[];\n  sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n  multiPassRenderer: IMultiPassRenderer;\n  needPick(type: string): boolean;\n  getLayerConfig(): Partial<ILayerConfig & ISceneConfig>;\n  getContainer(): Container;\n  setContainer(container: Container): void;\n  setCurrentPickId(id: number | null): void;\n  getCurrentPickId(): number | null;\n  setCurrentSelectedId(id: number | null): void;\n  getCurrentSelectedId(): number | null;\n  prepareBuildModel(): void;\n  renderModels(): void;\n  buildModels(): void;\n  rebuildModels(): void;\n  buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel;\n  init(): ILayer;\n  scale(field: string | number | IScaleOptions, cfg?: IScale): ILayer;\n  size(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  color(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  shape(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  label(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  animate(option: Partial<IAnimateOption> | boolean): ILayer;\n  // pattern(field: string, value: StyleAttributeOption): ILayer;\n  filter(field: string, value: StyleAttributeOption): ILayer;\n  active(option: IActiveOption | boolean): ILayer;\n  setActive(\n    id: number | { x: number; y: number },\n    option?: IActiveOption,\n  ): void;\n  select(option: IActiveOption | boolean): ILayer;\n  setSelect(\n    id: number | { x: number; y: number },\n    option?: IActiveOption,\n  ): void;\n  style(options: unknown): ILayer;\n  hide(): ILayer;\n  show(): ILayer;\n  getLegendItems(name: string): any;\n  setIndex(index: number): ILayer;\n  isVisible(): boolean;\n  setMaxZoom(min: number): ILayer;\n  setMinZoom(max: number): ILayer;\n  getMinZoom(): number;\n  getMaxZoom(): number;\n  get(name: string): number;\n  setBlend(type: keyof typeof BlendType): void;\n  // animate(field: string, option: any): ILayer;\n  render(): ILayer;\n  clear(): void;\n  clearModels(): void;\n  destroy(): void;\n  source(data: any, option?: ISourceCFG): ILayer;\n  setData(data: any, option?: ISourceCFG): ILayer;\n  fitBounds(fitBoundsOptions?: unknown): ILayer;\n  /**\n   * 向当前图层注册插件\n   * @param plugin 插件实例\n   */\n  addPlugin(plugin: ILayerPlugin): ILayer;\n  getSource(): ISource;\n  setSource(source: ISource): void;\n  setEncodedData(encodedData: IEncodeFeature[]): void;\n  getEncodedData(): IEncodeFeature[];\n  getScaleOptions(): IScaleOptions;\n\n  /**\n   * 事件\n   */\n  on(type: string, handler: (...args: any[]) => void): void;\n  off(type: string, handler: (...args: any[]) => void): void;\n  emit(type: string, handler: unknown): void;\n  once(type: string, handler: (...args: any[]) => void): void;\n  /**\n   * JSON Schema 用于校验配置项\n   */\n  getConfigSchemaForValidation(): object;\n  isDirty(): boolean;\n  /**\n   * 直接调用拾取方法，在非鼠标交互场景中使用\n   */\n  pick(query: { x: number; y: number }): void;\n  boxSelect(\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ): void;\n\n  updateLayerConfig(configToUpdate: Partial<ILayerConfig | unknown>): void;\n  setAnimateStartTime(): void;\n  getLayerAnimateTime(): number;\n}\n\n/**\n * Layer 插件\n */\nexport interface ILayerPlugin {\n  apply(\n    layer: ILayer,\n    services: {\n      rendererService: IRendererService;\n      mapService: IMapService;\n      styleAttributeService: IStyleAttributeService;\n      postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;\n      normalPassFactory: (name: string) => IPass<unknown>;\n    },\n  ): void;\n}\n\n/**\n * Layer 初始化参数\n */\nexport interface ILayerConfig {\n  colors: string[];\n  size: number;\n  shape: string;\n  shape2d: string[];\n  shape3d: string[];\n  scales: {\n    [key: string]: IScale;\n  };\n  minZoom: number;\n  maxZoom: number;\n  visible: boolean;\n  zIndex: number;\n  pickingBuffer: number;\n  enablePropagation: boolean;\n  autoFit: boolean;\n  fitBoundsOptions?: unknown;\n  name: string; //\n  blend: keyof typeof BlendType;\n  pickedFeatureID: number;\n  enableMultiPassRenderer: boolean;\n  passes: Array<string | [string, { [key: string]: unknown }]>;\n\n  /**\n   * 开启拾取\n   */\n  enablePicking: boolean;\n  /**\n   * 开启高亮\n   */\n  enableHighlight: boolean;\n\n  enableSelect: boolean;\n  /**\n   * 高亮颜色\n   */\n  highlightColor: string | number[];\n  selectColor: string | number[];\n  active: boolean;\n  activeColor: string | number[];\n  /**\n   * 开启 TAA\n   */\n  enableTAA: boolean;\n  /**\n   * 相机抖动程度\n   */\n  jitterScale: number;\n  /**\n   * 开启光照\n   */\n  enableLighting: boolean;\n  animateOption: Partial<IAnimateOption>;\n  onHover(pickedFeature: IPickedFeature): void;\n  onClick(pickedFeature: IPickedFeature): void;\n}\n\n/**\n * 提供 Layer 管理服务\n */\nexport interface ILayerService {\n  clock: Clock;\n  alreadyInRendering: boolean;\n  add(layer: ILayer): void;\n  initLayers(): void;\n  startAnimate(): void;\n  stopAnimate(): void;\n  getLayers(): ILayer[];\n  getLayer(id: string): ILayer | undefined;\n  getLayerByName(name: string): ILayer | undefined;\n  remove(layer: ILayer): void;\n  removeAllLayers(): void;\n  updateRenderOrder(): void;\n  renderLayers(): void;\n  destroy(): void;\n}\n"],"file":"ILayerService.js"}