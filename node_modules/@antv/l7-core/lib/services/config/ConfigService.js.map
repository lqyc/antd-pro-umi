{"version":3,"sources":["../../../src/services/config/ConfigService.ts"],"names":["defaultSceneConfig","id","logoPosition","logoVisible","antialias","preserveDrawingBuffer","pickBufferScale","fitBoundsOptions","animate","defaultLayerConfig","colors","size","shape","scales","shape2d","shape3d","minZoom","maxZoom","visible","autoFit","pickingBuffer","enablePropagation","zIndex","blend","pickedFeatureID","enableMultiPassRenderer","enablePicking","active","activeColor","enableHighlight","enableSelect","highlightColor","selectColor","enableTAA","jitterScale","enableLighting","animateOption","enable","interval","duration","trailLength","GlobalConfigService","sceneConfigCache","layerConfigCache","sceneId","WarnInfo","config","layerId"],"mappings":"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","sourcesContent":["// import Ajv from 'ajv';\nimport { injectable, postConstruct } from 'inversify';\nimport { merge } from 'lodash';\nimport { ILayerConfig } from '../layer/ILayerService';\nimport { IRenderConfig } from '../renderer/IRendererService';\nimport { IGlobalConfigService, ISceneConfig } from './IConfigService';\nimport WarnInfo, { IWarnInfo } from './warnInfo';\n\n/**\n * 场景默认配置项\n */\nconst defaultSceneConfig: Partial<ISceneConfig & IRenderConfig> = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false,\n  },\n};\n\n/**\n * 图层基类默认样式属性\n */\nconst defaultLayerConfig: Partial<ILayerConfig> = {\n  colors: [\n    'rgb(103,0,31)',\n    'rgb(178,24,43)',\n    'rgb(214,96,77)',\n    'rgb(244,165,130)',\n    'rgb(253,219,199)',\n    'rgb(247,247,247)',\n    'rgb(209,229,240)',\n    'rgb(146,197,222)',\n    'rgb(67,147,195)',\n    'rgb(33,102,172)',\n    'rgb(5,48,97)',\n  ],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: [\n    'circle',\n    'triangle',\n    'square',\n    'pentagon',\n    'hexagon',\n    'octogon',\n    'hexagram',\n    'rhombus',\n    'vesica',\n  ],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15,\n  },\n};\n\n// @see https://github.com/epoberezkin/ajv#options\n// const ajv = new Ajv({\n//   allErrors: true,\n//   verbose: true,\n// });\n\n@injectable()\nexport default class GlobalConfigService implements IGlobalConfigService {\n  /**\n   * 全部场景配置项缓存\n   */\n  private sceneConfigCache: {\n    [sceneId: string]: Partial<ISceneConfig>;\n  } = {};\n\n  /**\n   * 场景配置项校验器\n   */\n  // private sceneConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 地图配置项校验器\n   */\n  // private mapConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 全部图层配置项缓存\n   */\n  private layerConfigCache: {\n    [layerId: string]: Partial<ILayerConfig & ISceneConfig>;\n  } = {};\n\n  /**\n   * 保存每一种 Layer 配置项的校验器\n   */\n  // private layerConfigValidatorCache: {\n  //   [layerName: string]: Ajv.ValidateFunction;\n  // } = {};\n\n  public getSceneConfig(sceneId: string) {\n    return this.sceneConfigCache[sceneId];\n  }\n\n  public getSceneWarninfo(id: string) {\n    return WarnInfo[id];\n  }\n\n  public setSceneConfig(sceneId: string, config: Partial<ISceneConfig>) {\n    this.sceneConfigCache[sceneId] = {\n      ...defaultSceneConfig,\n      ...config,\n    };\n  }\n\n  // public validateSceneConfig(data: object) {\n  //   return this.validate(this.sceneConfigValidator, data);\n  // }\n\n  // public validateMapConfig(data: object) {\n  //   return this.validate(this.mapConfigValidator, data);\n  // }\n\n  public getLayerConfig<IChildLayerConfig>(\n    layerId: string,\n  ): Partial<ILayerConfig & ISceneConfig & IChildLayerConfig> {\n    // @ts-ignore\n    return this.layerConfigCache[layerId];\n  }\n\n  public setLayerConfig(\n    sceneId: string,\n    layerId: string,\n    config: Partial<ILayerConfig>,\n  ) {\n    // @ts-ignore\n    this.layerConfigCache[layerId] = {\n      ...merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config),\n    };\n  }\n\n  // public registerLayerConfigSchemaValidator(layerName: string, schema: object) {\n  //   if (!this.layerConfigValidatorCache[layerName]) {\n  //     this.layerConfigValidatorCache[layerName] = ajv.compile(schema);\n  //   }\n  // }\n\n  // public validateLayerConfig(layerName: string, data: object) {\n  //   return this.validate(this.layerConfigValidatorCache[layerName], data);\n  // }\n\n  public clean() {\n    this.sceneConfigCache = {};\n    this.layerConfigCache = {};\n  }\n\n  // @postConstruct()\n  // private registerSceneConfigSchemaValidator() {\n  //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n  //   this.mapConfigValidator = ajv.compile(mapConfigSchema);\n  // }\n\n  // private validate(\n  //   validateFunc: Ajv.ValidateFunction | undefined,\n  //   data: object,\n  // ) {\n  //   if (validateFunc) {\n  //     const valid = validateFunc(data);\n  //     if (!valid) {\n  //       return {\n  //         valid,\n  //         errors: validateFunc.errors,\n  //         errorText: ajv.errorsText(validateFunc.errors),\n  //       };\n  //     }\n  //   }\n  //   return {\n  //     valid: true,\n  //     errors: null,\n  //     errorText: null,\n  //   };\n  // }\n}\n"],"file":"ConfigService.js"}