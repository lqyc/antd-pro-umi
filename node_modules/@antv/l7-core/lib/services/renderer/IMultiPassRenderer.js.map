{"version":3,"sources":["../../../src/services/renderer/IMultiPassRenderer.ts"],"names":["PassType"],"mappings":";;;;;;IAGYA,Q;;;WAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,wBAAAA,Q","sourcesContent":["import { ILayer } from '../layer/ILayerService';\nimport { IFramebuffer } from './IFramebuffer';\n\nexport enum PassType {\n  Normal = 'normal',\n  PostProcessing = 'post-processing',\n}\n\n/**\n * Pass 分两类：\n * 1. 渲染相关 eg. ClearPass、RenderPass、PickingPass、ShadowPass\n * 2. PostProcessing eg. CopyPass、BlurPass\n * 另外考虑到 Pass 之间严格的执行顺序，render 方法必须是异步的\n */\nexport interface IPass<InitializationOptions> {\n  getName(): string;\n  getType(): PassType;\n  init(layer: ILayer, config?: Partial<InitializationOptions>): void;\n  render(layer: ILayer): void;\n}\n\n/**\n * PostProcessing，自动切换 renderTarget\n * 例如最后一个 PostProcessingPass 自动切换 renderTarget 为屏幕\n */\nexport interface IPostProcessingPass<InitializationOptions>\n  extends IPass<InitializationOptions> {\n  setRenderToScreen(renderToScreen: boolean): void;\n  setName(name: string): void;\n  isEnabled(): boolean;\n  setEnabled(enabled: boolean): void;\n  updateOptions(config: Partial<InitializationOptions>): void;\n}\n\nexport interface IPostProcessor {\n  getReadFBO(): IFramebuffer;\n  getWriteFBO(): IFramebuffer;\n  resize(viewportWidth: number, viewportHeight: number): void;\n  add<InitializationOptions>(\n    pass: IPostProcessingPass<InitializationOptions>,\n    layer: ILayer,\n    config?: Partial<InitializationOptions>,\n  ): void;\n  render(layer: ILayer): Promise<unknown>;\n  getPostProcessingPassByName(\n    name: string,\n  ): IPostProcessingPass<unknown> | undefined;\n}\n\nexport interface IMultiPassRenderer {\n  getPostProcessor(): IPostProcessor;\n  resize(viewportWidth: number, viewportHeight: number): void;\n  add<InitializationOptions>(\n    pass: IPass<InitializationOptions>,\n    config?: Partial<InitializationOptions>,\n  ): void;\n  render(): void;\n  getRenderFlag(): boolean;\n  setRenderFlag(enabled: boolean): void;\n  setLayer(layer: ILayer): void;\n  destroy(): void;\n}\n"],"file":"IMultiPassRenderer.js"}