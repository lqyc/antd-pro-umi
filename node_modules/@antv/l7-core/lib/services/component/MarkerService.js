"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inversify = require("inversify");

var _types = require("../../types");

var _dec, _class, _temp;

var MarkerService = (_dec = (0, _inversify.injectable)(), _dec(_class = (_temp = function () {
  function MarkerService() {
    (0, _classCallCheck2.default)(this, MarkerService);
    this.container = void 0;
    this.scene = void 0;
    this.mapsService = void 0;
    this.markers = [];
    this.markerLayers = [];
    this.unAddMarkers = [];
    this.unAddMarkerLayers = [];
  }

  (0, _createClass2.default)(MarkerService, [{
    key: "addMarkerLayer",
    value: function addMarkerLayer(markerLayer) {
      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
        this.markerLayers.push(markerLayer);
        markerLayer.addTo(this.scene);
      } else {
        this.unAddMarkerLayers.push(markerLayer);
      }
    }
  }, {
    key: "removeMarkerLayer",
    value: function removeMarkerLayer(layer) {
      layer.destroy();
      this.markerLayers.indexOf(layer);
      var markerIndex = this.markerLayers.indexOf(layer);

      if (markerIndex > -1) {
        this.markerLayers.splice(markerIndex, 1);
      }
    }
  }, {
    key: "addMarker",
    value: function addMarker(marker) {
      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
        this.markers.push(marker);
        marker.addTo(this.scene);
      } else {
        this.unAddMarkers.push(marker);
      }
    }
  }, {
    key: "addMarkers",
    value: function addMarkers() {
      var _this = this;

      this.unAddMarkers.forEach(function (marker) {
        marker.addTo(_this.scene);

        _this.markers.push(marker);
      });
      this.unAddMarkers = [];
    }
  }, {
    key: "addMarkerLayers",
    value: function addMarkerLayers() {
      var _this2 = this;

      this.unAddMarkerLayers.forEach(function (markerLayer) {
        _this2.markerLayers.push(markerLayer);

        markerLayer.addTo(_this2.scene);
      });
      this.unAddMarkers = [];
    }
  }, {
    key: "removeMarker",
    value: function removeMarker(marker) {
      marker.remove();
      this.markers.indexOf(marker);
      var markerIndex = this.markers.indexOf(marker);

      if (markerIndex > -1) {
        this.markers.splice(markerIndex, 1);
      }
    }
  }, {
    key: "removeAllMarkers",
    value: function removeAllMarkers() {
      this.destroy();
    }
  }, {
    key: "init",
    value: function init(scene) {
      this.scene = scene;
      this.mapsService = scene.get(_types.TYPES.IMapService);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.markers.forEach(function (marker) {
        marker.remove();
      });
      this.markers = [];
      this.markerLayers.forEach(function (layer) {
        layer.destroy();
      });
      this.markerLayers = [];
    }
  }, {
    key: "removeMakerLayerMarker",
    value: function removeMakerLayerMarker(layer) {
      layer.destroy();
    }
  }]);
  return MarkerService;
}(), _temp)) || _class);
exports.default = MarkerService;
//# sourceMappingURL=MarkerService.js.map