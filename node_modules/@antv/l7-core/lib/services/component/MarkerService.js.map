{"version":3,"sources":["../../../src/services/component/MarkerService.ts"],"names":["MarkerService","container","scene","mapsService","markers","markerLayers","unAddMarkers","unAddMarkerLayers","markerLayer","map","getMarkerContainer","push","addTo","layer","destroy","indexOf","markerIndex","splice","marker","forEach","remove","get","TYPES","IMapService"],"mappings":"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","sourcesContent":["import { Container, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IMarkerServiceCfg,\n} from './IMarkerService';\n\n@injectable()\nexport default class MarkerService implements IMarkerService {\n  public container: HTMLElement;\n  private scene: Container;\n  private mapsService: IMapService;\n  private markers: IMarker[] = [];\n  private markerLayers: IMarkerLayer[] = [];\n  private unAddMarkers: IMarker[] = [];\n  private unAddMarkerLayers: IMarkerLayer[] = [];\n\n  public addMarkerLayer(markerLayer: IMarkerLayer): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    } else {\n      this.unAddMarkerLayers.push(markerLayer);\n    }\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer): void {\n    layer.destroy();\n    this.markerLayers.indexOf(layer);\n    const markerIndex = this.markerLayers.indexOf(layer);\n    if (markerIndex > -1) {\n      this.markerLayers.splice(markerIndex, 1);\n    }\n  }\n\n  public addMarker(marker: IMarker): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markers.push(marker);\n      marker.addTo(this.scene);\n    } else {\n      this.unAddMarkers.push(marker);\n    }\n  }\n\n  public addMarkers(): void {\n    this.unAddMarkers.forEach((marker: IMarker) => {\n      marker.addTo(this.scene);\n      this.markers.push(marker);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public addMarkerLayers(): void {\n    this.unAddMarkerLayers.forEach((markerLayer: IMarkerLayer) => {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public removeMarker(marker: IMarker): void {\n    marker.remove();\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n    }\n  }\n\n  public removeAllMarkers(): void {\n    this.destroy();\n  }\n\n  public init(scene: Container): void {\n    // this.container = cfg.container;\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n  }\n  public destroy(): void {\n    this.markers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.markers = [];\n    this.markerLayers.forEach((layer: IMarkerLayer) => {\n      layer.destroy();\n    });\n    this.markerLayers = [];\n  }\n\n  private removeMakerLayerMarker(layer: IMarkerLayer) {\n    layer.destroy();\n  }\n}\n"],"file":"MarkerService.js"}