{"version":3,"sources":["../../../src/services/component/IControlService.ts"],"names":["PositionType"],"mappings":";;;;;;IACYA,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y","sourcesContent":["import { Container } from 'inversify';\nexport enum PositionType {\n  'TOPRIGHT' = 'topright',\n  'TOPLEFT' = 'topleft',\n  'BOTTOMRIGHT' = 'bottomright',\n  'BOTTOMLEFT' = 'bottomleft',\n}\n\nexport type PositionName =\n  | 'topright'\n  | 'topleft'\n  | 'bottomright'\n  | 'bottomleft';\nexport interface IControlOption {\n  name: string;\n  position: PositionName;\n  [key: string]: any;\n}\nexport interface IControlServiceCfg {\n  container: HTMLElement;\n}\nexport interface IControlCorners {\n  [key: string]: HTMLElement;\n}\nexport interface IControl {\n  controlOption: IControlOption;\n  setPosition(pos: PositionType): void;\n  addTo(sceneContainer: Container): void;\n  onAdd(): HTMLElement;\n  onRemove(): void;\n  hide(): void;\n  show(): void;\n  remove(): void;\n}\nexport interface IControlService {\n  container: HTMLElement;\n  controlCorners: IControlCorners;\n  controlContainer: HTMLElement;\n  addControls(): void;\n  init(cfg: IControlServiceCfg, sceneContainer: Container): void;\n  addControl(ctr: IControl, sceneContainer: Container): void;\n  getControlByName(name: string | number): IControl | undefined;\n  removeControl(ctr: IControl): void;\n  destroy(): void;\n}\n"],"file":"IControlService.js"}