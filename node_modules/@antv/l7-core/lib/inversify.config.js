"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSceneContainer = createSceneContainer;
exports.createLayerContainer = createLayerContainer;
exports.default = exports.lazyMultiInject = exports.lazyInject = void 0;

require("reflect-metadata");

var _eventemitter = require("eventemitter3");

var _inversify = require("inversify");

var _inversifyInjectDecorators = _interopRequireDefault(require("inversify-inject-decorators"));

var _types = require("./types");

var _FontService = _interopRequireDefault(require("./services/asset/FontService"));

var _IconService = _interopRequireDefault(require("./services/asset/IconService"));

var _CameraService = _interopRequireDefault(require("./services/camera/CameraService"));

var _ControlService = _interopRequireDefault(require("./services/component/ControlService"));

var _MarkerService = _interopRequireDefault(require("./services/component/MarkerService"));

var _PopupService = _interopRequireDefault(require("./services/component/PopupService"));

var _ConfigService = _interopRequireDefault(require("./services/config/ConfigService"));

var _CoordinateSystemService = _interopRequireDefault(require("./services/coordinate/CoordinateSystemService"));

var _InteractionService = _interopRequireDefault(require("./services/interaction/InteractionService"));

var _PickingService = _interopRequireDefault(require("./services/interaction/PickingService"));

var _LayerService = _interopRequireDefault(require("./services/layer/LayerService"));

var _StyleAttributeService = _interopRequireDefault(require("./services/layer/StyleAttributeService"));

var _LogService = _interopRequireDefault(require("./services/log/LogService"));

var _SceneService = _interopRequireDefault(require("./services/scene/SceneService"));

var _ShaderModuleService = _interopRequireDefault(require("./services/shader/ShaderModuleService"));

var _ClearPass = _interopRequireDefault(require("./services/renderer/passes/ClearPass"));

var _MultiPassRenderer = _interopRequireDefault(require("./services/renderer/passes/MultiPassRenderer"));

var _PixelPickingPass = _interopRequireDefault(require("./services/renderer/passes/PixelPickingPass"));

var _BlurHPass = _interopRequireDefault(require("./services/renderer/passes/post-processing/BlurHPass"));

var _BlurVPass = _interopRequireDefault(require("./services/renderer/passes/post-processing/BlurVPass"));

var _ColorHalfTonePass = _interopRequireDefault(require("./services/renderer/passes/post-processing/ColorHalfTonePass"));

var _CopyPass = _interopRequireDefault(require("./services/renderer/passes/post-processing/CopyPass"));

var _HexagonalPixelatePass = _interopRequireDefault(require("./services/renderer/passes/post-processing/HexagonalPixelatePass"));

var _InkPass = _interopRequireDefault(require("./services/renderer/passes/post-processing/InkPass"));

var _NoisePass = _interopRequireDefault(require("./services/renderer/passes/post-processing/NoisePass"));

var _SepiaPass = _interopRequireDefault(require("./services/renderer/passes/post-processing/SepiaPass"));

var _PostProcessor = _interopRequireDefault(require("./services/renderer/passes/PostProcessor"));

var _RenderPass = _interopRequireDefault(require("./services/renderer/passes/RenderPass"));

var _TAAPass = _interopRequireDefault(require("./services/renderer/passes/TAAPass"));

var container = new _inversify.Container();
container.bind(_types.TYPES.IGlobalConfigService).to(_ConfigService.default).inSingletonScope();
container.bind(_types.TYPES.IShaderModuleService).to(_ShaderModuleService.default).inSingletonScope();
container.bind(_types.TYPES.ILogService).to(_LogService.default).inSingletonScope();
(0, _inversify.decorate)((0, _inversify.injectable)(), _eventemitter.EventEmitter);
container.bind(_types.TYPES.IEventEmitter).to(_eventemitter.EventEmitter);
var DECORATORS = (0, _inversifyInjectDecorators.default)(container, false);

var lazyInject = function lazyInject(serviceIdentifier) {
  var original = DECORATORS.lazyInject(serviceIdentifier);
  return function (proto, key, descriptor) {
    original.call(this, proto, key);

    if (descriptor) {
      descriptor.initializer = function () {
        return proto[key];
      };
    }
  };
};

exports.lazyInject = lazyInject;

var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {
  var original = DECORATORS.lazyMultiInject(serviceIdentifier);
  return function (proto, key, descriptor) {
    original.call(this, proto, key);

    if (descriptor) {
      descriptor.initializer = function () {
        return proto[key];
      };
    }
  };
};

exports.lazyMultiInject = lazyMultiInject;
var _default = container;
exports.default = _default;
var sceneIdCounter = 0;

function createSceneContainer() {
  var sceneContainer = new _inversify.Container();
  sceneContainer.parent = container;
  sceneContainer.bind(_types.TYPES.SceneID).toConstantValue("".concat(sceneIdCounter++));
  sceneContainer.bind(_types.TYPES.ILayerService).to(_LayerService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.ISceneService).to(_SceneService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.ICameraService).to(_CameraService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.ICoordinateSystemService).to(_CoordinateSystemService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IInteractionService).to(_InteractionService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IPickingService).to(_PickingService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IControlService).to(_ControlService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IMarkerService).to(_MarkerService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IIconService).to(_IconService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IFontService).to(_FontService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.IPopupService).to(_PopupService.default).inSingletonScope();
  sceneContainer.bind(_types.TYPES.INormalPass).to(_ClearPass.default).whenTargetNamed('clear');
  sceneContainer.bind(_types.TYPES.INormalPass).to(_PixelPickingPass.default).whenTargetNamed('pixelPicking');
  sceneContainer.bind(_types.TYPES.INormalPass).to(_RenderPass.default).whenTargetNamed('render');
  sceneContainer.bind(_types.TYPES.INormalPass).to(_TAAPass.default).whenTargetNamed('taa');
  sceneContainer.bind(_types.TYPES.IFactoryNormalPass).toFactory(function (context) {
    return function (named) {
      return context.container.getNamed(_types.TYPES.INormalPass, named);
    };
  });
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_CopyPass.default).whenTargetNamed('copy');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_BlurHPass.default).whenTargetNamed('blurH');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_BlurVPass.default).whenTargetNamed('blurV');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_NoisePass.default).whenTargetNamed('noise');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_SepiaPass.default).whenTargetNamed('sepia');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_ColorHalfTonePass.default).whenTargetNamed('colorHalftone');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_HexagonalPixelatePass.default).whenTargetNamed('hexagonalPixelate');
  sceneContainer.bind(_types.TYPES.IPostProcessingPass).to(_InkPass.default).whenTargetNamed('ink');
  sceneContainer.bind(_types.TYPES.IFactoryPostProcessingPass).toFactory(function (context) {
    return function (named) {
      var pass = context.container.getNamed(_types.TYPES.IPostProcessingPass, named);
      pass.setName(named);
      return pass;
    };
  });
  return sceneContainer;
}

function createLayerContainer(sceneContainer) {
  var layerContainer = new _inversify.Container();
  layerContainer.parent = sceneContainer;
  layerContainer.bind(_types.TYPES.IStyleAttributeService).to(_StyleAttributeService.default).inSingletonScope();
  layerContainer.bind(_types.TYPES.IMultiPassRenderer).to(_MultiPassRenderer.default).inSingletonScope();
  layerContainer.bind(_types.TYPES.IPostProcessor).to(_PostProcessor.default).inSingletonScope();
  return layerContainer;
}
//# sourceMappingURL=inversify.config.js.map