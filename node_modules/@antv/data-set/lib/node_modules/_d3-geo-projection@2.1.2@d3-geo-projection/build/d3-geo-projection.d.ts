export function geoAiry(): any;
export function geoAiryRaw(beta: any): {
    (x: any, y: any): number[];
    invert(x: any, y: any): number[];
};
export function geoAitoff(): any;
export function geoAitoffRaw(x: any, y: any): number[];
export namespace geoAitoffRaw {
    export function invert(x: any, y: any): any[];
}
export function geoArmadillo(): any;
export function geoArmadilloRaw(phi0: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoAugust(): any;
export function geoAugustRaw(lambda: any, phi: any): number[];
export namespace geoAugustRaw {
    export function invert(x: any, y: any): number[];
}
export function geoBaker(): any;
export function geoBakerRaw(lambda: any, phi: any): any[];
export namespace geoBakerRaw {
    export function invert(x: any, y: any): any[];
}
export function geoBerghaus(): any;
export function geoBerghausRaw(lobes: any): {
    (lambda: any, phi: any): any;
    invert(x: any, y: any): any;
};
export function geoBoggs(): any;
export function geoBoggsRaw(lambda: any, phi: any): number[];
export namespace geoBoggsRaw {
    export function invert(x: any, y: any): number[];
}
export function geoBonne(): any;
export function geoBonneRaw(phi0: any): {
    (lambda: any, phi: any): any[];
    invert(x: any, y: any): any[];
};
export function geoBottomley(): any;
export function geoBottomleyRaw(sinPsi: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoBromley(): any;
export function geoBromleyRaw(lambda: any, phi: any): number[];
export namespace geoBromleyRaw {
    export function invert(x: any, y: any): number[];
}
export function geoChamberlin(p0: any, p1: any, p2: any): any;
export function geoChamberlinRaw(p0: any, p1: any, p2: any): (lambda: any, phi: any) => any;
export function geoChamberlinAfrica(): any;
export function geoCollignon(): any;
export function geoCollignonRaw(lambda: any, phi: any): number[];
export namespace geoCollignonRaw {
    export function invert(x: any, y: any): number[];
}
export function geoCraig(): any;
export function geoCraigRaw(phi0: any): {
    (lambda: any, phi: any): any[];
    invert: (x: any, y: any) => any[];
};
export function geoCraster(): any;
export function geoCrasterRaw(lambda: any, phi: any): number[];
export namespace geoCrasterRaw {
    export function invert(x: any, y: any): number[];
}
export function geoCylindricalEqualArea(): any;
export function geoCylindricalEqualAreaRaw(phi0: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoCylindricalStereographic(): any;
export function geoCylindricalStereographicRaw(phi0: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoEckert1(): any;
export function geoEckert1Raw(lambda: any, phi: any): number[];
export namespace geoEckert1Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEckert2(): any;
export function geoEckert2Raw(lambda: any, phi: any): number[];
export namespace geoEckert2Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEckert3(): any;
export function geoEckert3Raw(lambda: any, phi: any): number[];
export namespace geoEckert3Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEckert4(): any;
export function geoEckert4Raw(lambda: any, phi: any): number[];
export namespace geoEckert4Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEckert5(): any;
export function geoEckert5Raw(lambda: any, phi: any): number[];
export namespace geoEckert5Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEckert6(): any;
export function geoEckert6Raw(lambda: any, phi: any): number[];
export namespace geoEckert6Raw {
    export function invert(x: any, y: any): number[];
}
export function geoEisenlohr(): any;
export function geoEisenlohrRaw(lambda: any, phi: any): number[];
export namespace geoEisenlohrRaw {
    export function invert(x: any, y: any): number[];
}
export function geoFahey(): any;
export function geoFaheyRaw(lambda: any, phi: any): number[];
export namespace geoFaheyRaw {
    export function invert(x: any, y: any): number[];
}
export function geoFoucaut(): any;
export function geoFoucautRaw(lambda: any, phi: any): number[];
export namespace geoFoucautRaw {
    export function invert(x: any, y: any): number[];
}
export function geoGilbert(projectionType: any): any;
export function geoGingery(): any;
export function geoGingeryRaw(rho: any, n: any): {
    (lambda: any, phi: any): any;
    invert(x: any, y: any): any;
};
export function geoGinzburg4(): any;
export function geoGinzburg4Raw(lambda: any, phi: any): number[];
export namespace geoGinzburg4Raw {
    export function invert(x: any, y: any): any[];
}
export function geoGinzburg5(): any;
export function geoGinzburg5Raw(lambda: any, phi: any): number[];
export namespace geoGinzburg5Raw { }
export function geoGinzburg6(): any;
export function geoGinzburg6Raw(lambda: any, phi: any): number[];
export namespace geoGinzburg6Raw { }
export function geoGinzburg8(): any;
export function geoGinzburg8Raw(lambda: any, phi: any): number[];
export namespace geoGinzburg8Raw {
    export function invert(x: any, y: any): any[];
}
export function geoGinzburg9(): any;
export function geoGinzburg9Raw(lambda: any, phi: any): number[];
export namespace geoGinzburg9Raw { }
export function geoGringorten(): any;
export function geoGringortenRaw(lambda: any, phi: any): number[];
export namespace geoGringortenRaw {
    export function invert(x: any, y: any): number[];
}
export function geoGuyou(): any;
export function geoGuyouRaw(lambda: any, phi: any): number[];
export namespace geoGuyouRaw {
    export function invert(x: any, y: any): number[];
}
export function geoHammer(): any;
export function geoHammerRaw(A: any, B: any, ...args: any[]): any;
export function geoHammerRetroazimuthal(): any;
export function geoHammerRetroazimuthalRaw(phi0: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): any;
};
export function geoHealpix(): any;
export function geoHealpixRaw(H: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoHill(): any;
export function geoHillRaw(K: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoHomolosine(): any;
export function geoHomolosineRaw(lambda: any, phi: any): any;
export namespace geoHomolosineRaw {
    export function invert(x: any, y: any): any[];
}
export function geoInterrupt(project: any, lobes: any): any;
export function geoInterruptedBoggs(): any;
export function geoInterruptedHomolosine(): any;
export function geoInterruptedMollweide(): any;
export function geoInterruptedMollweideHemispheres(): any;
export function geoInterruptedSinuMollweide(): any;
export function geoInterruptedSinusoidal(): any;
export function geoKavrayskiy7(): any;
export function geoKavrayskiy7Raw(lambda: any, phi: any): any[];
export namespace geoKavrayskiy7Raw {
    export function invert(x: any, y: any): any[];
}
export function geoLagrange(): any;
export function geoLagrangeRaw(n: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoLarrivee(): any;
export function geoLarriveeRaw(lambda: any, phi: any): number[];
export namespace geoLarriveeRaw {
    export function invert(x: any, y: any): number[];
}
export function geoLaskowski(): any;
export function geoLaskowskiRaw(lambda: any, phi: any): number[];
export namespace geoLaskowskiRaw {
    export function invert(x: any, y: any): number[];
}
export function geoLittrow(): any;
export function geoLittrowRaw(lambda: any, phi: any): number[];
export namespace geoLittrowRaw {
    export function invert(x: any, y: any): number[];
}
export function geoLoximuthal(): any;
export function geoLoximuthalRaw(phi0: any): {
    (lambda: any, phi: any): any[];
    invert(x: any, y: any): any[];
};
export function geoMiller(): any;
export function geoMillerRaw(lambda: any, phi: any): any[];
export namespace geoMillerRaw {
    export function invert(x: any, y: any): any[];
}
export function geoModifiedStereographic(coefficients: any, rotate: any): any;
export function geoModifiedStereographicRaw(C: any): {
    (lambda: any, phi: any): any[];
    invert(x: any, y: any): number[];
};
export function geoModifiedStereographicAlaska(): any;
export function geoModifiedStereographicGs48(): any;
export function geoModifiedStereographicGs50(): any;
export function geoModifiedStereographicMiller(): any;
export function geoModifiedStereographicLee(): any;
export function geoMollweide(): any;
export function geoMollweideRaw(lambda: any, phi: any): number[];
export namespace geoMollweideRaw { }
export function geoMtFlatPolarParabolic(): any;
export function geoMtFlatPolarParabolicRaw(lambda: any, phi: any): number[];
export namespace geoMtFlatPolarParabolicRaw {
    export function invert(x: any, y: any): number[];
}
export function geoMtFlatPolarQuartic(): any;
export function geoMtFlatPolarQuarticRaw(lambda: any, phi: any): number[];
export namespace geoMtFlatPolarQuarticRaw {
    export function invert(x: any, y: any): number[];
}
export function geoMtFlatPolarSinusoidal(): any;
export function geoMtFlatPolarSinusoidalRaw(lambda: any, phi: any): number[];
export namespace geoMtFlatPolarSinusoidalRaw {
    export function invert(x: any, y: any): number[];
}
export function geoNaturalEarth(): any;
export function geoNaturalEarthRaw(lambda: any, phi: any): number[];
export namespace geoNaturalEarthRaw {
    export function invert(x: any, y: any): any[];
}
export function geoNaturalEarth2(): any;
export function geoNaturalEarth2Raw(lambda: any, phi: any): number[];
export namespace geoNaturalEarth2Raw {
    export function invert(x: any, y: any): any[];
}
export function geoNellHammer(): any;
export function geoNellHammerRaw(lambda: any, phi: any): number[];
export namespace geoNellHammerRaw {
    export function invert(x: any, y: any): any[];
}
export function geoPatterson(): any;
export function geoPattersonRaw(lambda: any, phi: any): any[];
export namespace geoPattersonRaw {
    export function invert(x: any, y: any): any[];
}
export function geoPolyconic(): any;
export function geoPolyconicRaw(lambda: any, phi: any): any[];
export namespace geoPolyconicRaw {
    export function invert(x: any, y: any): any[];
}
export function geoPolyhedral(root: any, face: any, r: any): any;
export function geoPolyhedralButterfly(faceProjection: any): any;
export function geoPolyhedralCollignon(faceProjection: any): any;
export function geoPolyhedralWaterman(faceProjection: any): any;
export function geoProject(object: any, projection: any): {
    type: string;
    features: any;
} | {
    type: string;
    geometries: any;
} | {
    type: string;
    coordinates: any;
} | {
    type: string;
    id: any;
    properties: any;
    geometry: {
        type: string;
        geometries: any;
    } | {
        type: string;
        coordinates: any;
    };
};
export function geoGringortenQuincuncial(): any;
export function geoPeirceQuincuncial(): any;
export function geoPierceQuincuncial(): any;
export function geoQuantize(input: any, digits: any): any;
export function geoQuincuncial(project: any): any;
export function geoRectangularPolyconic(): any;
export function geoRectangularPolyconicRaw(phi0: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): any[];
};
export function geoRobinson(): any;
export function geoRobinsonRaw(lambda: any, phi: any): number[];
export namespace geoRobinsonRaw {
    export function invert(x: any, y: any): number[];
}
export function geoSatellite(): any;
export function geoSatelliteRaw(P: any, omega: any): {
    (lambda: any, phi: any): number[];
    invert(x: any, y: any): number[];
};
export function geoSinuMollweide(): any;
export function geoSinuMollweideRaw(lambda: any, phi: any): any;
export namespace geoSinuMollweideRaw {
    export function invert(x: any, y: any): any[];
}
export function geoSinusoidal(): any;
export function geoSinusoidalRaw(lambda: any, phi: any): any[];
export namespace geoSinusoidalRaw {
    export function invert(x: any, y: any): any[];
}
export function geoStitch(input: any): any;
export function geoTimes(): any;
export function geoTimesRaw(lambda: any, phi: any): number[];
export namespace geoTimesRaw {
    export function invert(x: any, y: any): number[];
}
export function geoTwoPointAzimuthal(p0: any, p1: any): any;
export function geoTwoPointAzimuthalRaw(d: any): {
    (lambda: any, phi: any): any;
    invert(x: any, y: any): any;
};
export function geoTwoPointAzimuthalUsa(): any;
export function geoTwoPointEquidistant(p0: any, p1: any): any;
export function geoTwoPointEquidistantRaw(z0: any): any;
export function geoTwoPointEquidistantUsa(): any;
export function geoVanDerGrinten(): any;
export function geoVanDerGrintenRaw(lambda: any, phi: any): any[];
export namespace geoVanDerGrintenRaw {
    export function invert(x: any, y: any): any[];
}
export function geoVanDerGrinten2(): any;
export function geoVanDerGrinten2Raw(lambda: any, phi: any): any[];
export namespace geoVanDerGrinten2Raw {
    export function invert(x: any, y: any): number[];
}
export function geoVanDerGrinten3(): any;
export function geoVanDerGrinten3Raw(lambda: any, phi: any): any[];
export namespace geoVanDerGrinten3Raw {
    export function invert(x: any, y: any): any[];
}
export function geoVanDerGrinten4(): any;
export function geoVanDerGrinten4Raw(lambda: any, phi: any): any[];
export namespace geoVanDerGrinten4Raw {
    export function invert(x: any, y: any): any[];
}
export function geoWagner4(): any;
export function geoWagner4Raw(lambda: any, phi: any): number[];
export namespace geoWagner4Raw { }
export function geoWagner6(): any;
export function geoWagner6Raw(lambda: any, phi: any): any[];
export namespace geoWagner6Raw {
    export function invert(x: any, y: any): any[];
}
export function geoWagner7(): any;
export function geoWagner7Raw(lambda: any, phi: any): number[];
export namespace geoWagner7Raw {
    export function invert(x: any, y: any): number[];
}
export function geoWiechel(): any;
export function geoWiechelRaw(lambda: any, phi: any): number[];
export namespace geoWiechelRaw {
    export function invert(x: any, y: any): number[];
}
export function geoWinkel3(): any;
export function geoWinkel3Raw(lambda: any, phi: any): number[];
export namespace geoWinkel3Raw {
    export function invert(x: any, y: any): any[];
}
export var __esModule: boolean;
