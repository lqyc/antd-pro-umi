"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inversify = require("inversify");

var _regl = _interopRequireDefault(require("regl"));

var _ReglAttribute = _interopRequireDefault(require("./ReglAttribute"));

var _ReglBuffer = _interopRequireDefault(require("./ReglBuffer"));

var _ReglElements = _interopRequireDefault(require("./ReglElements"));

var _ReglFramebuffer = _interopRequireDefault(require("./ReglFramebuffer"));

var _ReglModel = _interopRequireDefault(require("./ReglModel"));

var _ReglTexture2D = _interopRequireDefault(require("./ReglTexture2D"));

var _dec, _class, _temp;

var ReglRendererService = (_dec = (0, _inversify.injectable)(), _dec(_class = (_temp = function () {
  function ReglRendererService() {
    var _this = this;

    (0, _classCallCheck2.default)(this, ReglRendererService);
    this.gl = void 0;
    this.$container = void 0;
    this.canvas = void 0;
    this.width = void 0;
    this.height = void 0;
    this.isDirty = void 0;

    this.createModel = function (options) {
      return new _ReglModel.default(_this.gl, options);
    };

    this.createAttribute = function (options) {
      return new _ReglAttribute.default(_this.gl, options);
    };

    this.createBuffer = function (options) {
      return new _ReglBuffer.default(_this.gl, options);
    };

    this.createElements = function (options) {
      return new _ReglElements.default(_this.gl, options);
    };

    this.createTexture2D = function (options) {
      return new _ReglTexture2D.default(_this.gl, options);
    };

    this.createFramebuffer = function (options) {
      return new _ReglFramebuffer.default(_this.gl, options);
    };

    this.useFramebuffer = function (framebuffer, drawCommands) {
      _this.gl({
        framebuffer: framebuffer ? framebuffer.get() : null
      })(drawCommands);
    };

    this.clear = function (options) {
      var color = options.color,
          depth = options.depth,
          stencil = options.stencil,
          _options$framebuffer = options.framebuffer,
          framebuffer = _options$framebuffer === void 0 ? null : _options$framebuffer;
      var reglClearOptions = {
        color: color,
        depth: depth,
        stencil: stencil
      };
      reglClearOptions.framebuffer = framebuffer === null ? framebuffer : framebuffer.get();

      _this.gl.clear(reglClearOptions);
    };

    this.viewport = function (_ref) {
      var x = _ref.x,
          y = _ref.y,
          width = _ref.width,
          height = _ref.height;

      _this.gl._gl.viewport(x, y, width, height);

      _this.width = width;
      _this.height = height;

      _this.gl._refresh();
    };

    this.readPixels = function (options) {
      var framebuffer = options.framebuffer,
          x = options.x,
          y = options.y,
          width = options.width,
          height = options.height;
      var readPixelsOptions = {
        x: x,
        y: y,
        width: width,
        height: height
      };

      if (framebuffer) {
        readPixelsOptions.framebuffer = framebuffer.get();
      }

      return _this.gl.read(readPixelsOptions);
    };

    this.getViewportSize = function () {
      return {
        width: _this.gl._gl.drawingBufferWidth,
        height: _this.gl._gl.drawingBufferHeight
      };
    };

    this.getContainer = function () {
      var _this$canvas;

      return (_this$canvas = _this.canvas) === null || _this$canvas === void 0 ? void 0 : _this$canvas.parentElement;
    };

    this.getCanvas = function () {
      return _this.canvas;
    };

    this.getGLContext = function () {
      return _this.gl._gl;
    };

    this.destroy = function () {
      _this.gl.destroy();
    };
  }

  (0, _createClass2.default)(ReglRendererService, [{
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(canvas, cfg) {
        var _this2 = this;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.canvas = canvas;
                _context.next = 3;
                return new Promise(function (resolve, reject) {
                  (0, _regl.default)({
                    canvas: _this2.canvas,
                    attributes: {
                      alpha: true,
                      antialias: cfg.antialias,
                      premultipliedAlpha: true,
                      preserveDrawingBuffer: cfg.preserveDrawingBuffer
                    },
                    extensions: ['OES_element_index_uint', 'OES_standard_derivatives', 'angle_instanced_arrays'],
                    optionalExtensions: ['oes_texture_float_linear', 'OES_texture_float', 'EXT_texture_filter_anisotropic', 'EXT_blend_minmax', 'WEBGL_depth_texture'],
                    profile: true,
                    onDone: function onDone(err, r) {
                      if (err || !r) {
                        reject(err);
                      }

                      resolve(r);
                    }
                  });
                });

              case 3:
                this.gl = _context.sent;

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x, _x2) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "setBaseState",
    value: function setBaseState() {
      this.gl({
        cull: {
          enable: false,
          face: 'back'
        },
        viewport: {
          x: 0,
          y: 0,
          height: this.width,
          width: this.height
        },
        blend: {
          enable: false,
          equation: 'add'
        },
        framebuffer: null
      });

      this.gl._refresh();
    }
  }, {
    key: "setCustomLayerDefaults",
    value: function setCustomLayerDefaults() {
      var gl = this.getGLContext();
      gl.disable(gl.CULL_FACE);
    }
  }, {
    key: "setDirty",
    value: function setDirty(flag) {
      this.isDirty = flag;
    }
  }, {
    key: "getDirty",
    value: function getDirty() {
      return this.isDirty;
    }
  }]);
  return ReglRendererService;
}(), _temp)) || _class);
exports.default = ReglRendererService;
//# sourceMappingURL=index.js.map