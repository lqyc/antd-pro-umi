{"version":3,"sources":["../../src/utils/polylineNormal.ts"],"names":["computeMiter","tangent","miter","lineA","lineB","halfThick","vec2","add","normalize","fromValues","tmp","dot","computeNormal","out","dir","set","direction","a","b","sub","extrusions","positions","miters","point","normal","scale","addNext","push","length","lineSegmentDistance","b1","a1","dx","dy","Math","sqrt","isPointEqual","points","closed","indexOffset","isDash","create","started","lineNormal","count","miterLimit","attrPos","attrIndex","attrDistance","slice","total","i","index","last","cur","next","nextIndex","d","flatCur","flatLast","lineDistance","flatNext","miterLen","flip","bevel","abs","copy","pickData","totalDistance","normals"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACO,SAASA,YAAT,CACLC,OADK,EAELC,KAFK,EAGLC,KAHK,EAILC,KAJK,EAKLC,SALK,EAML;AACAC,iBAAKC,GAAL,CAASN,OAAT,EAAkBE,KAAlB,EAAyBC,KAAzB;;AACAE,iBAAKE,SAAL,CAAeP,OAAf,EAAwBA,OAAxB;;AACAC,EAAAA,KAAK,GAAGI,eAAKG,UAAL,CAAgB,CAACR,OAAO,CAAC,CAAD,CAAxB,EAA6BA,OAAO,CAAC,CAAD,CAApC,CAAR;;AACA,MAAMS,GAAG,GAAGJ,eAAKG,UAAL,CAAgB,CAACN,KAAK,CAAC,CAAD,CAAtB,EAA2BA,KAAK,CAAC,CAAD,CAAhC,CAAZ;;AACA,SAAOE,SAAS,GAAGC,eAAKK,GAAL,CAAST,KAAT,EAAgBQ,GAAhB,CAAnB;AACD;;AACM,SAASE,aAAT,CAAuBC,GAAvB,EAAkCC,GAAlC,EAA6C;AAClD,SAAOR,eAAKS,GAAL,CAASF,GAAT,EAAc,CAACC,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,CAAP;AACD;;AACM,SAASE,SAAT,CAAmBH,GAAnB,EAA8BI,CAA9B,EAAmDC,CAAnD,EAAwE;AAG7EZ,iBAAKa,GAAL,CAASN,GAAT,EAAcI,CAAd,EAAiBC,CAAjB;;AACAZ,iBAAKE,SAAL,CAAeK,GAAf,EAAoBA,GAApB;;AACA,SAAOA,GAAP;AACD;;AACD,SAASO,UAAT,CACEC,SADF,EAEER,GAFF,EAGES,MAHF,EAIEC,KAJF,EAKEC,MALF,EAMEC,KANF,EAOE;AACAC,EAAAA,OAAO,CAACb,GAAD,EAAMS,MAAN,EAAcE,MAAd,EAAsB,CAACC,KAAvB,CAAP;AACAC,EAAAA,OAAO,CAACb,GAAD,EAAMS,MAAN,EAAcE,MAAd,EAAsBC,KAAtB,CAAP;AACAJ,EAAAA,SAAS,CAACM,IAAV,CAAeJ,KAAK,CAAC,CAAD,CAApB,EAAyBA,KAAK,CAAC,CAAD,CAA9B,EAAmC,CAAnC;AACAF,EAAAA,SAAS,CAACM,IAAV,CAAeJ,KAAK,CAAC,CAAD,CAApB,EAAyBA,KAAK,CAAC,CAAD,CAA9B,EAAmC,CAAnC;AACD;;AAED,SAASG,OAAT,CACEb,GADF,EAEES,MAFF,EAGEE,MAHF,EAIEI,MAJF,EAKE;AACAf,EAAAA,GAAG,CAACc,IAAJ,CAASH,MAAM,CAAC,CAAD,CAAf,EAAoBA,MAAM,CAAC,CAAD,CAA1B,EAA+B,CAA/B;AACAF,EAAAA,MAAM,CAACK,IAAP,CAAYC,MAAZ;AACD;;AAED,SAASC,mBAAT,CAA6BC,EAA7B,EAAuCC,EAAvC,EAAiD;AAC/C,MAAMC,EAAE,GAAGD,EAAE,CAAC,CAAD,CAAF,GAAQD,EAAE,CAAC,CAAD,CAArB;AACA,MAAMG,EAAE,GAAGF,EAAE,CAAC,CAAD,CAAF,GAAQD,EAAE,CAAC,CAAD,CAArB;AACA,SAAOI,IAAI,CAACC,IAAL,CAAUH,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAP;AACD;;AAED,SAASG,YAAT,CAAsBnB,CAAtB,EAA+BC,CAA/B,EAAwC;AACtC,SAAOD,CAAC,CAAC,CAAD,CAAD,KAASC,CAAC,CAAC,CAAD,CAAV,IAAiBD,CAAC,CAAC,CAAD,CAAD,KAASC,CAAC,CAAC,CAAD,CAAlC;AACD;;AAEc,kBACbmB,MADa,EAEbC,MAFa,EAGbC,WAHa,EAKb;AAAA,MADAC,MACA,uEADkB,IAClB;;AACA,MAAMrC,KAAK,GAAGG,eAAKG,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAd;;AACA,MAAML,KAAK,GAAGE,eAAKG,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAd;;AACA,MAAMR,OAAO,GAAGK,eAAKG,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAhB;;AACA,MAAMP,KAAW,GAAGI,eAAKmC,MAAL,EAApB;;AACA,MAAIC,OAAO,GAAG,KAAd;AACA,MAAIC,UAAU,GAAG,IAAjB;;AACA,MAAMjC,GAAG,GAAGJ,eAAKmC,MAAL,EAAZ;;AACA,MAAIG,KAAK,GAAGL,WAAW,IAAI,CAA3B;AACA,MAAMM,UAAU,GAAG,CAAnB;AAEA,MAAMhC,GAAa,GAAG,EAAtB;AACA,MAAMiC,OAAiB,GAAG,EAA1B;AACA,MAAMC,SAAmB,GAAG,EAA5B;AACA,MAAMzB,MAAgB,GAAG,EAAzB;AACA,MAAM0B,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,CAArB;;AACA,MAAIV,MAAJ,EAAY;AACVD,IAAAA,MAAM,GAAGA,MAAM,CAACY,KAAP,EAAT;AACAZ,IAAAA,MAAM,CAACV,IAAP,CAAYU,MAAM,CAAC,CAAD,CAAlB;AACD;;AAED,MAAMa,KAAK,GAAGb,MAAM,CAACT,MAArB;;AAEA,OAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC9B,QAAMC,KAAK,GAAGR,KAAd;;AACA,QAAMS,IAAI,GAAG/C,eAAKG,UAAL,CAAgB4B,MAAM,CAACc,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAhB,EAAkCd,MAAM,CAACc,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAlC,CAAb;;AACA,QAAMG,GAAG,GAAGhD,eAAKG,UAAL,CAAgB4B,MAAM,CAACc,CAAD,CAAN,CAAU,CAAV,CAAhB,EAA8Bd,MAAM,CAACc,CAAD,CAAN,CAAU,CAAV,CAA9B,CAAZ;;AACA,QAAII,IAAI,GACNJ,CAAC,GAAGd,MAAM,CAACT,MAAP,GAAgB,CAApB,GACItB,eAAKG,UAAL,CAAgB4B,MAAM,CAACc,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAhB,EAAkCd,MAAM,CAACc,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAlC,CADJ,GAEI,IAHN;;AAKA,QAAIf,YAAY,CAACiB,IAAD,EAAOC,GAAP,CAAhB,EAA6B;AAC3B;AACD;;AACD,QAAIC,IAAJ,EAAU;AACR,UAAIC,SAAS,GAAGL,CAAC,GAAG,CAApB;;AAEA,aAAOI,IAAI,IAAInB,YAAY,CAACkB,GAAD,EAAMC,IAAN,CAA3B,EAAwC;AACtCA,QAAAA,IAAI,GACFC,SAAS,GAAGnB,MAAM,CAACT,MAAP,GAAgB,CAA5B,GACItB,eAAKG,UAAL,CAAgB4B,MAAM,CAAC,EAAEmB,SAAH,CAAN,CAAoB,CAApB,CAAhB,EAAwCnB,MAAM,CAACmB,SAAD,CAAN,CAAkB,CAAlB,CAAxC,CADJ,GAEI,IAHN;AAID;AACF;;AACD,QAAIC,CAAC,GAAG,CAAR;AACA,QAAMC,OAAO,GAAG,2BAAa,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAb,CAAhB;AACA,QAAMK,QAAQ,GAAG,2BAAa,CAACN,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAb,CAAjB;;AACA,QAAIb,MAAJ,EAAY;AACV,UAAMoB,YAAY,GAAG/B,mBAAmB,CAAC6B,OAAD,EAAUC,QAAV,CAAxC;AACAF,MAAAA,CAAC,GAAGG,YAAY,GAAGZ,YAAY,CAACA,YAAY,CAACpB,MAAb,GAAsB,CAAvB,CAA/B;AACD;;AAEDZ,IAAAA,SAAS,CAACb,KAAD,EAAQuD,OAAR,EAAiBC,QAAjB,CAAT;;AACA,QAAI,CAAChB,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAGrC,eAAKmC,MAAL,EAAb;AACA7B,MAAAA,aAAa,CAAC+B,UAAD,EAAaxC,KAAb,CAAb;AACD;;AAED,QAAI,CAACuC,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAV;AACAtB,MAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuB+B,IAAvB,EAA6BV,UAA7B,EAAyC,CAAzC,CAAV;AACD;;AAEDI,IAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;;AAGA,QAAI,CAACG,IAAL,EAAW;AAET3C,MAAAA,aAAa,CAAC+B,UAAD,EAAaxC,KAAb,CAAb;AACAiB,MAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAK,MAAAA,YAAY,CAACrB,IAAb,CAAkB8B,CAAlB,EAAqBA,CAArB;AACAV,MAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AACAR,MAAAA,KAAK,IAAI,CAAT;AACD,KAPD,MAOO;AACL,UAAMiB,QAAQ,GAAG,2BAAa,CAACN,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAb,CAAjB;AAEAvC,MAAAA,SAAS,CAACZ,KAAD,EAAQyD,QAAR,EAAkBH,OAAlB,CAAT;AAGA,UAAII,QAAQ,GAAG9D,YAAY,CACzBC,OADyB,EAEzBK,eAAKG,UAAL,CAAgBP,KAAK,CAAC,CAAD,CAArB,EAA0BA,KAAK,CAAC,CAAD,CAA/B,CAFyB,EAGzBC,KAHyB,EAIzBC,KAJyB,EAKzB,CALyB,CAA3B;AASA,UAAM2D,IAAI,GAAGzD,eAAKK,GAAL,CAASV,OAAT,EAAkB0C,UAAlB,IAAgC,CAAhC,GAAoC,CAAC,CAArC,GAAyC,CAAtD;AACA,UAAMqB,KAAK,GAAG9B,IAAI,CAAC+B,GAAL,CAASH,QAAT,IAAqBjB,UAAnC;;AAMA,UAAIX,IAAI,CAAC+B,GAAL,CAASH,QAAT,IAAqB,IAAzB,EAA+B;AAC7B1C,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAI,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AACAL,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AACAxC,QAAAA,aAAa,CAACF,GAAD,EAAMN,KAAN,CAAb;;AACAE,uBAAK4D,IAAL,CAAUvB,UAAV,EAAsBjC,GAAtB;;AAEAU,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAK,QAAAA,YAAY,CAACrB,IAAb,CAAkB8B,CAAlB,EAAqBA,CAArB,EAAwBA,CAAxB,EAA2BA,CAA3B;AAGAb,QAAAA,KAAK,IAAI,CAAT;AACA;AACD;;AACD,UAAIoB,KAAJ,EAAW;AACTF,QAAAA,QAAQ,GAAGjB,UAAX;AAGAzB,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AAEAI,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AAGAL,QAAAA,SAAS,CAACpB,IAAV,OAAAoB,SAAS,mCACHgB,IAAI,KAAK,CAAT,GACA,CAACX,KAAK,GAAG,CAAT,EAAYA,KAAK,GAAG,CAApB,EAAuBA,KAAK,GAAG,CAA/B,CADA,GAEA,CAACA,KAAK,GAAG,CAAT,EAAYA,KAAK,GAAG,CAApB,EAAuBA,KAAK,GAAG,CAA/B,CAHG,EAAT;AAMAxC,QAAAA,aAAa,CAACF,GAAD,EAAMN,KAAN,CAAb;;AACAE,uBAAK4D,IAAL,CAAUvB,UAAV,EAAsBjC,GAAtB;;AAEAU,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAK,QAAAA,YAAY,CAACrB,IAAb,CAAkB8B,CAAlB,EAAqBA,CAArB,EAAwBA,CAAxB,EAA2BA,CAA3B;AAGAb,QAAAA,KAAK,IAAI,CAAT;AACD,OAvBD,MAuBO;AAELxB,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAI,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AAGA1B,QAAAA,OAAO,CAACb,GAAD,EAAMS,MAAN,EAAcqB,UAAd,EAA0BmB,QAAQ,GAAG,CAACC,IAAtC,CAAP;AACAjB,QAAAA,OAAO,CAACnB,IAAR,CAAa2B,GAAG,CAAC,CAAD,CAAhB,EAAqBA,GAAG,CAAC,CAAD,CAAxB,EAA6B,CAA7B;AACAP,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AACAL,QAAAA,SAAS,CAACpB,IAAV,CAAeyB,KAAK,GAAG,CAAvB,EAA0BA,KAAK,GAAG,CAAlC,EAAqCA,KAAK,GAAG,CAA7C;AACAxC,QAAAA,aAAa,CAACF,GAAD,EAAMN,KAAN,CAAb;;AACAE,uBAAK4D,IAAL,CAAUvB,UAAV,EAAsBjC,GAAtB;;AAEAU,QAAAA,UAAU,CAAC0B,OAAD,EAAUjC,GAAV,EAAeS,MAAf,EAAuBgC,GAAvB,EAA4BX,UAA5B,EAAwC,CAAxC,CAAV;AACAK,QAAAA,YAAY,CAACrB,IAAb,CAAkB8B,CAAlB,EAAqBA,CAArB,EAAwBA,CAAxB,EAA2BA,CAA3B,EAA8BA,CAA9B;AAGAb,QAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;;AACD,MAAMuB,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIhB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG7B,MAAM,CAACM,MAA3B,EAAmCuB,EAAC,EAApC,EAAwC;AACtC,QAAMiB,aAAa,GAAGpB,YAAY,CAACA,YAAY,CAACpB,MAAb,GAAsB,CAAvB,CAAlC;AACAuC,IAAAA,QAAQ,CAACxC,IAAT,CACEmB,OAAO,CAACK,EAAC,GAAG,CAAL,CADT,EAEEL,OAAO,CAACK,EAAC,GAAG,CAAJ,GAAQ,CAAT,CAFT,EAGEL,OAAO,CAACK,EAAC,GAAG,CAAJ,GAAQ,CAAT,CAHT,EAIEH,YAAY,CAACG,EAAD,CAJd,EAKE7B,MAAM,CAAC6B,EAAD,CALR,EAMEiB,aANF;AAQD;;AACD,SAAO;AACLC,IAAAA,OAAO,EAAExD,GADJ;AAELkC,IAAAA,SAAS,EAATA,SAFK;AAGLD,IAAAA,OAAO,EAAEqB;AAHJ,GAAP;AAKD","sourcesContent":["import { aProjectFlat, lngLatToMeters } from '@antv/l7-utils';\nimport { vec2 } from 'gl-matrix';\nexport function computeMiter(\n  tangent: vec2,\n  miter: vec2,\n  lineA: vec2,\n  lineB: vec2,\n  halfThick: number,\n) {\n  vec2.add(tangent, lineA, lineB);\n  vec2.normalize(tangent, tangent);\n  miter = vec2.fromValues(-tangent[1], tangent[0]);\n  const tmp = vec2.fromValues(-lineA[1], lineA[0]);\n  return halfThick / vec2.dot(miter, tmp);\n}\nexport function computeNormal(out: vec2, dir: vec2) {\n  return vec2.set(out, -dir[1], dir[0]);\n}\nexport function direction(out: vec2, a: [number, number], b: [number, number]) {\n  // const a1 = aProjectFlat([a[0], a[1]]) as [number, number];\n  // const b1 = aProjectFlat([b[0], b[1]]) as [number, number];\n  vec2.sub(out, a, b);\n  vec2.normalize(out, out);\n  return out;\n}\nfunction extrusions(\n  positions: number[],\n  out: number[],\n  miters: number[],\n  point: vec2,\n  normal: vec2,\n  scale: number,\n) {\n  addNext(out, miters, normal, -scale);\n  addNext(out, miters, normal, scale);\n  positions.push(point[0], point[1], 0);\n  positions.push(point[0], point[1], 0);\n}\n\nfunction addNext(\n  out: number[],\n  miters: number[],\n  normal: vec2,\n  length: number,\n) {\n  out.push(normal[0], normal[1], 0);\n  miters.push(length);\n}\n\nfunction lineSegmentDistance(b1: vec2, a1: vec2) {\n  const dx = a1[0] - b1[0];\n  const dy = a1[1] - b1[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction isPointEqual(a: vec2, b: vec2) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\nexport default function(\n  points: number[][],\n  closed: boolean,\n  indexOffset: number,\n  isDash: boolean = true,\n) {\n  const lineA = vec2.fromValues(0, 0);\n  const lineB = vec2.fromValues(0, 0);\n  const tangent = vec2.fromValues(0, 0);\n  const miter: vec2 = vec2.create();\n  let started = false;\n  let lineNormal = null;\n  const tmp = vec2.create();\n  let count = indexOffset || 0;\n  const miterLimit = 4;\n\n  const out: number[] = [];\n  const attrPos: number[] = [];\n  const attrIndex: number[] = [];\n  const miters: number[] = [];\n  const attrDistance = [0, 0];\n  if (closed) {\n    points = points.slice();\n    points.push(points[0]);\n  }\n\n  const total = points.length;\n\n  for (let i = 1; i < total; i++) {\n    const index = count;\n    const last = vec2.fromValues(points[i - 1][0], points[i - 1][1]);\n    const cur = vec2.fromValues(points[i][0], points[i][1]);\n    let next =\n      i < points.length - 1\n        ? vec2.fromValues(points[i + 1][0], points[i + 1][1])\n        : null;\n    // 如果当前点和前一点相同，跳过\n    if (isPointEqual(last, cur)) {\n      continue;\n    }\n    if (next) {\n      let nextIndex = i + 1;\n      // 找到不相同的下一点\n      while (next && isPointEqual(cur, next)) {\n        next =\n          nextIndex < points.length - 1\n            ? vec2.fromValues(points[++nextIndex][0], points[nextIndex][1])\n            : null;\n      }\n    }\n    let d = 0;\n    const flatCur = aProjectFlat([cur[0], cur[1]]) as [number, number];\n    const flatLast = aProjectFlat([last[0], last[1]]) as [number, number];\n    if (isDash) {\n      const lineDistance = lineSegmentDistance(flatCur, flatLast);\n      d = lineDistance + attrDistance[attrDistance.length - 1];\n    }\n\n    direction(lineA, flatCur, flatLast);\n    if (!lineNormal) {\n      lineNormal = vec2.create();\n      computeNormal(lineNormal, lineA);\n    }\n\n    if (!started) {\n      started = true;\n      extrusions(attrPos, out, miters, last, lineNormal, 1);\n    }\n\n    attrIndex.push(index + 0, index + 2, index + 1);\n\n    // no miter, simple segment\n    if (!next) {\n      // reset normal\n      computeNormal(lineNormal, lineA);\n      extrusions(attrPos, out, miters, cur, lineNormal, 1);\n      attrDistance.push(d, d);\n      attrIndex.push(index + 1, index + 2, index + 3);\n      count += 2;\n    } else {\n      const flatNext = aProjectFlat([next[0], next[1]]) as [number, number];\n      // get unit dir of next line\n      direction(lineB, flatNext, flatCur);\n\n      // stores tangent & miter\n      let miterLen = computeMiter(\n        tangent,\n        vec2.fromValues(miter[0], miter[1]),\n        lineA,\n        lineB,\n        1,\n      );\n\n      // get orientation\n      const flip = vec2.dot(tangent, lineNormal) < 0 ? -1 : 1;\n      const bevel = Math.abs(miterLen) > miterLimit;\n\n      // 处理前后两条线段重合的情况，这种情况不需要使用任何接头（miter/bevel）。\n      // 理论上这种情况下 miterLen = Infinity，本应通过 isFinite(miterLen) 判断，\n      // 但是 AMap 投影变换后丢失精度，只能通过一个阈值（1000）判断。\n\n      if (Math.abs(miterLen) > 1000) {\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n        attrIndex.push(index + 1, index + 2, index + 3);\n        attrIndex.push(index + 2, index + 4, index + 3);\n        computeNormal(tmp, lineB);\n        vec2.copy(lineNormal, tmp); // store normal for next round\n\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n        attrDistance.push(d, d, d, d);\n\n        // the miter is now the normal for our next join\n        count += 4;\n        continue;\n      }\n      if (bevel) {\n        miterLen = miterLimit;\n\n        // next two points in our first segment\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n\n        attrIndex.push(index + 1, index + 2, index + 3);\n\n        // now add the bevel triangle\n        attrIndex.push(\n          ...(flip === 1\n            ? [index + 2, index + 4, index + 5]\n            : [index + 4, index + 5, index + 3]),\n        );\n\n        computeNormal(tmp, lineB);\n        vec2.copy(lineNormal, tmp); // store normal for next round\n\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n        attrDistance.push(d, d, d, d);\n\n        // the miter is now the normal for our next join\n        count += 4;\n      } else {\n        // next two points in our first segment\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n        attrIndex.push(index + 1, index + 2, index + 3);\n\n        // now add the miter triangles\n        addNext(out, miters, lineNormal, miterLen * -flip);\n        attrPos.push(cur[0], cur[1], 0);\n        attrIndex.push(index + 2, index + 4, index + 3);\n        attrIndex.push(index + 4, index + 5, index + 6);\n        computeNormal(tmp, lineB);\n        vec2.copy(lineNormal, tmp); // store normal for next round\n\n        extrusions(attrPos, out, miters, cur, lineNormal, 1);\n        attrDistance.push(d, d, d, d, d);\n\n        // the miter is now the normal for our next join\n        count += 5;\n      }\n    }\n  }\n  const pickData = [];\n  for (let i = 0; i < miters.length; i++) {\n    const totalDistance = attrDistance[attrDistance.length - 1];\n    pickData.push(\n      attrPos[i * 3],\n      attrPos[i * 3 + 1],\n      attrPos[i * 3 + 2],\n      attrDistance[i], // dash\n      miters[i],\n      totalDistance, // dash\n    );\n  }\n  return {\n    normals: out,\n    attrIndex,\n    attrPos: pickData, // [x,y,z, distance, miter ,t0tal ]\n  };\n}\n// [x,y,z, distance, miter ]\n"],"file":"polylineNormal.js"}