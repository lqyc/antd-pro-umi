{"version":3,"sources":["../../src/utils/symbol-layout.ts"],"names":["getAnchorAlignment","anchor","horizontalAlign","verticalAlign","justifyLine","positionedGlyphs","glyphMap","start","end","justify","lastPositionedGlyph","glyph","lastAdvance","advance","scale","lineIndent","x","j","align","maxLineLength","lineHeight","lineCount","shiftX","shiftY","glyphs","y","shapeLines","shaping","lines","textAnchor","textJustify","spacing","yOffset","lineStartIndex","length","forEach","line","split","char","baselineOffset","push","vertical","metrics","lineLength","Math","max","height","top","bottom","left","right","shapeText","text","translate","getGlyphQuads","textOffset","alongLine","quads","positionedGlyph","rect","rectBuffer","halfAdvance","glyphOffset","builtInOffset","x1","y1","x2","width","y2","tl","tr","bl","br","tex"],"mappings":"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","sourcesContent":["import { type } from 'os';\n\ninterface IPoint {\n  x: number;\n  y: number;\n}\nexport type anchorType =\n  | 'right'\n  | 'top-right'\n  | 'left'\n  | 'bottom-right'\n  | 'left'\n  | 'top-left'\n  | 'bottom-left'\n  | 'bottom'\n  | 'bottom-right'\n  | 'bottom-left'\n  | 'top'\n  | 'top-right'\n  | 'top-left'\n  | 'center';\nexport interface IGlyphQuad {\n  tr: IPoint;\n  tl: IPoint;\n  bl: IPoint;\n  br: IPoint;\n  tex: {\n    x: number;\n    y: number;\n    height: number;\n    width: number;\n    advance: number;\n  };\n  glyphOffset: [number, number];\n}\n\n/**\n * 返回文本相对锚点位置\n * @param {string} anchor 锚点位置\n * @return {alignment} alignment\n */\nfunction getAnchorAlignment(anchor: anchorType) {\n  let horizontalAlign = 0.5;\n  let verticalAlign = 0.5;\n  switch (anchor) {\n    case 'right':\n    case 'top-right':\n    case 'bottom-right':\n      horizontalAlign = 1;\n      break;\n    case 'left':\n    case 'top-left':\n    case 'bottom-left':\n      horizontalAlign = 0;\n      break;\n    default:\n      horizontalAlign = 0.5;\n  }\n\n  switch (anchor) {\n    case 'bottom':\n    case 'bottom-right':\n    case 'bottom-left':\n      verticalAlign = 1;\n      break;\n    case 'top':\n    case 'top-right':\n    case 'top-left':\n      verticalAlign = 0;\n      break;\n    default:\n      verticalAlign = 0.5;\n  }\n\n  return { horizontalAlign, verticalAlign };\n}\n\n// justify right = 1, left = 0, center = 0.5\nfunction justifyLine(\n  positionedGlyphs: any,\n  glyphMap: any,\n  start: number,\n  end: number,\n  justify: number,\n) {\n  if (!justify) {\n    return;\n  }\n\n  const lastPositionedGlyph = positionedGlyphs[end];\n  const glyph = lastPositionedGlyph.glyph;\n  if (glyph) {\n    const lastAdvance = glyphMap[glyph].advance * lastPositionedGlyph.scale;\n    const lineIndent = (positionedGlyphs[end].x + lastAdvance) * justify;\n\n    for (let j = start; j <= end; j++) {\n      positionedGlyphs[j].x -= lineIndent;\n    }\n  }\n}\n\n// justify right=1 left=0 center=0.5\n// horizontalAlign right=1 left=0 center=0.5\n// verticalAlign right=1 left=0 center=0.5\nfunction align(\n  positionedGlyphs: any[],\n  justify: number,\n  horizontalAlign: number,\n  verticalAlign: number,\n  maxLineLength: number,\n  lineHeight: number,\n  lineCount: number,\n) {\n  const shiftX = (justify - horizontalAlign) * maxLineLength;\n  const shiftY = (-verticalAlign * lineCount + 0.5) * lineHeight;\n\n  for (const glyphs of positionedGlyphs) {\n    glyphs.x += shiftX;\n    glyphs.y += shiftY;\n  }\n}\n\nfunction shapeLines(\n  shaping: any,\n  glyphMap: any,\n  lines: any[],\n  lineHeight: number,\n  textAnchor: anchorType,\n  textJustify: string,\n  spacing: number,\n) {\n  // buffer 为 4\n  const yOffset = -8;\n\n  let x = 0;\n  let y = yOffset;\n\n  let maxLineLength = 0;\n  const positionedGlyphs = shaping.positionedGlyphs;\n\n  const justify =\n    textJustify === 'right' ? 1 : textJustify === 'left' ? 0 : 0.5;\n\n  const lineStartIndex = positionedGlyphs.length;\n  lines.forEach((line) => {\n    line.split('').forEach((char: string) => {\n      const glyph = glyphMap[char];\n      const baselineOffset = 0;\n\n      if (glyph) {\n        positionedGlyphs.push({\n          glyph: char,\n          x,\n          y: y + baselineOffset,\n          vertical: false, // TODO：目前只支持水平方向\n          scale: 1,\n          metrics: glyph,\n        });\n        x += glyph.advance + spacing;\n      }\n    });\n\n    // 左右对齐\n    if (positionedGlyphs.length !== lineStartIndex) {\n      const lineLength = x - spacing;\n      maxLineLength = Math.max(lineLength, maxLineLength);\n      justifyLine(\n        positionedGlyphs,\n        glyphMap,\n        lineStartIndex,\n        positionedGlyphs.length - 1,\n        justify,\n      );\n    }\n\n    x = 0;\n    y += lineHeight;\n  });\n\n  const { horizontalAlign, verticalAlign } = getAnchorAlignment(textAnchor);\n  align(\n    positionedGlyphs,\n    justify,\n    horizontalAlign,\n    verticalAlign,\n    maxLineLength,\n    lineHeight,\n    lines.length,\n  );\n\n  // 计算包围盒\n  const height = y - yOffset;\n\n  shaping.top += -verticalAlign * height;\n  shaping.bottom = shaping.top + height;\n  shaping.left += -horizontalAlign * maxLineLength;\n  shaping.right = shaping.left + maxLineLength;\n}\n\n/**\n * 计算文本中每个独立字符相对锚点的位置\n *\n * @param {string} text 原始文本\n * @param {*} glyphs mapping\n * @param {number} lineHeight 行高\n * @param {string} textAnchor 文本相对于锚点的位置\n * @param {string} textJustify 左右对齐\n * @param {number} spacing 字符间距\n * @param {[number, number]} translate 文本水平 & 垂直偏移量\n * @return {boolean|shaping} 每个字符相对于锚点的位置\n */\nexport function shapeText(\n  text: string,\n  glyphs: any,\n  lineHeight: number,\n  textAnchor: anchorType,\n  textJustify: string,\n  spacing: number,\n  translate: [number, number] = [0, 0],\n) {\n  // TODO：处理换行\n  const lines = text.split('\\n');\n\n  const positionedGlyphs: any[] = [];\n  const shaping = {\n    positionedGlyphs,\n    top: translate[1],\n    bottom: translate[1],\n    left: translate[0],\n    right: translate[0],\n    lineCount: lines.length,\n    text,\n  };\n\n  shapeLines(\n    shaping,\n    glyphs,\n    lines,\n    lineHeight,\n    textAnchor,\n    textJustify,\n    spacing,\n  );\n  if (!positionedGlyphs.length) {\n    return false;\n  }\n\n  return shaping;\n}\n\nexport function getGlyphQuads(\n  shaping: any,\n  textOffset: [number, number] = [0, 0],\n  alongLine: boolean,\n): IGlyphQuad[] {\n  const { positionedGlyphs = [] } = shaping;\n  const quads: IGlyphQuad[] = [];\n\n  for (const positionedGlyph of positionedGlyphs) {\n    const rect = positionedGlyph.metrics;\n\n    // The rects have an addditional buffer that is not included in their size.\n    const rectBuffer = 4;\n\n    const halfAdvance = (rect.advance * positionedGlyph.scale) / 2;\n\n    const glyphOffset: [number, number] = alongLine\n      ? [positionedGlyph.x + halfAdvance, positionedGlyph.y]\n      : [0, 0];\n\n    const builtInOffset = alongLine\n      ? [0, 0]\n      : [\n          positionedGlyph.x + halfAdvance + textOffset[0],\n          positionedGlyph.y + textOffset[1],\n        ];\n\n    const x1 =\n      (0 - rectBuffer) * positionedGlyph.scale - halfAdvance + builtInOffset[0];\n    const y1 = (0 - rectBuffer) * positionedGlyph.scale + builtInOffset[1];\n    const x2 = x1 + rect.width * positionedGlyph.scale;\n    const y2 = y1 + rect.height * positionedGlyph.scale;\n\n    const tl = { x: x1, y: y1 };\n    const tr = { x: x2, y: y1 };\n    const bl = { x: x1, y: y2 };\n    const br = { x: x2, y: y2 };\n\n    // TODO：处理字符旋转的情况\n\n    quads.push({ tl, tr, bl, br, tex: rect, glyphOffset });\n  }\n\n  return quads;\n}\n"],"file":"symbol-layout.js"}