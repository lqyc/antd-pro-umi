"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _BaseLayer2 = _interopRequireDefault(require("../core/BaseLayer"));

var _models = _interopRequireDefault(require("./models/"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PolygonLayer = function (_BaseLayer) {
  (0, _inherits2.default)(PolygonLayer, _BaseLayer);

  var _super = _createSuper(PolygonLayer);

  function PolygonLayer() {
    var _this;

    (0, _classCallCheck2.default)(this, PolygonLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.type = 'PolygonLayer';
    return _this;
  }

  (0, _createClass2.default)(PolygonLayer, [{
    key: "buildModels",
    value: function buildModels() {
      var shape = this.getModelType();
      this.layerModel = new _models.default[shape](this);
      this.models = this.layerModel.initModels();
    }
  }, {
    key: "rebuildModels",
    value: function rebuildModels() {
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var _shapeAttribute$scale;

      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;

      if (shape === 'fill') {
        return 'fill';
      } else if (shape === 'extrude') {
        return 'extrude';
      } else if (shape === 'line') {
        return 'line';
      } else {
        return this.getPointModelType();
      }
    }
  }, {
    key: "getPointModelType",
    value: function getPointModelType() {
      var layerData = this.getEncodedData();

      var _this$getLayerConfig = this.getLayerConfig(),
          shape2d = _this$getLayerConfig.shape2d,
          shape3d = _this$getLayerConfig.shape3d;

      var iconMap = this.iconService.getIconMap();
      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });

      if (!item) {
        return 'fill';
      } else {
        var shape = item.shape;

        if (shape === 'dot') {
          return 'point_normal';
        }

        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return 'point_fill';
        }

        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
          return 'point_extrude';
        }

        if (iconMap.hasOwnProperty(shape)) {
          return 'point_image';
        }

        return 'text';
      }
    }
  }]);
  return PolygonLayer;
}(_BaseLayer2.default);

exports.default = PolygonLayer;
//# sourceMappingURL=index.js.map