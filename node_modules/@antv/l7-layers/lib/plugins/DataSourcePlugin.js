"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _l7Core = require("@antv/l7-core");

var _l7Source = _interopRequireDefault(require("@antv/l7-source"));

var _inversify = require("inversify");

var _dec, _class, _temp;

var DataSourcePlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = (_temp = function () {
  function DataSourcePlugin() {
    (0, _classCallCheck2.default)(this, DataSourcePlugin);
    this.mapService = void 0;
  }

  (0, _createClass2.default)(DataSourcePlugin, [{
    key: "apply",
    value: function apply(layer) {
      var _this = this;

      this.mapService = layer.getContainer().get(_l7Core.TYPES.IMapService);
      layer.hooks.init.tap('DataSourcePlugin', function () {
        var _layer$sourceOption = layer.sourceOption,
            data = _layer$sourceOption.data,
            options = _layer$sourceOption.options;
        layer.setSource(new _l7Source.default(data, options));

        _this.updateClusterData(layer);
      });
      layer.hooks.beforeRenderData.tap('DataSourcePlugin', function () {
        var neeUpdate1 = _this.updateClusterData(layer);

        var neeUpdate2 = layer.dataState.dataSourceNeedUpdate;
        layer.dataState.dataSourceNeedUpdate = false;
        return neeUpdate1 || neeUpdate2;
      });
    }
  }, {
    key: "updateClusterData",
    value: function updateClusterData(layer) {
      var source = layer.getSource();
      var cluster = source.cluster;
      var _source$clusterOption = source.clusterOptions,
          _source$clusterOption2 = _source$clusterOption.zoom,
          zoom = _source$clusterOption2 === void 0 ? 0 : _source$clusterOption2,
          _source$clusterOption3 = _source$clusterOption.maxZoom,
          maxZoom = _source$clusterOption3 === void 0 ? 16 : _source$clusterOption3;
      var newZoom = this.mapService.getZoom() - 1;

      if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {
        source.updateClusterData(Math.floor(newZoom));
        return true;
      }

      return false;
    }
  }]);
  return DataSourcePlugin;
}(), _temp)) || _class);
exports.default = DataSourcePlugin;
//# sourceMappingURL=DataSourcePlugin.js.map