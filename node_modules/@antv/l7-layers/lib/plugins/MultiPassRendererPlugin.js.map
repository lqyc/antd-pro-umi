{"version":3,"sources":["../../src/plugins/MultiPassRendererPlugin.ts"],"names":["normalizePasses","passes","map","pass","MultiPassRendererPlugin","TYPES","IGlobalConfigService","enabled","layer","rendererService","postProcessingPassFactory","normalPassFactory","hooks","init","tap","getLayerConfig","enableMultiPassRenderer","multiPassRenderer","createMultiPassRenderer","setRenderFlag","beforeRender","enablePicking","enableTAA","add"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;;;AAKO,SAASA,eAAT,CACLC,MADK,EAEL;AACA,SAAOA,MAAM,CAACC,GAAP,CAAW,UAACC,IAAD,EAAyD;AACzE,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAG,CAACA,IAAD,EAAO,EAAP,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GALM,CAAP;AAMD;;IAgBoBC,uB,WADpB,4B,UAEE,uBAAOC,cAAMC,oBAAb,C;;;;SAGOC,O;;;;;WAER,eACEC,KADF,QAWE;AAAA;;AAAA,UAREC,eAQF,QAREA,eAQF;AAAA,UAPEC,yBAOF,QAPEA,yBAOF;AAAA,UANEC,iBAMF,QANEA,iBAMF;AACAH,MAAAA,KAAK,CAACI,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,yBAArB,EAAgD,YAAM;AAAA,oCACHN,KAAK,CAACO,cAAN,EADG;AAAA,YAC5CC,uBAD4C,yBAC5CA,uBAD4C;AAAA,2DACnBf,MADmB;AAAA,YACnBA,MADmB,uCACV,EADU;;AAIpD,QAAA,KAAI,CAACM,OAAL,GACE,CAAC,CAACS,uBAAF,IACAR,KAAK,CAACO,cAAN,GAAuBC,uBAAvB,KAAmD,KAFrD;;AAKA,YAAI,KAAI,CAACT,OAAT,EAAkB;AAChBC,UAAAA,KAAK,CAACS,iBAAN,GAA0B,KAAI,CAACC,uBAAL,CACxBV,KADwB,EAExBP,MAFwB,EAGxBS,yBAHwB,EAIxBC,iBAJwB,CAA1B;AAMAH,UAAAA,KAAK,CAACS,iBAAN,CAAwBE,aAAxB,CAAsC,IAAtC;AACD;AACF,OAlBD;AAoBAX,MAAAA,KAAK,CAACI,KAAN,CAAYQ,YAAZ,CAAyBN,GAAzB,CAA6B,yBAA7B,EAAwD,YAAM,CAM7D,CAND;AAOD;;;WAMD,iCACEN,KADF,EAEEP,MAFF,EAGES,yBAHF,EAIEC,iBAJF,EAKE;AACA,UAAMM,iBAAiB,GAAGT,KAAK,CAACS,iBAAhC;;AADA,mCAEqCT,KAAK,CAACO,cAAN,EAFrC;AAAA,UAEQM,aAFR,0BAEQA,aAFR;AAAA,UAEuBC,SAFvB,0BAEuBA,SAFvB;;AAKA,UAAID,aAAJ,EAAmB;AACjBJ,QAAAA,iBAAiB,CAACM,GAAlB,CAAsBZ,iBAAiB,CAAC,cAAD,CAAvC;AACD;;AAwBD,aAAOM,iBAAP;AACD","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  IPass,\n  IPostProcessingPass,\n  IRendererService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\n\n/**\n * 'blurH' -> ['blurH', {}]\n */\nexport function normalizePasses(\n  passes: Array<string | [string, { [key: string]: unknown }]>,\n) {\n  return passes.map((pass: string | [string, { [key: string]: unknown }]) => {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n    return pass;\n  });\n}\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\n@injectable()\nexport default class MultiPassRendererPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  private enabled: boolean;\n\n  public apply(\n    layer: ILayer,\n    {\n      rendererService,\n      postProcessingPassFactory,\n      normalPassFactory,\n    }: {\n      rendererService: IRendererService;\n      postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;\n      normalPassFactory: (name: string) => IPass<unknown>;\n    },\n  ) {\n    layer.hooks.init.tap('MultiPassRendererPlugin', () => {\n      const { enableMultiPassRenderer, passes = [] } = layer.getLayerConfig();\n\n      // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n      this.enabled =\n        !!enableMultiPassRenderer &&\n        layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n      // 根据 LayerConfig passes 配置项初始化\n      if (this.enabled) {\n        layer.multiPassRenderer = this.createMultiPassRenderer(\n          layer,\n          passes,\n          postProcessingPassFactory,\n          normalPassFactory,\n        );\n        layer.multiPassRenderer.setRenderFlag(true);\n      }\n    });\n\n    layer.hooks.beforeRender.tap('MultiPassRendererPlugin', () => {\n      // if (this.enabled) {\n      //   // 渲染前根据 viewport 调整 FBO size\n      //   const { width, height } = rendererService.getViewportSize();\n      //   layer.multiPassRenderer.resize(width, height);\n      // }\n    });\n  }\n\n  /**\n   * 默认添加 ClearPass、RenderPass\n   * 以及 PostProcessing 中的最后一个 CopyPass\n   */\n  private createMultiPassRenderer(\n    layer: ILayer,\n    passes: Array<string | [string, { [key: string]: unknown }]>,\n    postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>,\n    normalPassFactory: (name: string) => IPass<unknown>,\n  ) {\n    const multiPassRenderer = layer.multiPassRenderer;\n    const { enablePicking, enableTAA } = layer.getLayerConfig();\n\n    // picking pass if enabled\n    if (enablePicking) {\n      multiPassRenderer.add(normalPassFactory('pixelPicking'));\n    }\n\n    // use TAA pass if enabled instead of render pass\n    // if (enableTAA) {\n    //   multiPassRenderer.add(normalPassFactory('taa'));\n    // } else {\n    //   // render all layers in this pass\n    //   multiPassRenderer.add(normalPassFactory('render'));\n    // }\n\n    // post processing\n    // normalizePasses(passes).forEach(\n    //   (pass: [string, { [key: string]: unknown }]) => {\n    //     const [passName, initializationOptions] = pass;\n    //     multiPassRenderer.add(\n    //       postProcessingPassFactory(passName),\n    //       initializationOptions,\n    //     );\n    //   },\n    // );\n\n    // 末尾为固定的 CopyPass\n    // multiPassRenderer.add(postProcessingPassFactory('copy'));\n\n    return multiPassRenderer;\n  }\n}\n"],"file":"MultiPassRendererPlugin.js"}