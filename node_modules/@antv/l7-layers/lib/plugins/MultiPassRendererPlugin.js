"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizePasses = normalizePasses;
exports.default = void 0;

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _l7Core = require("@antv/l7-core");

var _inversify = require("inversify");

var _dec, _dec2, _class, _class2, _descriptor, _temp;

function normalizePasses(passes) {
  return passes.map(function (pass) {
    if (typeof pass === 'string') {
      pass = [pass, {}];
    }

    return pass;
  });
}

var MultiPassRendererPlugin = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.IGlobalConfigService), _dec(_class = (_class2 = (_temp = function () {
  function MultiPassRendererPlugin() {
    (0, _classCallCheck2.default)(this, MultiPassRendererPlugin);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor, this);
    this.enabled = void 0;
  }

  (0, _createClass2.default)(MultiPassRendererPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var rendererService = _ref.rendererService,
          postProcessingPassFactory = _ref.postProcessingPassFactory,
          normalPassFactory = _ref.normalPassFactory;
      layer.hooks.init.tap('MultiPassRendererPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
            enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,
            _layer$getLayerConfig2 = _layer$getLayerConfig.passes,
            passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;

        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;

        if (_this.enabled) {
          layer.multiPassRenderer = _this.createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);
          layer.multiPassRenderer.setRenderFlag(true);
        }
      });
      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {});
    }
  }, {
    key: "createMultiPassRenderer",
    value: function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {
      var multiPassRenderer = layer.multiPassRenderer;

      var _layer$getLayerConfig3 = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig3.enablePicking,
          enableTAA = _layer$getLayerConfig3.enableTAA;

      if (enablePicking) {
        multiPassRenderer.add(normalPassFactory('pixelPicking'));
      }

      return multiPassRenderer;
    }
  }]);
  return MultiPassRendererPlugin;
}(), _temp), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = MultiPassRendererPlugin;
//# sourceMappingURL=MultiPassRendererPlugin.js.map