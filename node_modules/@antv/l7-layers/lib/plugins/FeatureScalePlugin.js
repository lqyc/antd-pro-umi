"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _l7Core = require("@antv/l7-core");

var _d3Array = require("d3-array");

var d3 = _interopRequireWildcard(require("d3-scale"));

var _inversify = require("inversify");

var _scaleMap, _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
var scaleMap = (_scaleMap = {}, (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.LINEAR, d3.scaleLinear), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.POWER, d3.scalePow), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.LOG, d3.scaleLog), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.IDENTITY, d3.scaleIdentity), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.TIME, d3.scaleTime), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.QUANTILE, d3.scaleQuantile), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.QUANTIZE, d3.scaleQuantize), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.THRESHOLD, d3.scaleThreshold), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.CAT, d3.scaleOrdinal), _scaleMap);
var FeatureScalePlugin = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.IGlobalConfigService), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {
  function FeatureScalePlugin() {
    (0, _classCallCheck2.default)(this, FeatureScalePlugin);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "logger", _descriptor2, this);
    this.scaleCache = {};
    this.scaleOptions = {};
  }

  (0, _createClass2.default)(FeatureScalePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('FeatureScalePlugin', function () {
        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();
        var dataArray = layer.getSource().data.dataArray;

        if (dataArray.length === 0) {
          return;
        }

        _this.caculateScalesForAttributes(attributes || [], dataArray);
      });
      layer.hooks.beforeRenderData.tap('FeatureScalePlugin', function () {
        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();
        var dataArray = layer.getSource().data.dataArray;

        _this.caculateScalesForAttributes(attributes || [], dataArray);

        layer.layerModelNeedUpdate = true;
        return true;
      });
      layer.hooks.beforeRender.tap('FeatureScalePlugin', function () {
        if (layer.layerModelNeedUpdate) {
          return;
        }

        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();

        if (attributes) {
          var dataArray = layer.getSource().data.dataArray;

          if (dataArray.length === 0) {
            return;
          }

          var attributesToRescale = attributes.filter(function (attribute) {
            return attribute.needRescale;
          });

          if (attributesToRescale.length) {
            _this.caculateScalesForAttributes(attributesToRescale, dataArray);

            _this.logger.debug('rescale finished');
          }
        }
      });
    }
  }, {
    key: "isNumber",
    value: function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
  }, {
    key: "caculateScalesForAttributes",
    value: function caculateScalesForAttributes(attributes, dataArray) {
      var _this2 = this;

      this.scaleCache = {};
      attributes.forEach(function (attribute) {
        if (attribute.scale) {
          var attributeScale = attribute.scale;
          var type = attribute.name;
          attributeScale.names = _this2.parseFields(attribute.scale.field || []);
          var scales = [];
          attributeScale.names.forEach(function (field) {
            scales.push(_this2.getOrCreateScale(field, attribute, dataArray));
          });

          if (scales.some(function (scale) {
            return scale.type === _l7Core.StyleScaleType.VARIABLE;
          })) {
            attributeScale.type = _l7Core.StyleScaleType.VARIABLE;
            scales.forEach(function (scale) {
              if (!attributeScale.callback) {
                var _scale$option2;

                if (attributeScale.values && attributeScale.values !== 'text') {
                  var _scale$option;

                  if (((_scale$option = scale.option) === null || _scale$option === void 0 ? void 0 : _scale$option.type) === 'linear' && attributeScale.values.length > 2) {
                    var tick = scale.scale.ticks(attributeScale.values.length);

                    if (type === 'color') {
                      scale.scale.domain(tick);
                    }
                  }

                  scale.scale.range(attributeScale.values);
                } else if (((_scale$option2 = scale.option) === null || _scale$option2 === void 0 ? void 0 : _scale$option2.type) === 'cat') {
                  scale.scale.range(scale.option.domain);
                }
              }
            });
          } else {
            attributeScale.type = _l7Core.StyleScaleType.CONSTANT;
            attributeScale.defaultValues = scales.map(function (scale, index) {
              return scale.scale(attributeScale.names[index]);
            });
          }

          attributeScale.scalers = scales.map(function (scale) {
            return {
              field: scale.field,
              func: scale.scale,
              option: scale.option
            };
          });
          attribute.needRescale = false;
        }
      });
    }
  }, {
    key: "getOrCreateScale",
    value: function getOrCreateScale(field, attribute, dataArray) {
      var _attribute$scale;

      var scalekey = [field, attribute.name].join('_');
      var values = (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.values;
      var styleScale = this.createScale(field, attribute.name, values, dataArray);
      return styleScale;
    }
  }, {
    key: "parseFields",
    value: function parseFields(field) {
      if (Array.isArray(field)) {
        return field;
      }

      if ((0, _isString2.default)(field)) {
        return field.split('*');
      }

      return [field];
    }
  }, {
    key: "createScale",
    value: function createScale(field, name, values, data) {
      var _find;

      var scaleOption = this.scaleOptions[name] && this.scaleOptions[name].field === field ? this.scaleOptions[name] : this.scaleOptions[field];
      var styleScale = {
        field: field,
        scale: undefined,
        type: _l7Core.StyleScaleType.VARIABLE,
        option: scaleOption
      };

      if (!data || !data.length) {
        if (scaleOption && scaleOption.type) {
          styleScale.scale = this.createDefaultScale(scaleOption);
        } else {
          styleScale.scale = d3.scaleOrdinal([field]);
          styleScale.type = _l7Core.StyleScaleType.CONSTANT;
        }

        return styleScale;
      }

      var firstValue = (_find = data.find(function (d) {
        return !(0, _isNil2.default)(d[field]);
      })) === null || _find === void 0 ? void 0 : _find[field];

      if (this.isNumber(field) || (0, _isNil2.default)(firstValue) && !scaleOption) {
        styleScale.scale = d3.scaleOrdinal([field]);
        styleScale.type = _l7Core.StyleScaleType.CONSTANT;
      } else {
        var type = scaleOption && scaleOption.type || this.getDefaultType(firstValue);

        if (values === 'text') {
          type = _l7Core.ScaleTypes.CAT;
        }

        var cfg = this.createDefaultScaleConfig(type, field, data);
        Object.assign(cfg, scaleOption);
        styleScale.scale = this.createDefaultScale(cfg);
        styleScale.option = cfg;
      }

      return styleScale;
    }
  }, {
    key: "getDefaultType",
    value: function getDefaultType(firstValue) {
      var type = _l7Core.ScaleTypes.LINEAR;

      if (typeof firstValue === 'string') {
        type = dateRegex.test(firstValue) ? _l7Core.ScaleTypes.TIME : _l7Core.ScaleTypes.CAT;
      }

      return type;
    }
  }, {
    key: "createDefaultScaleConfig",
    value: function createDefaultScaleConfig(type, field, data) {
      var cfg = {
        type: type
      };
      var values = (data === null || data === void 0 ? void 0 : data.map(function (item) {
        return item[field];
      })) || [];

      if (type !== _l7Core.ScaleTypes.CAT && type !== _l7Core.ScaleTypes.QUANTILE) {
        cfg.domain = (0, _d3Array.extent)(values);
      } else if (type === _l7Core.ScaleTypes.CAT) {
        cfg.domain = (0, _uniq2.default)(values);
      } else if (type === _l7Core.ScaleTypes.QUANTILE) {
        cfg.domain = values;
      }

      return cfg;
    }
  }, {
    key: "createDefaultScale",
    value: function createDefaultScale(_ref2) {
      var type = _ref2.type,
          domain = _ref2.domain;
      var scale = scaleMap[type]();

      if (domain) {
        scale.domain(domain);
      }

      return scale;
    }
  }]);
  return FeatureScalePlugin;
}(), _temp), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "logger", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = FeatureScalePlugin;
//# sourceMappingURL=FeatureScalePlugin.js.map