{"version":3,"sources":["../../src/raster/raster.ts"],"names":["RasterLayer","type","texture","colorTexture","parserDataItem","getSource","data","dataArray","createTexture2D","rendererService","width","height","format","gl","LUMINANCE","FLOAT","aniso","getLayerConfig","rampColors","imageData","flipY","models","buildRasterModel","opacity","heightRatio","coordinates","min","max","forEach","model","draw","uniforms","u_opacity","u_texture","u_min","u_width","u_height","u_max","u_heightRatio","u_colorTexture","u_extent","properties","minimum","maximum","source","sourceFeature","triangulation","shaderModuleService","registerModule","vs","rasterVert","fs","rasterFrag","getModule","createAttribute","createElements","createBuffer","createModel","attributes","a_Position","buffer","vertices","size","primitive","TRIANGLES","depth","enable","elements","indices","UNSIGNED_INT","count","length","BaseLayer"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IModelUniform,\n  IRasterParserDataItem,\n  IStyleAttributeService,\n  ITexture2D,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\n\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport BaseLayer from '../core/BaseLayer';\nimport { RasterTriangulation } from './buffers/triangulation';\nimport rasterFrag from './shaders/raster_frag.glsl';\nimport rasterVert from './shaders/raster_vert.glsl';\ninterface IRasterLayerStyleOptions {\n  opacity: number;\n  min: number;\n  max: number;\n  extent: [number, number, number, number];\n  rampColors: IColorRamp;\n  heightRatio: number;\n}\n\nexport default class RasterLayer extends BaseLayer<IRasterLayerStyleOptions> {\n  public type: string = 'RasterLayer';\n  protected texture: ITexture2D;\n  protected colorTexture: ITexture2D;\n\n  public getAnimateUniforms(): IModelUniform {\n    return {};\n  }\n\n  public buildModels() {\n    const parserDataItem = this.getSource().data.dataArray[0];\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      data: parserDataItem.data,\n      width: parserDataItem.width,\n      height: parserDataItem.height,\n      format: gl.LUMINANCE,\n      type: gl.FLOAT,\n      aniso: 4,\n    });\n    const { rampColors } = this.getLayerConfig();\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      flipY: false,\n    });\n    this.models = [this.buildRasterModel()];\n  }\n  public renderModels() {\n    const { opacity, heightRatio = 10 } = this.getLayerConfig();\n    const parserDataItem = this.getSource().data.dataArray[0];\n    const { coordinates, width, height, min, max } = parserDataItem;\n    this.models.forEach((model) =>\n      model.draw({\n        uniforms: {\n          u_opacity: opacity || 1,\n          u_texture: this.texture,\n          u_min: min,\n          u_width: width,\n          u_height: height,\n          u_max: max,\n          u_heightRatio: heightRatio,\n          u_colorTexture: this.colorTexture,\n          u_extent: [...coordinates[0], ...coordinates[1]],\n        },\n      }),\n    );\n\n    return this;\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  private buildRasterModel() {\n    const source = this.getSource();\n    const sourceFeature = source.data.dataArray[0];\n    const triangulation = RasterTriangulation(sourceFeature);\n    this.shaderModuleService.registerModule('raster', {\n      vs: rasterVert,\n      fs: rasterFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule('raster');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      primitive: gl.TRIANGLES,\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: true,\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length,\n      }),\n    });\n  }\n}\n"],"file":"raster.js"}