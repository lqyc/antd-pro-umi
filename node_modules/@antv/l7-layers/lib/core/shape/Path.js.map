{"version":3,"sources":["../../../src/core/shape/Path.ts"],"names":["ShapeType3D","ShapeType2D","polygonPath","pointCount","start","step","Math","PI","line","i","push","path","map","t","x","sin","y","cos","circle","square","triangle","hexagon","pentagon","geometryShape","CIRCLE","HEXAGON","TRIANGLE","SQUARE","PENTAGON","CYLINDER","HEXAGONCOLUMN","TRIANGLECOLUMN","SQUARECOLUMN","PENTAGONCOLUMN"],"mappings":";;;;;;;;;;;;;;;;;;;IAEYA,W;;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,2BAAAA,W;;IAOAC,W;;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,2BAAAA,W;;AAaL,SAASC,WAAT,CAAqBC,UAArB,EAAmE;AAAA,MAA1BC,KAA0B,uEAAV,CAAU;AACxE,MAAMC,IAAI,GAAIC,IAAI,CAACC,EAAL,GAAU,CAAX,GAAgBJ,UAA7B;AACA,MAAMK,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgCM,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,IAAI,CAACE,IAAL,CAAUL,IAAI,GAAGI,CAAP,GAAYL,KAAK,GAAGE,IAAI,CAACC,EAAd,GAAoB,EAAzC;AACD;;AACD,MAAMI,IAAW,GAAGH,IAAI,CAACI,GAAL,CAAS,UAACC,CAAD,EAAO;AAClC,QAAMC,CAAC,GAAGR,IAAI,CAACS,GAAL,CAASF,CAAC,GAAGP,IAAI,CAACC,EAAL,GAAU,CAAvB,CAAV;AACA,QAAMS,CAAC,GAAGV,IAAI,CAACW,GAAL,CAASJ,CAAC,GAAGP,IAAI,CAACC,EAAL,GAAU,CAAvB,CAAV;AACA,WAAO,CAACO,CAAD,EAAIE,CAAJ,EAAO,CAAP,CAAP;AACD,GAJmB,CAApB;AAMA,SAAOL,IAAP;AACD;;AAEM,SAASO,MAAT,GAAyB;AAC9B,SAAOhB,WAAW,CAAC,EAAD,CAAlB;AACD;;AACM,SAASiB,MAAT,GAAyB;AAC9B,SAAOjB,WAAW,CAAC,CAAD,CAAlB;AACD;;AACM,SAASkB,QAAT,GAA2B;AAChC,SAAOlB,WAAW,CAAC,CAAD,CAAlB;AACD;;AACM,SAASmB,OAAT,GAA0B;AAC/B,SAAOnB,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAlB;AACD;;AACM,SAASoB,QAAT,GAA2B;AAChC,SAAOpB,WAAW,CAAC,CAAD,CAAlB;AACD;;AAEM,IAAMqB,aAAa,uEACvBtB,WAAW,CAACuB,MADW,EACFN,MADE,iDAEvBjB,WAAW,CAACwB,OAFW,EAEDJ,OAFC,iDAGvBpB,WAAW,CAACyB,QAHW,EAGAN,QAHA,iDAIvBnB,WAAW,CAAC0B,MAJW,EAIFR,MAJE,iDAKvBlB,WAAW,CAAC2B,QALW,EAKAN,QALA,iDAMvBtB,WAAW,CAAC6B,QANW,EAMAX,MANA,iDAOvBlB,WAAW,CAAC8B,aAPW,EAOKT,OAPL,iDAQvBrB,WAAW,CAAC+B,cARW,EAQMX,QARN,iDASvBpB,WAAW,CAACgC,YATW,EASIb,MATJ,iDAUvBnB,WAAW,CAACiC,cAVW,EAUMX,QAVN,kBAAnB","sourcesContent":["export type IPosition = [number, number, number] | [number, number];\nexport type IPath = IPosition[];\nexport enum ShapeType3D {\n  CYLINDER = 'cylinder',\n  SQUARECOLUMN = 'squareColumn',\n  TRIANGLECOLUMN = 'triangleColumn',\n  HEXAGONCOLUMN = 'hexagonColumn',\n  PENTAGONCOLUMN = 'pentagonColumn',\n}\nexport enum ShapeType2D {\n  CIRCLE = 'circle',\n  SQUARE = 'square',\n  TRIANGLE = 'triangle',\n  HEXAGON = 'hexagon',\n  PENTAGON = 'pentagon',\n}\n\n/**\n * 生成规则多边形顶点个数\n * @param pointCount  顶点个数 3 => 三角形\n * @param start 顶点起始角度 调整图形的方向\n */\nexport function polygonPath(pointCount: number, start: number = 0): IPath {\n  const step = (Math.PI * 2) / pointCount;\n  const line = [];\n  for (let i = 0; i < pointCount; i++) {\n    line.push(step * i + (start * Math.PI) / 12);\n  }\n  const path: IPath = line.map((t) => {\n    const x = Math.sin(t + Math.PI / 4);\n    const y = Math.cos(t + Math.PI / 4);\n    return [x, y, 0];\n  });\n  // path.push(path[0]);\n  return path;\n}\n\nexport function circle(): IPath {\n  return polygonPath(30);\n}\nexport function square(): IPath {\n  return polygonPath(4);\n}\nexport function triangle(): IPath {\n  return polygonPath(3);\n}\nexport function hexagon(): IPath {\n  return polygonPath(6, 1);\n}\nexport function pentagon(): IPath {\n  return polygonPath(5);\n}\n\nexport const geometryShape = {\n  [ShapeType2D.CIRCLE]: circle,\n  [ShapeType2D.HEXAGON]: hexagon,\n  [ShapeType2D.TRIANGLE]: triangle,\n  [ShapeType2D.SQUARE]: square,\n  [ShapeType2D.PENTAGON]: pentagon,\n  [ShapeType3D.CYLINDER]: circle,\n  [ShapeType3D.HEXAGONCOLUMN]: hexagon,\n  [ShapeType3D.TRIANGLECOLUMN]: triangle,\n  [ShapeType3D.SQUARECOLUMN]: square,\n  [ShapeType3D.PENTAGONCOLUMN]: pentagon,\n};\n"],"file":"Path.js"}