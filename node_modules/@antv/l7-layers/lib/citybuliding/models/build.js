"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var buildFrag = "uniform float u_opacity: 1.0;\nuniform vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\nuniform vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\nuniform vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\nuniform float u_near : 0;\nuniform float u_far : 1;\nvarying vec4 v_Color;\nvarying vec2 v_texCoord;\nuniform float u_Zoom : 1;\nuniform float u_time;\n\n#pragma include \"picking\"\n\nvec3 getWindowColor(float n, float hot, vec3 brightColor, vec3 darkColor) {\n    float s = step(hot, n);\n    vec3 color = mix(brightColor,vec3(0.9,0.9,1.0),n);\n\n    return mix(darkColor, color, s);\n}\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat LinearizeDepth()\n{\n    float z = gl_FragCoord.z * 2.0 - 1.0;\n    return (2.0 * u_near * u_far) / (u_far + u_near - z * (u_far - u_near));\n}\n\nvec3 fog(vec3 color, vec3 fogColor, float depth){\n    float fogFactor=clamp(depth,0.0,1.0);\n    vec3 output_color=mix(fogColor,color,fogFactor);\n    return output_color;\n}\n\nfloat sdRect(vec2 p, vec2 sz) {\n  vec2 d = abs(p) - sz;\n  float outside = length(max(d, 0.));\n  float inside = min(max(d.x, d.y), 0.);\n  return outside + inside;\n}\n\nvoid main() {\n  gl_FragColor = v_Color;\n  vec3 baseColor = u_baseColor.xyz;\n  vec3 brightColor = u_brightColor.xyz;\n  vec3 windowColor = u_windowColor.xyz;\n  float targetColId = 5.;\n  float depth = 1.0 - LinearizeDepth() / u_far * u_Zoom;\n  vec3 fogColor = vec3(23.0/255.0,31.0/255.0,51.0/255.0);\n  if(v_texCoord.x < 0.) { //\u9876\u90E8\u989C\u8272\n       vec3 foggedColor = fog(baseColor.xyz + vec3(0.12*0.9,0.2*0.9,0.3*0.9),fogColor,depth);\n       gl_FragColor = vec4( foggedColor, v_Color.w);\n  }else { // \u4FA7\u9762\u989C\u8272\n        vec2 st = v_texCoord;\n        vec2  UvScale = v_texCoord;\n        float tStep = min(0.08,max(0.05* (18.0-u_Zoom),0.02));\n        float tStart = 0.25 * tStep;\n        float tEnd = 0.75 * tStep;\n        float u = mod(UvScale.x, tStep);\n        float v = mod(UvScale.y, tStep);\n        float ux = floor(UvScale.x/tStep);\n        float uy = floor(UvScale.y/tStep);\n        float n = random(vec2(ux,uy));\n        float lightP = u_time;\n        float head = 1.0- step(0.005,st.y);\n        /*step3*/\n        // \u5C06\u7A97\u6237\u989C\u8272\u548C\u5899\u9762\u989C\u8272\u533A\u522B\u5F00\u6765\n        float sU = step(tStart, u) - step(tEnd, u);\n        float sV = step(tStart, v) - step(tEnd, v);\n        vec2 windowSize = vec2(abs(tEnd-tStart),abs(tEnd-tStart));\n        float dist = sdRect(vec2(u,v), windowSize);\n        float s = sU * sV;\n\n        float curColId = floor(UvScale.x / tStep);\n        float sCol = step(targetColId - 0.2, curColId) - step(targetColId + 0.2, curColId);\n\n        float mLightP = mod(lightP, 2.);\n        float sRow = step(mLightP - 0.2, st.y) - step(mLightP, st.y);\n        if(ux == targetColId){\n            n =0.;\n        }\n        float timeP = min(0.75, abs ( sin(u_time/3.0) ) );\n        float hot = smoothstep(1.0,0.0,timeP);\n        vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), s);\n        //vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), 1.0);\n        float sFinal = s * sCol * sRow;\n        color += mix(baseColor, brightColor, sFinal*n);\n        if (st.y<0.01){\n        color = baseColor;\n         }\n        if(head ==1.0) { // \u9876\u90E8\u4EAE\u7EBF\n            color = brightColor;\n        }\n        color = color * v_Color.rgb;\n\n        vec3 foggedColor = fog(color,fogColor,depth);\n\n        gl_FragColor = vec4(foggedColor,1.0);\n  }\n  gl_FragColor.a *= u_opacity;\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
var buildVert = "precision highp float;\n\n#define ambientRatio 0.5\n#define diffuseRatio 0.3\n#define specularRatio 0.2\n\nattribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Normal;\nattribute float a_Size;\nuniform mat4 u_ModelMatrix;\n\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n\nvarying vec4 v_Color;\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\n  vec4 project_pos = project_position(pos);\n   v_texCoord = a_Uv;\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n\n  float lightWeight = calc_lighting(pos);\n  // v_Color = a_Color;\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w);\n\n  setPickingColor(a_PickingColor);\n}\n";

var CityBuildModel = function (_BaseModel) {
  (0, _inherits2.default)(CityBuildModel, _BaseModel);

  var _super = _createSuper(CityBuildModel);

  function CityBuildModel() {
    (0, _classCallCheck2.default)(this, CityBuildModel);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(CityBuildModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$baseColor = _ref.baseColor,
          baseColor = _ref$baseColor === void 0 ? 'rgb(16,16,16)' : _ref$baseColor,
          _ref$brightColor = _ref.brightColor,
          brightColor = _ref$brightColor === void 0 ? 'rgb(255,176,38)' : _ref$brightColor,
          _ref$windowColor = _ref.windowColor,
          windowColor = _ref$windowColor === void 0 ? 'rgb(30,60,89)' : _ref$windowColor,
          _ref$time = _ref.time,
          time = _ref$time === void 0 ? 0 : _ref$time;

      return {
        u_opacity: opacity,
        u_baseColor: (0, _l7Utils.rgb2arr)(baseColor),
        u_brightColor: (0, _l7Utils.rgb2arr)(brightColor),
        u_windowColor: (0, _l7Utils.rgb2arr)(windowColor),
        u_time: this.layer.getLayerAnimateTime() || time
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      this.startModelAnimate();
      return [this.layer.buildLayerModel({
        moduleName: 'cityBuilding',
        vertexShader: buildVert,
        fragmentShader: buildFrag,
        triangulation: _triangulation.PolygonExtrudeTriangulation
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 10 : _feature$size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var size = feature.size;
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return CityBuildModel;
}(_BaseModel2.default);

exports.default = CityBuildModel;
//# sourceMappingURL=build.js.map