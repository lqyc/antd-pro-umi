{"version":3,"sources":["../../src/heatmap/triangulation.ts"],"names":["heatMap3DTriangulation","width","height","indices","vertices","uvs","gridX1","gridY1","widthHalf","heightHalf","iy","y","ix","x","push","a","b","c","d"],"mappings":";;;;;;;AAGO,SAASA,sBAAT,CAAgCC,KAAhC,EAA+CC,MAA/C,EAA+D;AACpE,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,MAAM,GAAGL,KAAK,GAAG,CAAvB;AACA,MAAMM,MAAM,GAAGL,MAAM,GAAG,CAAxB;AACA,MAAMM,SAAS,GAAGP,KAAK,GAAG,CAA1B;AACA,MAAMQ,UAAU,GAAGP,MAAM,GAAG,CAA5B;;AACA,OAAK,IAAIQ,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,MAAtB,EAA8BG,EAAE,EAAhC,EAAoC;AAClC,QAAMC,CAAC,GAAGD,EAAE,GAAGD,UAAf;;AACA,SAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGN,MAAtB,EAA8BM,EAAE,EAAhC,EAAoC;AAClC,UAAMC,CAAC,GAAGD,EAAE,GAAGJ,SAAf;AACAJ,MAAAA,QAAQ,CAACU,IAAT,CAAcD,CAAC,GAAGL,SAAlB,EAA6B,CAACG,CAAD,GAAKF,UAAlC,EAA8C,CAA9C;AACAJ,MAAAA,GAAG,CAACS,IAAJ,CAASF,EAAE,GAAGX,KAAd;AACAI,MAAAA,GAAG,CAACS,IAAJ,CAAS,IAAIJ,EAAE,GAAGR,MAAlB;AACD;AACF;;AACD,OAAK,IAAIQ,GAAE,GAAG,CAAd,EAAiBA,GAAE,GAAGR,MAAtB,EAA8BQ,GAAE,EAAhC,EAAoC;AAClC,SAAK,IAAIE,GAAE,GAAG,CAAd,EAAiBA,GAAE,GAAGX,KAAtB,EAA6BW,GAAE,EAA/B,EAAmC;AACjC,UAAMG,CAAC,GAAGH,GAAE,GAAGN,MAAM,GAAGI,GAAxB;AACA,UAAMM,CAAC,GAAGJ,GAAE,GAAGN,MAAM,IAAII,GAAE,GAAG,CAAT,CAArB;AACA,UAAMO,CAAC,GAAGL,GAAE,GAAG,CAAL,GAASN,MAAM,IAAII,GAAE,GAAG,CAAT,CAAzB;AACA,UAAMQ,CAAC,GAAGN,GAAE,GAAG,CAAL,GAASN,MAAM,GAAGI,GAA5B;AACAP,MAAAA,OAAO,CAACW,IAAR,CAAaC,CAAb,EAAgBC,CAAhB,EAAmBE,CAAnB;AACAf,MAAAA,OAAO,CAACW,IAAR,CAAaE,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;AACD;AACF;;AACD,SAAO;AACLd,IAAAA,QAAQ,EAARA,QADK;AAELD,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD","sourcesContent":["import { IEncodeFeature, IParseDataItem } from '@antv/l7-core';\n// @ts-ignore\n\nexport function heatMap3DTriangulation(width: number, height: number) {\n  const indices = [];\n  const vertices = [];\n  const uvs = [];\n  const gridX1 = width + 1;\n  const gridY1 = height + 1;\n  const widthHalf = width / 2;\n  const heightHalf = height / 2;\n  for (let iy = 0; iy < gridY1; iy++) {\n    const y = iy - heightHalf;\n    for (let ix = 0; ix < gridX1; ix++) {\n      const x = ix - widthHalf;\n      vertices.push(x / widthHalf, -y / heightHalf, 0);\n      uvs.push(ix / width);\n      uvs.push(1 - iy / height);\n    }\n  }\n  for (let iy = 0; iy < height; iy++) {\n    for (let ix = 0; ix < width; ix++) {\n      const a = ix + gridX1 * iy;\n      const b = ix + gridX1 * (iy + 1);\n      const c = ix + 1 + gridX1 * (iy + 1);\n      const d = ix + 1 + gridX1 * iy;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n  return {\n    vertices,\n    indices,\n    uvs,\n  };\n}\n"],"file":"triangulation.js"}