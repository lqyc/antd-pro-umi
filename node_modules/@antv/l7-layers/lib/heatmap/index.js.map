{"version":3,"sources":["../../src/heatmap/index.ts"],"names":["HeatMapLayer","type","shape","getModelType","layerModel","HeatMapModels","models","initModels","buildModels","render","layerModelNeedUpdate","forEach","model","draw","uniforms","getUninforms","properties","opacity","minimum","maximum","shapeAttribute","styleAttributeService","getLayerStyleAttribute","getLayerConfig","shape3d","source","getSource","sourceType","data","scale","field","indexOf","BaseLayer"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AACA;;;;;;IAIqBA,Y;;;;;;;;;;;;;;;UACZC,I,GAAe,c;;;;;;WAEtB,uBAAqB;AACnB,UAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;AACA,WAAKC,UAAL,GAAkB,IAAIC,gBAAcH,KAAd,CAAJ,CAAyB,IAAzB,CAAlB;AACA,WAAKI,MAAL,GAAc,KAAKF,UAAL,CAAgBG,UAAhB,EAAd;AACD;;;WACD,yBAAuB;AACrB,WAAKD,MAAL,GAAc,KAAKF,UAAL,CAAgBI,WAAhB,EAAd;AACD;;;WACD,wBAAsB;AAAA;;AACpB,UAAMN,KAAK,GAAG,KAAKC,YAAL,EAAd;;AACA,UAAID,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAI,KAAKE,UAAT,EAAqB;AACnB,eAAKA,UAAL,CAAgBK,MAAhB;AACD;;AAED,eAAO,IAAP;AACD;;AACD,UAAI,KAAKC,oBAAT,EAA+B;AAC7B,aAAKJ,MAAL,GAAc,KAAKF,UAAL,CAAgBI,WAAhB,EAAd;AACA,aAAKE,oBAAL,GAA4B,KAA5B;AACD;;AACD,WAAKJ,MAAL,CAAYK,OAAZ,CAAoB,UAACC,KAAD;AAAA,eAClBA,KAAK,CAACC,IAAN,CAAW;AACTC,UAAAA,QAAQ,EAAE,MAAI,CAACV,UAAL,CAAgBW,YAAhB;AADD,SAAX,CADkB;AAAA,OAApB;AAKA,aAAO,IAAP;AACD;;;WACD,2BAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPhB,YAAAA,IAAI,EAAE,QADC;AAEPiB,YAAAA,OAAO,EAAE,CAFF;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WAED,wBAA2C;AAAA;;AACzC,UAAMC,cAAc,GAAG,KAAKC,qBAAL,CAA2BC,sBAA3B,CACrB,OADqB,CAAvB;;AADyC,iCAIrB,KAAKC,cAAL,EAJqB;AAAA,UAIjCC,OAJiC,wBAIjCA,OAJiC;;AAKzC,UAAMC,MAAM,GAAG,KAAKC,SAAL,EAAf;AACA,UAAMC,UAAU,GAAGF,MAAM,CAACG,IAAP,CAAY3B,IAA/B;AACA,UAAMC,KAAK,GACT,CAACkB,cAAD,aAACA,cAAD,gDAACA,cAAc,CAAES,KAAjB,0DAAC,sBAAuBC,KAAxB,KAAsD,SADxD;;AAEA,UAAI5B,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,WAArC,EAAkD;AAChD,eAAO,SAAP;AACD;;AACD,UAAIyB,UAAU,KAAK,SAAnB,EAA8B;AAC5B,eAAO,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,CAAiB7B,KAAjB,OAA4B,CAAC,CAA7B,GAAiC,SAAjC,GAA6C,QAApD;AACD;;AACD,UAAIyB,UAAU,KAAK,MAAnB,EAA2B;AACzB,eAAO,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,CAAiB7B,KAAjB,OAA4B,CAAC,CAA7B,GAAiC,MAAjC,GAA0C,QAAjD;AACD;;AACD,aAAO,SAAP;AACD;;;EA9DuC8B,mB","sourcesContent":["import { AttributeType, gl, IEncodeFeature, ILayer } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport HeatMapModels, { HeatMapModelType } from './models';\ninterface IHeatMapLayerStyleOptions {\n  opacity: number;\n}\nexport default class HeatMapLayer extends BaseLayer<IHeatMapLayerStyleOptions> {\n  public type: string = 'HeatMapLayer';\n\n  public buildModels() {\n    const shape = this.getModelType();\n    this.layerModel = new HeatMapModels[shape](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n  public renderModels() {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.render(); // 独立的渲染流程\n      }\n\n      return this;\n    }\n    if (this.layerModelNeedUpdate) {\n      this.models = this.layerModel.buildModels();\n      this.layerModelNeedUpdate = false;\n    }\n    this.models.forEach((model) =>\n      model.draw({\n        uniforms: this.layerModel.getUninforms(),\n      }),\n    );\n    return this;\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected getModelType(): HeatMapModelType {\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const { shape3d } = this.getLayerConfig();\n    const source = this.getSource();\n    const sourceType = source.data.type;\n    const shape =\n      (shapeAttribute?.scale?.field as HeatMapModelType) || 'heatmap';\n    if (shape === 'heatmap' || shape === 'heatmap3d') {\n      return 'heatmap';\n    }\n    if (sourceType === 'hexagon') {\n      return shape3d?.indexOf(shape) === -1 ? 'hexagon' : 'grid3d';\n    }\n    if (sourceType === 'grid') {\n      return shape3d?.indexOf(shape) === -1 ? 'grid' : 'grid3d';\n    }\n    return 'heatmap';\n  }\n}\n"],"file":"index.js"}