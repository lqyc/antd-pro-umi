{"version":3,"sources":["../../../src/point/shape/extrude.ts"],"names":["extrudePolygon","path","p1","p2","length","slice","n","flattengeo","earcut","flatten","positions","indexArray","normals","j","vertices","push","triangles","holes","dimensions","i","prePoint","nextPoint","indexOffset","map","v","index","fillPolygon","points"],"mappings":"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","sourcesContent":["import earcut from 'earcut';\nimport { IPath } from './Path';\nexport interface IExtrudeGeomety {\n  positions: number[];\n  index: number[];\n}\n/**\n * 拉伸多边形顶点，返回拉伸后的顶点信息\n * @param paths 路径数据组\n * @param extrude 是否拉伸\n */\nexport default function extrudePolygon(path: IPath[]): IExtrudeGeomety {\n  const p1 = path[0][0];\n  const p2 = path[0][path[0].length - 1];\n  if (p1[0] === p2[0] && p1[1] === p2[1]) {\n    path[0] = path[0].slice(0, path[0].length - 1);\n  }\n  const n = path[0].length;\n  const flattengeo = earcut.flatten(path);\n  const positions = [];\n  const indexArray = [];\n  const normals = [];\n  // 设置顶部z值\n  for (let j = 0; j < flattengeo.vertices.length / 3; j++) {\n    flattengeo.vertices[j * 3 + 2] = 1;\n    normals.push(0, 0, 1);\n  }\n  positions.push(...flattengeo.vertices);\n  const triangles = earcut(\n    flattengeo.vertices,\n    flattengeo.holes,\n    flattengeo.dimensions,\n  );\n  indexArray.push(...triangles);\n  for (let i = 0; i < n; i++) {\n    const prePoint = flattengeo.vertices.slice(i * 3, i * 3 + 3);\n    let nextPoint = flattengeo.vertices.slice(i * 3 + 3, i * 3 + 6);\n    if (nextPoint.length === 0) {\n      nextPoint = flattengeo.vertices.slice(0, 3);\n    }\n    const indexOffset = positions.length / 3;\n    positions.push(\n      prePoint[0],\n      prePoint[1],\n      1,\n      nextPoint[0],\n      nextPoint[1],\n      1,\n      prePoint[0],\n      prePoint[1],\n      0,\n      nextPoint[0],\n      nextPoint[1],\n      0,\n    );\n    indexArray.push(...[1, 2, 0, 3, 2, 1].map((v) => v + indexOffset));\n  }\n  return {\n    positions,\n    index: indexArray,\n  };\n}\nexport function fillPolygon(points: IPath[]) {\n  const flattengeo = earcut.flatten(points);\n  const triangles = earcut(\n    flattengeo.vertices,\n    flattengeo.holes,\n    flattengeo.dimensions,\n  );\n  return {\n    positions: flattengeo.vertices,\n    index: triangles,\n  };\n}\n"],"file":"extrude.js"}