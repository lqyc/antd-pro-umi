"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extrudePolygon;
exports.fillPolygon = fillPolygon;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _earcut = _interopRequireDefault(require("earcut"));

function extrudePolygon(path) {
  var p1 = path[0][0];
  var p2 = path[0][path[0].length - 1];

  if (p1[0] === p2[0] && p1[1] === p2[1]) {
    path[0] = path[0].slice(0, path[0].length - 1);
  }

  var n = path[0].length;

  var flattengeo = _earcut.default.flatten(path);

  var positions = [];
  var indexArray = [];
  var normals = [];

  for (var j = 0; j < flattengeo.vertices.length / 3; j++) {
    flattengeo.vertices[j * 3 + 2] = 1;
    normals.push(0, 0, 1);
  }

  positions.push.apply(positions, (0, _toConsumableArray2.default)(flattengeo.vertices));
  var triangles = (0, _earcut.default)(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  indexArray.push.apply(indexArray, (0, _toConsumableArray2.default)(triangles));

  var _loop = function _loop(i) {
    var prePoint = flattengeo.vertices.slice(i * 3, i * 3 + 3);
    var nextPoint = flattengeo.vertices.slice(i * 3 + 3, i * 3 + 6);

    if (nextPoint.length === 0) {
      nextPoint = flattengeo.vertices.slice(0, 3);
    }

    var indexOffset = positions.length / 3;
    positions.push(prePoint[0], prePoint[1], 1, nextPoint[0], nextPoint[1], 1, prePoint[0], prePoint[1], 0, nextPoint[0], nextPoint[1], 0);
    indexArray.push.apply(indexArray, (0, _toConsumableArray2.default)([1, 2, 0, 3, 2, 1].map(function (v) {
      return v + indexOffset;
    })));
  };

  for (var i = 0; i < n; i++) {
    _loop(i);
  }

  return {
    positions: positions,
    index: indexArray
  };
}

function fillPolygon(points) {
  var flattengeo = _earcut.default.flatten(points);

  var triangles = (0, _earcut.default)(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  return {
    positions: flattengeo.vertices,
    index: triangles
  };
}
//# sourceMappingURL=extrude.js.map