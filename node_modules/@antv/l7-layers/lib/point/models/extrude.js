"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

var _geo = require("../../utils/geo");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var pointExtrudeFrag = "varying vec4 v_color;\nuniform float u_opacity: 1.0;\n\n#pragma include \"picking\"\n\nvoid main() {\n  gl_FragColor = v_color;\n  gl_FragColor.a *= u_opacity;\n\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
var pointExtrudeVert = "precision highp float;\n\n#define ambientRatio 0.5\n#define diffuseRatio 0.3\n#define specularRatio 0.2\n\nattribute vec3 a_Position;\nattribute vec3 a_Pos;\nattribute vec4 a_Color;\nattribute vec3 a_Size;\nattribute vec3 a_Normal;\n\nuniform mat4 u_ModelMatrix;\nuniform vec2 u_offsets;\nvarying vec4 v_color;\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec3 size = a_Size * a_Position;\n\n  vec2 offset = project_pixel(size.xy);\n\n  vec4 project_pos = project_position(vec4(a_Pos.xy, 0., 1.0));\n\n  vec4 pos = vec4(project_pos.xy + offset, project_pixel(size.z), 1.0);\n\n  float lightWeight = calc_lighting(pos);\n  v_color =vec4(a_Color.rgb * lightWeight, a_Color.w);\n\n  gl_Position = project_common_position_to_clipspace(pos);\n  setPickingColor(a_PickingColor);\n}\n";

var ExtrudeModel = function (_BaseModel) {
  (0, _inherits2.default)(ExtrudeModel, _BaseModel);

  var _super = _createSuper(ExtrudeModel);

  function ExtrudeModel() {
    (0, _classCallCheck2.default)(this, ExtrudeModel);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ExtrudeModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity,
          offsets = _ref.offsets;

      return {
        u_opacity: opacity || 1.0,
        u_offsets: offsets || [0, 0]
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'pointExtrude2',
        vertexShader: pointExtrudeVert,
        fragmentShader: pointExtrudeFrag,
        triangulation: _triangulation.PointExtrudeTriangulation,
        blend: this.getBlend()
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var size = feature.size;

            if (size) {
              var buffersize = [];

              if (Array.isArray(size)) {
                buffersize = size.length === 2 ? [size[0], size[0], size[1]] : size;
              }

              if (!Array.isArray(size)) {
                buffersize = [size];
              }

              return buffersize;
            } else {
              return [2, 2, 2];
            }
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'pos',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Pos',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx) {
            var coordinates = (0, _geo.calculteCentroid)(feature.coordinates);
            return [coordinates[0], coordinates[1], 0];
          }
        }
      });
    }
  }]);
  return ExtrudeModel;
}(_BaseModel2.default);

exports.default = ExtrudeModel;
//# sourceMappingURL=extrude.js.map