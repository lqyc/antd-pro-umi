"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var pointImageFrag = "\nuniform sampler2D u_texture;\nvarying vec4 v_color;\nvarying vec2 v_uv;\nuniform vec2 u_textSize;\nuniform float u_stroke_width : 1;\nuniform vec4 u_stroke_color : [1, 1, 1, 1];\nuniform float u_stroke_opacity : 1;\nuniform float u_opacity : 1;\n\nvarying float v_size;\n#pragma include \"picking\"\nvoid main(){\nvec2 pos= v_uv / u_textSize + gl_PointCoord / u_textSize * 64.;\nvec4 textureColor=texture2D(u_texture,pos);\nif(all(lessThan(v_color, vec4(1.0+0.00001))) && all(greaterThan(v_color, vec4(1.0-0.00001))) || v_color==vec4(1.0)){\n      gl_FragColor= textureColor;\n}else {\n      gl_FragColor= step(0.01, textureColor.z) * v_color;\n}\ngl_FragColor.a =gl_FragColor.a * u_opacity;\ngl_FragColor = filterColor(gl_FragColor);\n}\n";
var pointImageVert = "precision highp float;\nattribute vec3 a_Position;\nattribute vec4 a_Color;\nattribute vec2 a_Uv;\nattribute float a_Size;\nvarying vec4 v_color;\nvarying vec2 v_uv;\nuniform mat4 u_ModelMatrix;\nuniform float u_stroke_width : 1;\nuniform vec2 u_offsets;\nvarying float v_size;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n   v_color = a_Color;\n   v_uv = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   v_size = a_Size;\n   vec2 offset = project_pixel(u_offsets);\n   gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0));\n   gl_PointSize = a_Size * 2.0 * u_DevicePixelRatio;\n\n  setPickingColor(a_PickingColor);\n\n}\n";

var IconeModel = function (_BaseModel) {
  (0, _inherits2.default)(IconeModel, _BaseModel);

  var _super = _createSuper(IconeModel);

  function IconeModel() {
    var _this;

    (0, _classCallCheck2.default)(this, IconeModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.texture = void 0;
    return _this;
  }

  (0, _createClass2.default)(IconeModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity;

      return {
        u_opacity: opacity || 1.0,
        u_texture: this.texture,
        u_textSize: [1024, this.iconService.canvasHeight || 128]
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _this2 = this;

      this.initIconFontGlyphs();
      this.registerBuiltinAttributes();
      this.updateTexture();
      this.iconService.on('imageUpdate', function () {
        _this2.updateTexture();

        _this2.layer.render();
      });
      return [this.layer.buildLayerModel({
        moduleName: 'pointiconImage',
        vertexShader: pointImageVert,
        fragmentShader: pointImageFrag,
        triangulation: _triangulation.PointImageTriangulation,
        primitive: _l7Core.gl.POINTS,
        depth: {
          enable: false
        },
        blend: this.getBlend()
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this3 = this;

      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var size = feature.size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var mapping = _this3.fontService.mapping;
            var shape = feature.shape;

            var icon = _this3.fontService.getGlyph(shape);

            var _mapping$icon = mapping[icon],
                x = _mapping$icon.x,
                y = _mapping$icon.y;
            return [x, y];
          }
        }
      });
    }
  }, {
    key: "updateTexture",
    value: function updateTexture() {
      var createTexture2D = this.rendererService.createTexture2D;
      var canvas = this.fontService.canvas;
      this.texture = createTexture2D({
        data: canvas,
        mag: _l7Core.gl.LINEAR,
        min: _l7Core.gl.LINEAR,
        width: canvas.width,
        height: canvas.height
      });
    }
  }, {
    key: "initIconFontGlyphs",
    value: function initIconFontGlyphs() {
      var _this4 = this;

      var _ref2 = this.layer.getLayerConfig(),
          _ref2$fontWeight = _ref2.fontWeight,
          fontWeight = _ref2$fontWeight === void 0 ? 'normal' : _ref2$fontWeight,
          _ref2$fontFamily = _ref2.fontFamily,
          fontFamily = _ref2$fontFamily === void 0 ? 'sans-serif' : _ref2$fontFamily;

      var data = this.layer.getEncodedData();
      var characterSet = [];
      data.forEach(function (item) {
        var _item$shape = item.shape,
            shape = _item$shape === void 0 ? '' : _item$shape;
        shape = shape.toString();

        var icon = _this4.fontService.getGlyph(shape);

        if (characterSet.indexOf(icon) === -1) {
          characterSet.push(icon);
        }
      });
      this.fontService.setFontOptions({
        characterSet: characterSet,
        fontWeight: fontWeight,
        fontFamily: fontFamily,
        fontSize: 48
      });
    }
  }]);
  return IconeModel;
}(_BaseModel2.default);

exports.default = IconeModel;
//# sourceMappingURL=icon-font.js.map