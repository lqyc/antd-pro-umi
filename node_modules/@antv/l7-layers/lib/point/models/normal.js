"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointTriangulation = PointTriangulation;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var normalFrag = "\nuniform float u_opacity : 1;\nuniform vec2 u_offsets;\nvarying vec4 v_color;\n\n#pragma include \"picking\"\nvoid main() {\n  gl_FragColor = v_color;\n  gl_FragColor.a =gl_FragColor.a * u_opacity;\n\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
var normalVert = "\nattribute vec3 a_Position;\nuniform mat4 u_ModelMatrix;\nattribute float a_Size;\nattribute vec4 a_Color;\nvarying vec4 v_color;\n\nuniform vec2 u_offsets;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\nvoid main() {\n  v_color = a_Color;\n  vec2 offset = project_pixel(u_offsets);\n  vec4 project_pos = project_position(vec4(a_Position, 1.0)) + vec4(a_Size / 2.,-a_Size /2.,0.,0.);\n  gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy+offset),project_pos.z,project_pos.w));\n  gl_PointSize = a_Size * 2.0 * u_DevicePixelRatio;\n    setPickingColor(a_PickingColor);\n}\n";

function PointTriangulation(feature) {
  var coordinates = feature.coordinates;
  return {
    vertices: (0, _toConsumableArray2.default)(coordinates),
    indices: [0],
    size: coordinates.length
  };
}

var NormalModel = function (_BaseModel) {
  (0, _inherits2.default)(NormalModel, _BaseModel);

  var _super = _createSuper(NormalModel);

  function NormalModel() {
    (0, _classCallCheck2.default)(this, NormalModel);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(NormalModel, [{
    key: "getDefaultStyle",
    value: function getDefaultStyle() {
      return {
        blend: 'additive'
      };
    }
  }, {
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$stroke = _ref.stroke,
          stroke = _ref$stroke === void 0 ? 'rgb(0,0,0,0)' : _ref$stroke,
          _ref$strokeWidth = _ref.strokeWidth,
          strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth,
          _ref$offsets = _ref.offsets,
          offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets;

      return {
        u_opacity: opacity,
        u_stroke_width: strokeWidth,
        u_stroke_color: (0, _l7Utils.rgb2arr)(stroke),
        u_offsets: [-offsets[0], offsets[1]]
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'normalpoint',
        vertexShader: normalVert,
        fragmentShader: normalFrag,
        triangulation: PointTriangulation,
        depth: {
          enable: false
        },
        primitive: _l7Core.gl.POINTS,
        blend: this.getBlend()
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });
    }
  }, {
    key: "defaultStyleOptions",
    value: function defaultStyleOptions() {
      return {
        blend: _l7Core.BlendType.additive
      };
    }
  }]);
  return NormalModel;
}(_BaseModel2.default);

exports.default = NormalModel;
//# sourceMappingURL=normal.js.map