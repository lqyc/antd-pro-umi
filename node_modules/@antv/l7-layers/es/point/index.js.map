{"version":3,"sources":["../../src/point/index.ts"],"names":["BaseLayer","PointModels","PointLayer","type","modelType","getModelType","layerModel","models","initModels","buildModels","properties","opacity","minimum","maximum","defaultConfig","normal","blend","fill","extrude","image","icon","text","layerData","getEncodedData","getLayerConfig","shape2d","shape3d","iconMap","iconService","getIconMap","item","find","fe","hasOwnProperty","shape","indexOf","fontService","getGlyph"],"mappings":";;;;;;;;;;AACA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,WAAP,MAAuC,gBAAvC;;IAMqBC,U;;;;;;;;;;;;;;;UACZC,I,GAAe,Y;;;;;;WACtB,uBAAqB;AACnB,UAAMC,SAAS,GAAG,KAAKC,YAAL,EAAlB;AACA,WAAKC,UAAL,GAAkB,IAAIL,WAAW,CAACG,SAAD,CAAf,CAA2B,IAA3B,CAAlB;AAEA,WAAKG,MAAL,GAAc,KAAKD,UAAL,CAAgBE,UAAhB,EAAd;AACD;;;WACD,yBAAuB;AACrB,WAAKD,MAAL,GAAc,KAAKD,UAAL,CAAgBG,WAAhB,EAAd;AACD;;;WACD,2BAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPR,YAAAA,IAAI,EAAE,QADC;AAEPS,YAAAA,OAAO,EAAE,CAFF;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WACD,4BAA6B;AAC3B,UAAMV,IAAI,GAAG,KAAKE,YAAL,EAAb;AACA,UAAMS,aAAa,GAAG;AACpBC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AADD,SADY;AAIpBC,QAAAA,IAAI,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAJc;AAKpBE,QAAAA,OAAO,EAAE,EALW;AAMpBC,QAAAA,KAAK,EAAE,EANa;AAOpBC,QAAAA,IAAI,EAAE,EAPc;AAQpBC,QAAAA,IAAI,EAAE;AACJL,UAAAA,KAAK,EAAE;AADH;AARc,OAAtB;AAYA,aAAOF,aAAa,CAACX,IAAD,CAApB;AACD;;;WAED,wBAAoC;AAGlC,UAAMmB,SAAS,GAAG,KAAKC,cAAL,EAAlB;;AAHkC,iCAIL,KAAKC,cAAL,EAJK;AAAA,UAI1BC,OAJ0B,wBAI1BA,OAJ0B;AAAA,UAIjBC,OAJiB,wBAIjBA,OAJiB;;AAKlC,UAAMC,OAAO,GAAG,KAAKC,WAAL,CAAiBC,UAAjB,EAAhB;AACA,UAAMC,IAAI,GAAGR,SAAS,CAACS,IAAV,CAAe,UAACC,EAAD,EAAwB;AAClD,eAAOA,EAAE,CAACC,cAAH,CAAkB,OAAlB,CAAP;AACD,OAFY,CAAb;;AAGA,UAAI,CAACH,IAAL,EAAW;AACT,eAAO,QAAP;AACD,OAFD,MAEO;AACL,YAAMI,KAAK,GAAGJ,IAAI,CAACI,KAAnB;;AACA,YAAIA,KAAK,KAAK,KAAd,EAAqB;AACnB,iBAAO,QAAP;AACD;;AACD,YAAI,CAAAT,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEU,OAAT,CAAiBD,KAAjB,OAAsC,CAAC,CAA3C,EAA8C;AAC5C,iBAAO,MAAP;AACD;;AACD,YAAI,CAAAR,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAES,OAAT,CAAiBD,KAAjB,OAAsC,CAAC,CAA3C,EAA8C;AAC5C,iBAAO,SAAP;AACD;;AACD,YAAIP,OAAO,CAACM,cAAR,CAAuBC,KAAvB,CAAJ,EAA6C;AAC3C,iBAAO,OAAP;AACD;;AACD,YAAI,KAAKE,WAAL,CAAiBC,QAAjB,CAA0BH,KAA1B,MAA+C,EAAnD,EAAuD;AACrD,iBAAO,MAAP;AACD;;AACD,eAAO,MAAP;AACD;AACF;;;;EArEqClC,S;;SAAnBE,U","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport PointModels, { PointType } from './models/index';\ninterface IPointLayerStyleOptions {\n  opacity: number;\n  strokeWidth: number;\n  stroke: string;\n}\nexport default class PointLayer extends BaseLayer<IPointLayerStyleOptions> {\n  public type: string = 'PointLayer';\n  public buildModels() {\n    const modelType = this.getModelType();\n    this.layerModel = new PointModels[modelType](this);\n\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n  protected getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      normal: {\n        blend: 'additive',\n      },\n      fill: { blend: 'normal' },\n      extrude: {},\n      image: {},\n      icon: {},\n      text: {\n        blend: 'normal',\n      },\n    };\n    return defaultConfig[type];\n  }\n\n  protected getModelType(): PointType {\n    // pointlayer\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const { shape2d, shape3d } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return 'normal';\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'normal';\n      }\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return 'fill';\n      }\n      if (shape3d?.indexOf(shape as string) !== -1) {\n        return 'extrude';\n      }\n      if (iconMap.hasOwnProperty(shape as string)) {\n        return 'image';\n      }\n      if (this.fontService.getGlyph(shape as string) !== '') {\n        return 'icon';\n      }\n      return 'text';\n    }\n  }\n}\n"],"file":"index.js"}