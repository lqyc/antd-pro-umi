import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AttributeType, gl } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
import { LineTriangulation } from '../../core/triangulation';
var line_frag = "#define LineTypeSolid 0.0\n#define LineTypeDash 1.0\n#define Animate 0.0\nuniform float u_blur : 0.99;\nuniform float u_line_type: 0.0;\nuniform float u_opacity : 1.0;\nvarying vec4 v_color;\nvarying vec2 v_normal;\n\n\n// dash\nuniform float u_dash_offset : 0.0;\nuniform float u_dash_ratio : 0.1;\nvarying float v_distance_ratio;\nvarying vec4 v_dash_array;\nvarying float v_side;\n\n\n#pragma include \"picking\"\n\nuniform float u_time;\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\n// [animate, duration, interval, trailLength],\nvoid main() {\n  gl_FragColor = v_color;\n  // anti-alias\n  // float blur = 1.0 - smoothstep(u_blur, 1., length(v_normal.xy));\n  gl_FragColor.a *= u_opacity;\n  if(u_aimate.x == Animate) {\n      float alpha =1.0 - fract( mod(1.0- v_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + u_time / u_aimate.y);\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\n      alpha = smoothstep(0., 1., alpha);\n      gl_FragColor.a *= alpha;\n  }\n // dash line\n  if(u_line_type == LineTypeDash) {\n    float flag = 0.;\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\n      flag = 1.;\n    }\n    gl_FragColor.a *=flag;\n    // gl_FragColor.a *=(1.0- step(v_dash_array.x, mod(v_distance_ratio, dashLength)));\n  }\n\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
var line_vert = "#define LineTypeSolid 0.0\n#define LineTypeDash 1.0\n#define Animate 0.0\n\nattribute float a_Miter;\nattribute vec4 a_Color;\nattribute vec2 a_Size;\nattribute vec3 a_Normal;\nattribute vec3 a_Position;\n\n// dash line\nattribute float a_Total_Distance;\nattribute float a_Distance;\n\nuniform mat4 u_ModelMatrix;\nuniform float u_line_type: 0.0;\nuniform vec4 u_dash_array: [10.0, 5.\uFF0C0, 0];\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvarying vec4 v_color;\nvarying vec4 v_dash_array;\nvarying vec2 v_normal;\nvarying float v_distance_ratio;\nvarying float v_side;\n\n\nvoid main() {\n\n  if(u_line_type == LineTypeDash) {\n    v_distance_ratio = a_Distance / a_Total_Distance;\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / a_Total_Distance;\n  }\n  if(u_aimate.x == Animate) {\n      v_distance_ratio = a_Distance / a_Total_Distance;\n  }\n  v_normal = vec2(reverse_offset_normal(a_Normal) * sign(a_Miter));\n  v_color = a_Color;\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\n  vec2 offset = project_pixel(size.xy);\n  v_side = a_Miter * a_Size.x;\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\n\n  setPickingColor(a_PickingColor);\n}\n";
var lineStyleObj = {
  solid: 0.0,
  dash: 1.0
};

var LineModel = function (_BaseModel) {
  _inherits(LineModel, _BaseModel);

  var _super = _createSuper(LineModel);

  function LineModel() {
    _classCallCheck(this, LineModel);

    return _super.apply(this, arguments);
  }

  _createClass(LineModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity,
          _ref$lineType = _ref.lineType,
          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,
          _ref$dashArray = _ref.dashArray,
          dashArray = _ref$dashArray === void 0 ? [10, 5, 0, 0] : _ref$dashArray;

      if (dashArray.length === 2) {
        dashArray.push(0, 0);
      }

      return {
        u_opacity: opacity || 1.0,
        u_line_type: lineStyleObj[lineType],
        u_dash_array: dashArray
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      var _ref2 = this.layer.getLayerConfig(),
          animateOption = _ref2.animateOption;

      return {
        u_aimate: this.animateOption2Array(animateOption),
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'line',
        vertexShader: line_vert,
        fragmentShader: line_frag,
        triangulation: LineTriangulation,
        primitive: gl.TRIANGLES,
        blend: this.getBlend(),
        depth: {
          enable: false
        }
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _ref3 = this.layer.getLayerConfig(),
          _ref3$lineType = _ref3.lineType,
          lineType = _ref3$lineType === void 0 ? 'solid' : _ref3$lineType;

      this.styleAttributeService.registerStyleAttribute({
        name: 'distance',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Distance',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[3]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'total_distance',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Total_Distance',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[5]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'miter',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Miter',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[4]];
          }
        }
      });
    }
  }]);

  return LineModel;
}(BaseModel);

export { LineModel as default };
//# sourceMappingURL=line.js.map