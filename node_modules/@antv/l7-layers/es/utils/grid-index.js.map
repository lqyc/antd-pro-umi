{"version":3,"sources":["../../src/utils/grid-index.ts"],"names":["GridIndex","width","height","cellSize","boxCells","xCellCount","yCellCount","boxKeys","bboxes","xScale","yScale","boxUid","Math","ceil","i","push","key","x1","y1","x2","y2","forEachCell","insertBoxCell","predicate","queryHitTest","cellIndex","uid","hitTest","result","length","filter","queryArgs","seenUids","box","circle","queryCell","boxCell","offset","fn","arg1","arg2","cx1","convertToXCellCoord","cy1","convertToYCellCoord","cx2","cy2","x","y","call","max","min","floor"],"mappings":"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","sourcesContent":["interface IQueryArgs {\n  hitTest: boolean;\n  seenUids: { box: any; circle: any };\n}\ntype CallBack = (...args: any[]) => any;\n/**\n * 网格索引，相比 @mapbox/grid-index，在简单计算碰撞检测结果时效率更高\n * @see https://zhuanlan.zhihu.com/p/74373214\n */\nclass GridIndex {\n  private boxCells: number[][] = [];\n  private xCellCount: number;\n  private yCellCount: number;\n  private boxKeys: string[];\n  private bboxes: number[];\n  private width: number;\n  private height: number;\n  private xScale: number;\n  private yScale: number;\n  private boxUid: number;\n\n  constructor(width: number, height: number, cellSize: number) {\n    const boxCells = this.boxCells;\n\n    this.xCellCount = Math.ceil(width / cellSize);\n    this.yCellCount = Math.ceil(height / cellSize);\n\n    for (let i = 0; i < this.xCellCount * this.yCellCount; i++) {\n      boxCells.push([]);\n    }\n    this.boxKeys = [];\n    this.bboxes = [];\n\n    this.width = width;\n    this.height = height;\n    this.xScale = this.xCellCount / width;\n    this.yScale = this.yCellCount / height;\n    this.boxUid = 0;\n  }\n\n  public insert(key: any, x1: number, y1: number, x2: number, y2: number) {\n    this.forEachCell(x1, y1, x2, y2, this.insertBoxCell, this.boxUid++);\n    this.boxKeys.push(key);\n    this.bboxes.push(x1);\n    this.bboxes.push(y1);\n    this.bboxes.push(x2);\n    this.bboxes.push(y2);\n  }\n\n  public query(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    predicate?: CallBack,\n  ) {\n    return this.queryHitTest(x1, y1, x2, y2, false, predicate);\n  }\n\n  public hitTest(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    predicate?: CallBack,\n  ) {\n    return this.queryHitTest(x1, y1, x2, y2, true, predicate);\n  }\n\n  private insertBoxCell(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    cellIndex: number,\n    uid: number,\n  ) {\n    this.boxCells[cellIndex].push(uid);\n  }\n\n  private queryHitTest(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    hitTest: boolean,\n    predicate?: CallBack,\n  ) {\n    if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {\n      return hitTest ? false : [];\n    }\n    const result: any[] = [];\n    if (x1 <= 0 && y1 <= 0 && this.width <= x2 && this.height <= y2) {\n      // 这一步是高效的关键，后续精确碰撞检测结果在计算文本可见性时并不需要\n      if (hitTest) {\n        return true;\n      }\n      for (let boxUid = 0; boxUid < this.boxKeys.length; boxUid++) {\n        result.push({\n          key: this.boxKeys[boxUid],\n          x1: this.bboxes[boxUid * 4],\n          y1: this.bboxes[boxUid * 4 + 1],\n          x2: this.bboxes[boxUid * 4 + 2],\n          y2: this.bboxes[boxUid * 4 + 3],\n        });\n      }\n      return predicate ? result.filter(predicate) : result;\n    }\n\n    const queryArgs = {\n      hitTest,\n      seenUids: { box: {}, circle: {} },\n    };\n    this.forEachCell(\n      x1,\n      y1,\n      x2,\n      y2,\n      this.queryCell,\n      result,\n      queryArgs,\n      predicate,\n    );\n    return hitTest ? result.length > 0 : result;\n  }\n\n  private queryCell(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    cellIndex: number,\n    result: any[],\n    queryArgs?: any,\n    predicate?: CallBack,\n  ) {\n    const seenUids = queryArgs.seenUids;\n    const boxCell = this.boxCells[cellIndex];\n    if (boxCell !== null) {\n      const bboxes = this.bboxes;\n      for (const boxUid of boxCell) {\n        if (!seenUids.box[boxUid]) {\n          seenUids.box[boxUid] = true;\n          const offset = boxUid * 4;\n          if (\n            x1 <= bboxes[offset + 2] &&\n            y1 <= bboxes[offset + 3] &&\n            x2 >= bboxes[offset + 0] &&\n            y2 >= bboxes[offset + 1] &&\n            (!predicate || predicate(this.boxKeys[boxUid]))\n          ) {\n            if (queryArgs.hitTest) {\n              result.push(true);\n              return true;\n            }\n            result.push({\n              key: this.boxKeys[boxUid],\n              x1: bboxes[offset],\n              y1: bboxes[offset + 1],\n              x2: bboxes[offset + 2],\n              y2: bboxes[offset + 3],\n            });\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private forEachCell(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    fn: CallBack,\n    arg1: any[] | number,\n    arg2?: IQueryArgs,\n    predicate?: CallBack,\n  ) {\n    const cx1 = this.convertToXCellCoord(x1);\n    const cy1 = this.convertToYCellCoord(y1);\n    const cx2 = this.convertToXCellCoord(x2);\n    const cy2 = this.convertToYCellCoord(y2);\n\n    for (let x = cx1; x <= cx2; x++) {\n      for (let y = cy1; y <= cy2; y++) {\n        const cellIndex = this.xCellCount * y + x;\n        if (fn.call(this, x1, y1, x2, y2, cellIndex, arg1, arg2, predicate)) {\n          return;\n        }\n      }\n    }\n  }\n\n  private convertToXCellCoord(x: number) {\n    return Math.max(\n      0,\n      Math.min(this.xCellCount - 1, Math.floor(x * this.xScale)),\n    );\n  }\n\n  private convertToYCellCoord(y: number) {\n    return Math.max(\n      0,\n      Math.min(this.yCellCount - 1, Math.floor(y * this.yScale)),\n    );\n  }\n}\n\nexport default GridIndex;\n"],"file":"grid-index.js"}