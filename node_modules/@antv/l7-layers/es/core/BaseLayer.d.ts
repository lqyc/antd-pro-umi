import { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';
import { BlendType, IActiveOption, IAnimateOption, ICameraService, ICoordinateSystemService, IDataState, IEncodeFeature, IFontService, IGlobalConfigService, IIconService, IInteractionService, ILayer, ILayerConfig, ILayerModel, ILayerModelInitializationOptions, ILayerPlugin, ILayerService, ILogService, IMapService, IModel, IModelInitializationOptions, IMultiPassRenderer, IPass, IPickingService, IPostProcessingPass, IRendererService, IScale, IScaleOptions, IShaderModuleService, ISourceCFG, IStyleAttributeService, IStyleAttributeUpdateOptions, StyleAttributeField, StyleAttributeOption } from '@antv/l7-core';
import Source from '@antv/l7-source';
import { EventEmitter } from 'eventemitter3';
import { Container } from 'inversify';
export default class BaseLayer<ChildLayerStyleOptions = {}> extends EventEmitter implements ILayer {
    id: string;
    name: string;
    type: string;
    visible: boolean;
    zIndex: number;
    minZoom: number;
    maxZoom: number;
    inited: boolean;
    layerModelNeedUpdate: boolean;
    pickedFeatureID: number | null;
    selectedFeatureID: number | null;
    styleNeedUpdate: boolean;
    dataState: IDataState;
    hooks: {
        init: SyncBailHook;
        afterInit: SyncBailHook;
        beforeRender: SyncBailHook;
        beforeRenderData: SyncWaterfallHook;
        afterRender: SyncHook;
        beforePickingEncode: SyncHook;
        afterPickingEncode: SyncHook;
        beforeHighlight: SyncHook;
        afterHighlight: SyncHook;
        beforeSelect: SyncHook;
        afterSelect: SyncHook;
        beforeDestroy: SyncHook;
        afterDestroy: SyncHook;
    };
    models: IModel[];
    multiPassRenderer: IMultiPassRenderer;
    plugins: ILayerPlugin[];
    sourceOption: {
        data: any;
        options?: ISourceCFG;
    };
    layerModel: ILayerModel;
    protected readonly logger: ILogService;
    protected readonly configService: IGlobalConfigService;
    protected readonly shaderModuleService: IShaderModuleService;
    protected cameraService: ICameraService;
    protected coordinateService: ICoordinateSystemService;
    protected iconService: IIconService;
    protected fontService: IFontService;
    protected pickingService: IPickingService;
    protected rendererService: IRendererService;
    protected layerService: ILayerService;
    protected interactionService: IInteractionService;
    protected mapService: IMapService;
    protected styleAttributeService: IStyleAttributeService;
    protected layerSource: Source;
    protected postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;
    protected normalPassFactory: (name: string) => IPass<unknown>;
    protected animateOptions: IAnimateOption;
    /**
     * 图层容器
     */
    private container;
    private encodedData;
    private configSchema;
    private currentPickId;
    private rawConfig;
    private needUpdateConfig;
    /**
     * 待更新样式属性，在初始化阶段完成注册
     */
    private pendingStyleAttributes;
    private scaleOptions;
    private animateStartTime;
    private aniamateStatus;
    constructor(config?: Partial<ILayerConfig & ChildLayerStyleOptions>);
    getLayerConfig(): Partial<ILayerConfig & import("@antv/l7-core").ISceneConfig & ChildLayerStyleOptions>;
    updateLayerConfig(configToUpdate: Partial<ILayerConfig | ChildLayerStyleOptions>): void;
    /**
     * 注入图层容器，父容器为场景容器
     * RootContainer 1
     *  -> SceneContainer 1.*
     *   -> LayerContainer 1.*
     */
    setContainer(container: Container): void;
    getContainer(): Container;
    addPlugin(plugin: ILayerPlugin): this;
    init(): this;
    /**
     * Model初始化前需要更新Model样式
     */
    prepareBuildModel(): void;
    color(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    rotate(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    size(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    filter(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    shape(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    label(field: StyleAttributeField, values?: StyleAttributeOption, updateOptions?: Partial<IStyleAttributeUpdateOptions>): this;
    animate(options: IAnimateOption | boolean): this;
    source(data: any, options?: ISourceCFG): ILayer;
    setData(data: any, options?: ISourceCFG): this;
    style(options: Partial<ChildLayerStyleOptions> & Partial<ILayerConfig>): ILayer;
    scale(field: string | IScaleOptions, cfg: IScale): this;
    render(): ILayer;
    active(options: IActiveOption): this;
    setActive(id: number | {
        x: number;
        y: number;
    }, options?: IActiveOption): void;
    select(option: IActiveOption | boolean): ILayer;
    setSelect(id: number | {
        x: number;
        y: number;
    }, options?: IActiveOption): void;
    setBlend(type: keyof typeof BlendType): void;
    show(): ILayer;
    hide(): ILayer;
    setIndex(index: number): ILayer;
    setCurrentPickId(id: number): void;
    getCurrentPickId(): number | null;
    setCurrentSelectedId(id: number): void;
    getCurrentSelectedId(): number | null;
    isVisible(): boolean;
    setMinZoom(minZoom: number): ILayer;
    getMinZoom(): number;
    getMaxZoom(): number;
    get(name: string): any;
    setMaxZoom(maxZoom: number): ILayer;
    /**
     * zoom to layer Bounds
     */
    fitBounds(fitBoundsOptions?: unknown): ILayer;
    destroy(): void;
    clear(): void;
    clearModels(): void;
    isDirty(): boolean;
    setSource(source: Source): void;
    getSource(): Source;
    getScaleOptions(): IScaleOptions;
    setEncodedData(encodedData: IEncodeFeature[]): void;
    getEncodedData(): IEncodeFeature[];
    getConfigSchemaForValidation(): object;
    getLegendItems(name: string): any;
    pick({ x, y }: {
        x: number;
        y: number;
    }): void;
    boxSelect(box: [number, number, number, number], cb: (...args: any[]) => void): void;
    buildLayerModel(options: ILayerModelInitializationOptions & Partial<IModelInitializationOptions>): IModel;
    getTime(): number;
    setAnimateStartTime(): void;
    stopAnimate(): void;
    getLayerAnimateTime(): number;
    needPick(type: string): boolean;
    buildModels(): void;
    rebuildModels(): void;
    renderModels(): this;
    protected getConfigSchema(): void;
    protected getModelType(): unknown;
    protected getDefaultConfig(): {};
    private sourceEvent;
    private reRender;
    private splitValuesAndCallbackInAttribute;
    private updateStyleAttribute;
}
