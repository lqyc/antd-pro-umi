{"version":3,"sources":["../../../src/core/shape/extrude.ts"],"names":["lngLatToMeters","earcut","vec3","extrudePolygon","path","p1","p2","length","slice","n","flattengeo","flatten","vertices","dimensions","positions","indexArray","j","push","triangles","holes","i","prePoint","nextPoint","indexOffset","map","v","index","fillPolygon","points","extrude_PolygonNormal","needFlat","normals","normal","computeVertexNormals","p3","cb","create","ab","pA","fromValues","pB","pC","sub","cross","newNormal","normalize"],"mappings":"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","sourcesContent":["import { lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\nimport { vec3 } from 'gl-matrix';\nimport { IPath } from './Path';\nexport interface IExtrudeGeomety {\n  positions: number[];\n  index: number[];\n  normals?: number[];\n}\n/**\n * 拉伸多边形顶点，返回拉伸后的顶点信息\n * @param paths 路径数据组\n * @param extrude 是否拉伸\n */\nexport default function extrudePolygon(path: IPath[]): IExtrudeGeomety {\n  const p1 = path[0][0];\n  const p2 = path[0][path[0].length - 1];\n  if (p1[0] === p2[0] && p1[1] === p2[1]) {\n    path[0] = path[0].slice(0, path[0].length - 1);\n  }\n\n  const n = path[0].length;\n  const flattengeo = earcut.flatten(path);\n  const { vertices, dimensions } = flattengeo;\n  const positions = [];\n  const indexArray = [];\n  // 设置顶部z值\n  for (let j = 0; j < vertices.length / dimensions; j++) {\n    if (dimensions === 2) {\n      positions.push(vertices[j * 2], vertices[j * 2 + 1], 1);\n    } else {\n      positions.push(vertices[j * 3], vertices[j * 3 + 1], 1);\n    }\n  }\n  const triangles = earcut(\n    flattengeo.vertices,\n    flattengeo.holes,\n    flattengeo.dimensions,\n  );\n  indexArray.push(...triangles);\n  for (let i = 0; i < n; i++) {\n    const prePoint = flattengeo.vertices.slice(\n      i * dimensions,\n      (i + 1) * dimensions,\n    );\n    let nextPoint = flattengeo.vertices.slice(\n      (i + 1) * dimensions,\n      (i + 2) * dimensions,\n    );\n    if (nextPoint.length === 0) {\n      nextPoint = flattengeo.vertices.slice(0, dimensions);\n    }\n    const indexOffset = positions.length / 3;\n    positions.push(\n      prePoint[0],\n      prePoint[1],\n      1,\n      nextPoint[0],\n      nextPoint[1],\n      1,\n      prePoint[0],\n      prePoint[1],\n      0,\n      nextPoint[0],\n      nextPoint[1],\n      0,\n    );\n    indexArray.push(...[0, 2, 1, 2, 3, 1].map((v) => v + indexOffset));\n  }\n  return {\n    positions,\n    index: indexArray,\n  };\n}\nexport function fillPolygon(points: IPath[]) {\n  const flattengeo = earcut.flatten(points);\n  const triangles = earcut(\n    flattengeo.vertices,\n    flattengeo.holes,\n    flattengeo.dimensions,\n  );\n  return {\n    positions: flattengeo.vertices,\n    index: triangles,\n  };\n}\n\nexport function extrude_PolygonNormal(\n  path: IPath[],\n  needFlat = false, // 是否需要转成平面坐标\n): IExtrudeGeomety {\n  const p1 = path[0][0];\n  const p2 = path[0][path[0].length - 1];\n  if (p1[0] === p2[0] && p1[1] === p2[1]) {\n    path[0] = path[0].slice(0, path[0].length - 1);\n  }\n  const n = path[0].length;\n  const flattengeo = earcut.flatten(path);\n  const { vertices, dimensions } = flattengeo;\n  const positions = [];\n  const indexArray = [];\n  const normals = [];\n  // 设置顶部z值 position uv\n  for (let j = 0; j < vertices.length / dimensions; j++) {\n    if (dimensions === 2) {\n      positions.push(vertices[j * 2], vertices[j * 2 + 1], 1, -1, -1);\n    } else {\n      positions.push(vertices[j * 3], vertices[j * 3 + 1], 1, -1, -1);\n    }\n    normals.push(0, 0, 1);\n  }\n  const triangles = earcut(\n    flattengeo.vertices,\n    flattengeo.holes,\n    flattengeo.dimensions,\n  );\n  indexArray.push(...triangles);\n  for (let i = 0; i < n; i++) {\n    const prePoint = flattengeo.vertices.slice(\n      i * dimensions,\n      (i + 1) * dimensions,\n    );\n    let nextPoint = flattengeo.vertices.slice(\n      (i + 1) * dimensions,\n      (i + 2) * dimensions,\n    );\n    if (nextPoint.length === 0) {\n      nextPoint = flattengeo.vertices.slice(0, dimensions);\n    }\n    const indexOffset = positions.length / 5;\n    positions.push(\n      prePoint[0],\n      prePoint[1],\n      1,\n      0,\n      0,\n      nextPoint[0],\n      nextPoint[1],\n      1,\n      0.1,\n      0,\n      prePoint[0],\n      prePoint[1],\n      0,\n      0,\n      0.8,\n      nextPoint[0],\n      nextPoint[1],\n      0,\n      0.1,\n      0.8,\n    );\n    const normal = computeVertexNormals(\n      [nextPoint[0], nextPoint[1], 1],\n      [prePoint[0], prePoint[1], 0],\n      [prePoint[0], prePoint[1], 1],\n      needFlat,\n    );\n    normals.push(...normal, ...normal, ...normal, ...normal);\n    indexArray.push(...[1, 2, 0, 3, 2, 1].map((v) => v + indexOffset));\n  }\n  return {\n    positions,\n    index: indexArray,\n    normals,\n  };\n}\nfunction computeVertexNormals(\n  p1: [number, number, number],\n  p2: [number, number, number],\n  p3: [number, number, number],\n  needFlat: boolean = false,\n) {\n  const cb = vec3.create();\n  const ab = vec3.create();\n  const normal = vec3.create();\n\n  if (needFlat) {\n    p1 = lngLatToMeters(p1) as [number, number, number];\n    p2 = lngLatToMeters(p2) as [number, number, number];\n    p3 = lngLatToMeters(p3) as [number, number, number];\n  }\n  const pA = vec3.fromValues(...p1);\n  const pB = vec3.fromValues(...p2);\n  const pC = vec3.fromValues(...p3);\n  vec3.sub(cb, pC, pB);\n  vec3.sub(ab, pA, pB);\n  vec3.cross(normal, cb, ab);\n  const newNormal = vec3.create();\n  vec3.normalize(newNormal, normal);\n\n  return newNormal;\n}\n"],"file":"extrude.js"}