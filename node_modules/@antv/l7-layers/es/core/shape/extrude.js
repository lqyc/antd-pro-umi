import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { lngLatToMeters } from '@antv/l7-utils';
import earcut from 'earcut';
import { vec3 } from 'gl-matrix';
export default function extrudePolygon(path) {
  var p1 = path[0][0];
  var p2 = path[0][path[0].length - 1];

  if (p1[0] === p2[0] && p1[1] === p2[1]) {
    path[0] = path[0].slice(0, path[0].length - 1);
  }

  var n = path[0].length;
  var flattengeo = earcut.flatten(path);
  var vertices = flattengeo.vertices,
      dimensions = flattengeo.dimensions;
  var positions = [];
  var indexArray = [];

  for (var j = 0; j < vertices.length / dimensions; j++) {
    if (dimensions === 2) {
      positions.push(vertices[j * 2], vertices[j * 2 + 1], 1);
    } else {
      positions.push(vertices[j * 3], vertices[j * 3 + 1], 1);
    }
  }

  var triangles = earcut(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  indexArray.push.apply(indexArray, _toConsumableArray(triangles));

  var _loop = function _loop(i) {
    var prePoint = flattengeo.vertices.slice(i * dimensions, (i + 1) * dimensions);
    var nextPoint = flattengeo.vertices.slice((i + 1) * dimensions, (i + 2) * dimensions);

    if (nextPoint.length === 0) {
      nextPoint = flattengeo.vertices.slice(0, dimensions);
    }

    var indexOffset = positions.length / 3;
    positions.push(prePoint[0], prePoint[1], 1, nextPoint[0], nextPoint[1], 1, prePoint[0], prePoint[1], 0, nextPoint[0], nextPoint[1], 0);
    indexArray.push.apply(indexArray, _toConsumableArray([0, 2, 1, 2, 3, 1].map(function (v) {
      return v + indexOffset;
    })));
  };

  for (var i = 0; i < n; i++) {
    _loop(i);
  }

  return {
    positions: positions,
    index: indexArray
  };
}
export function fillPolygon(points) {
  var flattengeo = earcut.flatten(points);
  var triangles = earcut(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  return {
    positions: flattengeo.vertices,
    index: triangles
  };
}
export function extrude_PolygonNormal(path) {
  var needFlat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var p1 = path[0][0];
  var p2 = path[0][path[0].length - 1];

  if (p1[0] === p2[0] && p1[1] === p2[1]) {
    path[0] = path[0].slice(0, path[0].length - 1);
  }

  var n = path[0].length;
  var flattengeo = earcut.flatten(path);
  var vertices = flattengeo.vertices,
      dimensions = flattengeo.dimensions;
  var positions = [];
  var indexArray = [];
  var normals = [];

  for (var j = 0; j < vertices.length / dimensions; j++) {
    if (dimensions === 2) {
      positions.push(vertices[j * 2], vertices[j * 2 + 1], 1, -1, -1);
    } else {
      positions.push(vertices[j * 3], vertices[j * 3 + 1], 1, -1, -1);
    }

    normals.push(0, 0, 1);
  }

  var triangles = earcut(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  indexArray.push.apply(indexArray, _toConsumableArray(triangles));

  var _loop2 = function _loop2(i) {
    var prePoint = flattengeo.vertices.slice(i * dimensions, (i + 1) * dimensions);
    var nextPoint = flattengeo.vertices.slice((i + 1) * dimensions, (i + 2) * dimensions);

    if (nextPoint.length === 0) {
      nextPoint = flattengeo.vertices.slice(0, dimensions);
    }

    var indexOffset = positions.length / 5;
    positions.push(prePoint[0], prePoint[1], 1, 0, 0, nextPoint[0], nextPoint[1], 1, 0.1, 0, prePoint[0], prePoint[1], 0, 0, 0.8, nextPoint[0], nextPoint[1], 0, 0.1, 0.8);
    var normal = computeVertexNormals([nextPoint[0], nextPoint[1], 1], [prePoint[0], prePoint[1], 0], [prePoint[0], prePoint[1], 1], needFlat);
    normals.push.apply(normals, _toConsumableArray(normal).concat(_toConsumableArray(normal), _toConsumableArray(normal), _toConsumableArray(normal)));
    indexArray.push.apply(indexArray, _toConsumableArray([1, 2, 0, 3, 2, 1].map(function (v) {
      return v + indexOffset;
    })));
  };

  for (var i = 0; i < n; i++) {
    _loop2(i);
  }

  return {
    positions: positions,
    index: indexArray,
    normals: normals
  };
}

function computeVertexNormals(p1, p2, p3) {
  var needFlat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var cb = vec3.create();
  var ab = vec3.create();
  var normal = vec3.create();

  if (needFlat) {
    p1 = lngLatToMeters(p1);
    p2 = lngLatToMeters(p2);
    p3 = lngLatToMeters(p3);
  }

  var pA = vec3.fromValues.apply(vec3, _toConsumableArray(p1));
  var pB = vec3.fromValues.apply(vec3, _toConsumableArray(p2));
  var pC = vec3.fromValues.apply(vec3, _toConsumableArray(p3));
  vec3.sub(cb, pC, pB);
  vec3.sub(ab, pA, pB);
  vec3.cross(normal, cb, ab);
  var newNormal = vec3.create();
  vec3.normalize(newNormal, normal);
  return newNormal;
}
//# sourceMappingURL=extrude.js.map