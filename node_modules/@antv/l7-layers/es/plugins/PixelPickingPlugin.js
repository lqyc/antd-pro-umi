import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class;

import { AttributeType, gl } from '@antv/l7-core';
import { decodePickingColor, encodePickingColor, rgb2arr } from '@antv/l7-utils';
import { injectable } from 'inversify';
var PickingStage = {
  NONE: 0.0,
  ENCODE: 1.0,
  HIGHLIGHT: 2.0
};
var PixelPickingPlugin = (_dec = injectable(), _dec(_class = function () {
  function PixelPickingPlugin() {
    _classCallCheck(this, PixelPickingPlugin);
  }

  _createClass(PixelPickingPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var rendererService = _ref.rendererService,
          styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
            enablePicking = _layer$getLayerConfig.enablePicking;

        styleAttributeService.registerStyleAttribute({
          name: 'pickingColor',
          type: AttributeType.Attribute,
          descriptor: {
            name: 'a_PickingColor',
            buffer: {
              data: [],
              type: gl.FLOAT
            },
            size: 3,
            update: function update(feature, featureIdx) {
              var id = feature.id;
              return enablePicking ? encodePickingColor(id) : [0, 0, 0];
            }
          }
        });
      });
      layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig2 = layer.getLayerConfig(),
            enablePicking = _layer$getLayerConfig2.enablePicking;

        if (enablePicking && layer.isVisible()) {
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.ENCODE
            });
          });
        }
      });
      layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig3 = layer.getLayerConfig(),
            enablePicking = _layer$getLayerConfig3.enablePicking;

        if (enablePicking && layer.isVisible()) {
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.HIGHLIGHT
            });
          });
        }
      });
      layer.hooks.beforeHighlight.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig4 = layer.getLayerConfig(),
            highlightColor = _layer$getLayerConfig4.highlightColor;

        var highlightColorInArray = typeof highlightColor === 'string' ? rgb2arr(highlightColor) : highlightColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor))
        });
        layer.models.forEach(function (model) {
          return model.addUniforms({
            u_PickingStage: PickingStage.HIGHLIGHT,
            u_PickingColor: pickedColor,
            u_HighlightColor: highlightColorInArray.map(function (c) {
              return c * 255;
            })
          });
        });
      });
      layer.hooks.beforeSelect.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig5 = layer.getLayerConfig(),
            selectColor = _layer$getLayerConfig5.selectColor;

        var highlightColorInArray = typeof selectColor === 'string' ? rgb2arr(selectColor) : selectColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor))
        });
        layer.models.forEach(function (model) {
          return model.addUniforms({
            u_PickingStage: PickingStage.HIGHLIGHT,
            u_PickingColor: pickedColor,
            u_HighlightColor: highlightColorInArray.map(function (c) {
              return c * 255;
            })
          });
        });
      });
    }
  }]);

  return PixelPickingPlugin;
}()) || _class);
export { PixelPickingPlugin as default };
//# sourceMappingURL=PixelPickingPlugin.js.map