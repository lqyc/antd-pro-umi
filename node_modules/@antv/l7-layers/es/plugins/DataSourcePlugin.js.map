{"version":3,"sources":["../../src/plugins/DataSourcePlugin.ts"],"names":["TYPES","Source","injectable","DataSourcePlugin","mapService","layer","getContainer","get","IMapService","hooks","init","tap","sourceOption","data","options","setSource","updateClusterData","beforeRenderData","neeUpdate1","neeUpdate2","dataState","dataSourceNeedUpdate","source","getSource","cluster","clusterOptions","zoom","maxZoom","newZoom","getZoom","Math","abs","floor"],"mappings":";;;;;AAAA,SAA4CA,KAA5C,QAAyD,eAAzD;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,UAAT,QAA2B,WAA3B;IAGqBC,gB,WADpBD,UAAU,E;;;;SAECE,U;;;;;WACV,eAAaC,KAAb,EAA4B;AAAA;;AAC1B,WAAKD,UAAL,GAAkBC,KAAK,CAACC,YAAN,GAAqBC,GAArB,CAAsCP,KAAK,CAACQ,WAA5C,CAAlB;AACAH,MAAAA,KAAK,CAACI,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,kBAArB,EAAyC,YAAM;AAAA,kCACnBN,KAAK,CAACO,YADa;AAAA,YACrCC,IADqC,uBACrCA,IADqC;AAAA,YAC/BC,OAD+B,uBAC/BA,OAD+B;AAE7CT,QAAAA,KAAK,CAACU,SAAN,CAAgB,IAAId,MAAJ,CAAWY,IAAX,EAAiBC,OAAjB,CAAhB;;AACA,QAAA,KAAI,CAACE,iBAAL,CAAuBX,KAAvB;AACD,OAJD;AAOAA,MAAAA,KAAK,CAACI,KAAN,CAAYQ,gBAAZ,CAA6BN,GAA7B,CAAiC,kBAAjC,EAAqD,YAAM;AACzD,YAAMO,UAAU,GAAG,KAAI,CAACF,iBAAL,CAAuBX,KAAvB,CAAnB;;AACA,YAAMc,UAAU,GAAGd,KAAK,CAACe,SAAN,CAAgBC,oBAAnC;AACAhB,QAAAA,KAAK,CAACe,SAAN,CAAgBC,oBAAhB,GAAuC,KAAvC;AACA,eAAOH,UAAU,IAAIC,UAArB;AACD,OALD;AAMD;;;WAED,2BAA0Bd,KAA1B,EAAkD;AAChD,UAAMiB,MAAM,GAAGjB,KAAK,CAACkB,SAAN,EAAf;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;AAFgD,kCAGbF,MAAM,CAACG,cAHM;AAAA,yDAGxCC,IAHwC;AAAA,UAGxCA,IAHwC,uCAGjC,CAHiC;AAAA,yDAG9BC,OAH8B;AAAA,UAG9BA,OAH8B,uCAGpB,EAHoB;AAIhD,UAAMC,OAAO,GAAG,KAAKxB,UAAL,CAAgByB,OAAhB,KAA4B,CAA5C;;AACA,UAAIL,OAAO,IAAIM,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGE,OAAhB,IAA2B,CAAtC,IAA2CD,OAAO,GAAGD,IAAzD,EAA+D;AAC7DJ,QAAAA,MAAM,CAACN,iBAAP,CAAyBc,IAAI,CAACE,KAAL,CAAWJ,OAAX,CAAzB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;;;;SA7BkBzB,gB","sourcesContent":["import { ILayer, ILayerPlugin, IMapService, TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\n\n@injectable()\nexport default class DataSourcePlugin implements ILayerPlugin {\n  protected mapService: IMapService;\n  public apply(layer: ILayer) {\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    layer.hooks.init.tap('DataSourcePlugin', () => {\n      const { data, options } = layer.sourceOption;\n      layer.setSource(new Source(data, options));\n      this.updateClusterData(layer);\n    });\n\n    // 检测数据不否需要更新\n    layer.hooks.beforeRenderData.tap('DataSourcePlugin', () => {\n      const neeUpdate1 = this.updateClusterData(layer);\n      const neeUpdate2 = layer.dataState.dataSourceNeedUpdate;\n      layer.dataState.dataSourceNeedUpdate = false;\n      return neeUpdate1 || neeUpdate2;\n    });\n  }\n\n  private updateClusterData(layer: ILayer): boolean {\n    const source = layer.getSource();\n    const cluster = source.cluster;\n    const { zoom = 0, maxZoom = 16 } = source.clusterOptions;\n    const newZoom = this.mapService.getZoom() - 1;\n    if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {\n      source.updateClusterData(Math.floor(newZoom));\n      return true;\n    }\n    return false;\n  }\n}\n"],"file":"DataSourcePlugin.js"}