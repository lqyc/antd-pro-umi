import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class, _temp;

import { TYPES } from '@antv/l7-core';
import Source from '@antv/l7-source';
import { injectable } from 'inversify';
var DataSourcePlugin = (_dec = injectable(), _dec(_class = (_temp = function () {
  function DataSourcePlugin() {
    _classCallCheck(this, DataSourcePlugin);

    this.mapService = void 0;
  }

  _createClass(DataSourcePlugin, [{
    key: "apply",
    value: function apply(layer) {
      var _this = this;

      this.mapService = layer.getContainer().get(TYPES.IMapService);
      layer.hooks.init.tap('DataSourcePlugin', function () {
        var _layer$sourceOption = layer.sourceOption,
            data = _layer$sourceOption.data,
            options = _layer$sourceOption.options;
        layer.setSource(new Source(data, options));

        _this.updateClusterData(layer);
      });
      layer.hooks.beforeRenderData.tap('DataSourcePlugin', function () {
        var neeUpdate1 = _this.updateClusterData(layer);

        var neeUpdate2 = layer.dataState.dataSourceNeedUpdate;
        layer.dataState.dataSourceNeedUpdate = false;
        return neeUpdate1 || neeUpdate2;
      });
    }
  }, {
    key: "updateClusterData",
    value: function updateClusterData(layer) {
      var source = layer.getSource();
      var cluster = source.cluster;
      var _source$clusterOption = source.clusterOptions,
          _source$clusterOption2 = _source$clusterOption.zoom,
          zoom = _source$clusterOption2 === void 0 ? 0 : _source$clusterOption2,
          _source$clusterOption3 = _source$clusterOption.maxZoom,
          maxZoom = _source$clusterOption3 === void 0 ? 16 : _source$clusterOption3;
      var newZoom = this.mapService.getZoom() - 1;

      if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {
        source.updateClusterData(Math.floor(newZoom));
        return true;
      }

      return false;
    }
  }]);

  return DataSourcePlugin;
}(), _temp)) || _class);
export { DataSourcePlugin as default };
//# sourceMappingURL=DataSourcePlugin.js.map