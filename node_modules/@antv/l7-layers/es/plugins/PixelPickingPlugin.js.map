{"version":3,"sources":["../../src/plugins/PixelPickingPlugin.ts"],"names":["AttributeType","gl","decodePickingColor","encodePickingColor","rgb2arr","injectable","PickingStage","NONE","ENCODE","HIGHLIGHT","PixelPickingPlugin","layer","rendererService","styleAttributeService","hooks","init","tap","getLayerConfig","enablePicking","registerStyleAttribute","name","type","Attribute","descriptor","buffer","data","FLOAT","size","update","feature","featureIdx","id","beforePickingEncode","isVisible","models","forEach","model","addUniforms","u_PickingStage","afterPickingEncode","beforeHighlight","pickedColor","highlightColor","highlightColorInArray","updateLayerConfig","pickedFeatureID","Uint8Array","u_PickingColor","u_HighlightColor","map","c","beforeSelect","selectColor"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  IRendererService,\n  IStyleAttributeService,\n} from '@antv/l7-core';\nimport {\n  decodePickingColor,\n  encodePickingColor,\n  rgb2arr,\n} from '@antv/l7-utils';\nimport { injectable } from 'inversify';\n\nconst PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0,\n};\n\n@injectable()\nexport default class PixelPickingPlugin implements ILayerPlugin {\n  public apply(\n    layer: ILayer,\n    {\n      rendererService,\n      styleAttributeService,\n    }: {\n      rendererService: IRendererService;\n      styleAttributeService: IStyleAttributeService;\n    },\n  ) {\n    // TODO: 由于 Shader 目前无法根据是否开启拾取进行内容修改，因此即使不开启也需要生成 a_PickingColor\n    layer.hooks.init.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      styleAttributeService.registerStyleAttribute({\n        name: 'pickingColor',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_PickingColor',\n          buffer: {\n            data: [],\n            type: gl.FLOAT,\n          },\n          size: 3,\n          // TODO: 固定 feature range 范围内的 pickingColor 都是固定的，可以生成 cache\n          update: (feature: IEncodeFeature, featureIdx: number) => {\n            // 只有开启拾取才需要 encode\n            const { id } = feature;\n            return enablePicking ? encodePickingColor(id as number) : [0, 0, 0];\n          },\n        },\n      });\n    });\n    // 必须要与 PixelPickingPass 结合使用，因此必须开启 multiPassRenderer\n    // if (layer.multiPassRenderer) {\n    layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      if (enablePicking && layer.isVisible()) {\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.ENCODE,\n          }),\n        );\n      }\n    });\n\n    layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      // 区分选中高亮 和滑过高亮\n      if (enablePicking && layer.isVisible()) {\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n          }),\n        );\n      }\n    });\n\n    layer.hooks.beforeHighlight.tap(\n      'PixelPickingPlugin',\n      (pickedColor: number[]) => {\n        const { highlightColor } = layer.getLayerConfig();\n        const highlightColorInArray =\n          typeof highlightColor === 'string'\n            ? rgb2arr(highlightColor)\n            : highlightColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor)),\n        });\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map((c) => c * 255),\n          }),\n        );\n      },\n    );\n\n    layer.hooks.beforeSelect.tap(\n      'PixelPickingPlugin',\n      (pickedColor: number[]) => {\n        const { selectColor } = layer.getLayerConfig();\n        const highlightColorInArray =\n          typeof selectColor === 'string'\n            ? rgb2arr(selectColor)\n            : selectColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor)),\n        });\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map((c) => c * 255),\n          }),\n        );\n      },\n    );\n    // }\n  }\n}\n"],"file":"PixelPickingPlugin.js"}