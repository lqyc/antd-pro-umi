{"version":3,"sources":["../../src/polygon/index.ts"],"names":["BaseLayer","PolygonModels","PolygonLayer","type","shape","getModelType","layerModel","models","initModels","buildModels","properties","opacity","minimum","maximum","shapeAttribute","styleAttributeService","getLayerStyleAttribute","scale","field","getPointModelType","layerData","getEncodedData","getLayerConfig","shape2d","shape3d","iconMap","iconService","getIconMap","item","find","fe","hasOwnProperty","indexOf"],"mappings":";;;;;;;;;;AACA,OAAOA,SAAP,MAAsB,mBAAtB;AAEA,OAAOC,aAAP,MAAgD,WAAhD;;IAMqBC,Y;;;;;;;;;;;;;;;UACZC,I,GAAe,c;;;;;;WACtB,uBAAqB;AACnB,UAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;AACA,WAAKC,UAAL,GAAkB,IAAIL,aAAa,CAACG,KAAD,CAAjB,CAAyB,IAAzB,CAAlB;AACA,WAAKG,MAAL,GAAc,KAAKD,UAAL,CAAgBE,UAAhB,EAAd;AACD;;;WACD,yBAAuB;AACrB,WAAKD,MAAL,GAAc,KAAKD,UAAL,CAAgBG,WAAhB,EAAd;AACD;;;WACD,2BAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPR,YAAAA,IAAI,EAAE,QADC;AAEPS,YAAAA,OAAO,EAAE,CAFF;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WAED,wBAA2C;AAAA;;AACzC,UAAMC,cAAc,GAAG,KAAKC,qBAAL,CAA2BC,sBAA3B,CACrB,OADqB,CAAvB;AAGA,UAAMZ,KAAK,GAAGU,cAAH,aAAGA,cAAH,gDAAGA,cAAc,CAAEG,KAAnB,0DAAG,sBAAuBC,KAArC;;AACA,UAAId,KAAK,KAAK,MAAd,EAAsB;AACpB,eAAO,MAAP;AACD,OAFD,MAEO,IAAIA,KAAK,KAAK,SAAd,EAAyB;AAC9B,eAAO,SAAP;AACD,OAFM,MAEA,IAAIA,KAAK,KAAK,MAAd,EAAsB;AAC3B,eAAO,MAAP;AACD,OAFM,MAEA;AACL,eAAO,KAAKe,iBAAL,EAAP;AACD;AACF;;;WACD,6BAAgD;AAG9C,UAAMC,SAAS,GAAG,KAAKC,cAAL,EAAlB;;AAH8C,iCAIjB,KAAKC,cAAL,EAJiB;AAAA,UAItCC,OAJsC,wBAItCA,OAJsC;AAAA,UAI7BC,OAJ6B,wBAI7BA,OAJ6B;;AAK9C,UAAMC,OAAO,GAAG,KAAKC,WAAL,CAAiBC,UAAjB,EAAhB;AACA,UAAMC,IAAI,GAAGR,SAAS,CAACS,IAAV,CAAe,UAACC,EAAD,EAAwB;AAClD,eAAOA,EAAE,CAACC,cAAH,CAAkB,OAAlB,CAAP;AACD,OAFY,CAAb;;AAGA,UAAI,CAACH,IAAL,EAAW;AACT,eAAO,MAAP;AACD,OAFD,MAEO;AACL,YAAMxB,KAAK,GAAGwB,IAAI,CAACxB,KAAnB;;AACA,YAAIA,KAAK,KAAK,KAAd,EAAqB;AACnB,iBAAO,cAAP;AACD;;AACD,YAAI,CAAAmB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAES,OAAT,CAAiB5B,KAAjB,OAAsC,CAAC,CAA3C,EAA8C;AAC5C,iBAAO,YAAP;AACD;;AACD,YAAI,CAAAoB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEQ,OAAT,CAAiB5B,KAAjB,OAAsC,CAAC,CAA3C,EAA8C;AAC5C,iBAAO,eAAP;AACD;;AACD,YAAIqB,OAAO,CAACM,cAAR,CAAuB3B,KAAvB,CAAJ,EAA6C;AAC3C,iBAAO,aAAP;AACD;;AACD,eAAO,MAAP;AACD;AACF;;;;EAhEuCJ,S;;SAArBE,Y","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport { PointType } from '../point/models/';\nimport PolygonModels, { PolygonModelType } from './models/';\n\ninterface IPolygonLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class PolygonLayer extends BaseLayer<IPolygonLayerStyleOptions> {\n  public type: string = 'PolygonLayer';\n  public buildModels() {\n    const shape = this.getModelType();\n    this.layerModel = new PolygonModels[shape](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected getModelType(): PolygonModelType {\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shape = shapeAttribute?.scale?.field as PolygonModelType;\n    if (shape === 'fill') {\n      return 'fill';\n    } else if (shape === 'extrude') {\n      return 'extrude';\n    } else if (shape === 'line') {\n      return 'line';\n    } else {\n      return this.getPointModelType();\n    }\n  }\n  protected getPointModelType(): PolygonModelType {\n    // pointlayer\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const { shape2d, shape3d } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return 'fill';\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'point_normal';\n      }\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return 'point_fill';\n      }\n      if (shape3d?.indexOf(shape as string) !== -1) {\n        return 'point_extrude';\n      }\n      if (iconMap.hasOwnProperty(shape as string)) {\n        return 'point_image';\n      }\n      return 'text';\n    }\n  }\n}\n"],"file":"index.js"}