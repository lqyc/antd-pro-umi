{"version":3,"sources":["../../../src/heatmap/models/heatmap.ts"],"names":["AttributeType","gl","generateColorRamp","mat4","BaseModel","HeatmapTriangulation","heatMap3DTriangulation","HeatMapModel","texture","colorTexture","heatmapFramerBuffer","intensityModel","colorModel","shapeType","rendererService","clear","useFramebuffer","color","depth","stencil","framebuffer","drawIntensityMode","layer","styleNeedUpdate","updateColorTexture","drawColorMode","draw3DHeatMap","Error","createFramebuffer","getViewportSize","createTexture2D","shapeAttr","styleAttributeService","getLayerStyleAttribute","scale","field","buildHeatMapIntensity","buildHeatmapColor","build3dHeatMap","getLayerConfig","rampColors","imageData","width","height","Math","floor","wrapS","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","initModels","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","buildLayerModel","moduleName","vertexShader","heatmapVert","fragmentShader","heatmapFrag","triangulation","enable","blend","func","srcRGB","ONE","srcAlpha","dstRGB","dstAlpha","shaderModuleService","registerModule","vs","heatmapColorVert","fs","heatmapColorFrag","getModule","uniforms","createAttribute","createElements","createBuffer","createModel","attributes","a_Position","a_Uv","getBlend","count","elements","UNSIGNED_INT","opacity","intensity","radius","draw","u_opacity","u_radius","u_intensity","u_colorTexture","u_texture","invert","create","fromValues","cameraService","getViewProjectionMatrixUncentered","u_ViewProjectionMatrixUncentered","u_InverseViewProjectionMatrix","heatmap3DVert","heatmap3DFrag","vertices","uvs","primitive","TRIANGLES","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","indices","length","destroy","Uint8Array","NEAREST","flipY"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IFramebuffer,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport BaseModel from '../../core/BaseModel';\nimport { HeatmapTriangulation } from '../../core/triangulation';\nimport heatmap3DFrag from '../shaders/heatmap_3d_frag.glsl';\nimport heatmap3DVert from '../shaders/heatmap_3d_vert.glsl';\nimport heatmapColorFrag from '../shaders/heatmap_frag.glsl';\nimport heatmapFrag from '../shaders/heatmap_framebuffer_frag.glsl';\nimport heatmapVert from '../shaders/heatmap_framebuffer_vert.glsl';\nimport heatmapColorVert from '../shaders/heatmap_vert.glsl';\nimport { heatMap3DTriangulation } from '../triangulation';\ninterface IHeatMapLayerStyleOptions {\n  opacity: number;\n  intensity: number;\n  radius: number;\n  angle: number;\n  rampColors: IColorRamp;\n}\n\nexport default class HeatMapModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected colorTexture: ITexture2D;\n  protected heatmapFramerBuffer: IFramebuffer;\n  private intensityModel: IModel;\n  private colorModel: IModel;\n  private shapeType: string;\n\n  public render() {\n    const { clear, useFramebuffer } = this.rendererService;\n    useFramebuffer(this.heatmapFramerBuffer, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.heatmapFramerBuffer,\n      });\n      this.drawIntensityMode();\n    });\n    if (this.layer.styleNeedUpdate) {\n      this.updateColorTexture();\n    }\n    this.shapeType === 'heatmap' ? this.drawColorMode() : this.draw3DHeatMap();\n  }\n\n  public getUninforms(): IModelUniform {\n    throw new Error('Method not implemented.');\n  }\n\n  public initModels(): IModel[] {\n    const {\n      createFramebuffer,\n      clear,\n      getViewportSize,\n      createTexture2D,\n      useFramebuffer,\n    } = this.rendererService;\n    const shapeAttr = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shapeType = shapeAttr?.scale?.field || 'heatmap';\n    this.shapeType = shapeType as string;\n    // 生成热力图密度图\n    this.intensityModel = this.buildHeatMapIntensity();\n    // 渲染到屏幕\n    this.colorModel =\n      shapeType === 'heatmap'\n        ? this.buildHeatmapColor() // 2D\n        : this.build3dHeatMap(); // 3D\n\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    const { width, height } = getViewportSize();\n\n    // 初始化密度图纹理\n    this.heatmapFramerBuffer = createFramebuffer({\n      color: createTexture2D({\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n      }),\n      depth: false,\n    });\n\n    this.updateColorTexture();\n\n    return [this.intensityModel, this.colorModel];\n  }\n\n  public buildModels(): IModel[] {\n    return this.initModels();\n  }\n\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'dir',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Dir',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return [size as number];\n        },\n      },\n    });\n  }\n  private buildHeatMapIntensity(): IModel {\n    return this.layer.buildLayerModel({\n      moduleName: 'heatmapintensity',\n      vertexShader: heatmapVert,\n      fragmentShader: heatmapFrag,\n      triangulation: HeatmapTriangulation,\n      depth: {\n        enable: false,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          srcAlpha: 1,\n          dstRGB: gl.ONE,\n          dstAlpha: 1,\n        },\n      },\n    });\n  }\n\n  private buildHeatmapColor(): IModel {\n    this.shaderModuleService.registerModule('heatmapColor', {\n      vs: heatmapColorVert,\n      fs: heatmapColorFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmapColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: [0, 1, 1, 1, 0, 0, 1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: false,\n      },\n      blend: this.getBlend(),\n      count: 6,\n      elements: createElements({\n        data: [0, 2, 1, 2, 3, 1],\n        type: gl.UNSIGNED_INT,\n        count: 6,\n      }),\n    });\n  }\n\n  private drawIntensityMode() {\n    const {\n      opacity,\n      intensity = 10,\n      radius = 5,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.intensityModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_radius: radius,\n        u_intensity: intensity,\n      },\n    });\n  }\n\n  private drawColorMode() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n      },\n    });\n  }\n\n  private draw3DHeatMap() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const invert = mat4.invert(\n      mat4.create(),\n      mat4.fromValues(\n        // @ts-ignore\n        ...this.cameraService.getViewProjectionMatrixUncentered(),\n      ),\n    ) as mat4;\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n        u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n        u_InverseViewProjectionMatrix: [...invert],\n      },\n    });\n  }\n  private build3dHeatMap() {\n    const { getViewportSize } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n    this.shaderModuleService.registerModule('heatmap3dColor', {\n      vs: heatmap3DVert,\n      fs: heatmap3DFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmap3dColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.uvs,\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      primitive: gl.TRIANGLES,\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: true,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1,\n        },\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length,\n      }),\n    });\n  }\n  private updateStyle() {\n    this.updateColorTexture();\n  }\n\n  private updateColorTexture() {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: new Uint8Array(imageData.data),\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n    });\n  }\n}\n"],"file":"heatmap.js"}