{"version":3,"sources":["../../../src/citybuliding/models/build.ts"],"names":["AttributeType","gl","rgb2arr","BaseModel","PolygonExtrudeTriangulation","CityBuildModel","layer","getLayerConfig","opacity","baseColor","brightColor","windowColor","time","u_opacity","u_baseColor","u_brightColor","u_windowColor","u_time","getLayerAnimateTime","startModelAnimate","buildLayerModel","moduleName","vertexShader","buildVert","fragmentShader","buildFrag","triangulation","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","STATIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","normal","DYNAMIC_DRAW","Array","isArray"],"mappings":"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","sourcesContent":["import { AttributeType, gl, IEncodeFeature, IModel } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { PolygonExtrudeTriangulation } from '../../core/triangulation';\nimport buildFrag from '../shaders/build_frag.glsl';\nimport buildVert from '../shaders/build_vert.glsl';\ninterface ICityBuildLayerStyleOptions {\n  opacity: number;\n  baseColor: string;\n  brightColor: string;\n  windowColor: string;\n  time: number;\n}\nexport default class CityBuildModel extends BaseModel {\n  public getUninforms() {\n    const {\n      opacity = 1,\n      baseColor = 'rgb(16,16,16)',\n      brightColor = 'rgb(255,176,38)',\n      windowColor = 'rgb(30,60,89)',\n      time = 0,\n    } = this.layer.getLayerConfig() as ICityBuildLayerStyleOptions;\n    return {\n      u_opacity: opacity,\n      u_baseColor: rgb2arr(baseColor),\n      u_brightColor: rgb2arr(brightColor),\n      u_windowColor: rgb2arr(windowColor),\n      u_time: this.layer.getLayerAnimateTime() || time,\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.startModelAnimate();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'cityBuilding',\n        vertexShader: buildVert,\n        fragmentShader: buildFrag,\n        triangulation: PolygonExtrudeTriangulation,\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 10 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"],"file":"build.js"}