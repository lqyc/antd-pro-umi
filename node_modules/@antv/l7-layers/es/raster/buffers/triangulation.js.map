{"version":3,"sources":["../../../src/raster/buffers/triangulation.ts"],"names":["Martini","RasterTriangulation","parserData","coordinates","data","min","max","width","height","maxlength","Math","gridSize","pow","ceil","log2","terrain","Float32Array","i","j","martini","tile","createTile","mesh","getMesh","vertices","Array","from","indices","triangles","size"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAO,SAASC,mBAAT,CAA6BC,UAA7B,EAAyD;AAAA,MACtDC,WADsD,GACPD,UADO,CACtDC,WADsD;AAAA,MACzCC,IADyC,GACPF,UADO,CACzCE,IADyC;AAAA,MACnCC,GADmC,GACPH,UADO,CACnCG,GADmC;AAAA,MAC9BC,GAD8B,GACPJ,UADO,CAC9BI,GAD8B;AAAA,MACzBC,KADyB,GACPL,UADO,CACzBK,KADyB;AAAA,MAClBC,MADkB,GACPN,UADO,CAClBM,MADkB;AAE9D,MAAMC,SAAS,GAAGC,IAAI,CAACJ,GAAL,CAASC,KAAT,EAAgBC,MAAhB,CAAlB;AACA,MAAMG,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYF,IAAI,CAACG,IAAL,CAAUH,IAAI,CAACI,IAAL,CAAUL,SAAV,CAAV,CAAZ,IAA+C,CAAhE;AACA,MAAMM,OAAO,GAAG,IAAIC,YAAJ,CAAiBL,QAAQ,GAAGA,QAA5B,CAAhB;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAApB,EAA2BU,CAAC,EAA5B,EAAgC;AAC9B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAApB,EAA4BU,CAAC,EAA7B,EAAiC;AAC/BH,MAAAA,OAAO,CAACE,CAAC,GAAGN,QAAJ,GAAeO,CAAhB,CAAP,GAA4Bd,IAAI,CAACa,CAAC,GAAGV,KAAJ,GAAYW,CAAb,CAAhC;AACD;AACF;;AACD,MAAMC,OAAO,GAAG,IAAInB,OAAJ,CAAYW,QAAZ,CAAhB;AACA,MAAMS,IAAI,GAAGD,OAAO,CAACE,UAAR,CAAmBN,OAAnB,CAAb;AACA,MAAMO,IAAI,GAAGF,IAAI,CAACG,OAAL,CAAaZ,QAAQ,GAAG,CAAxB,CAAb;AACA,SAAO;AACLa,IAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACE,QAAhB,CADL;AAELG,IAAAA,OAAO,EAAEF,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACM,SAAhB,CAFJ;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD","sourcesContent":["import { IEncodeFeature, IParseDataItem } from '@antv/l7-core';\n// @ts-ignore\nimport Martini from '@mapbox/martini';\nexport function RasterTriangulation(parserData: IParseDataItem) {\n  const { coordinates, data, min, max, width, height } = parserData;\n  const maxlength = Math.max(width, height);\n  const gridSize = Math.pow(2, Math.ceil(Math.log2(maxlength))) + 1;\n  const terrain = new Float32Array(gridSize * gridSize);\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      terrain[i * gridSize + j] = data[i * width + j];\n    }\n  }\n  const martini = new Martini(gridSize);\n  const tile = martini.createTile(terrain);\n  const mesh = tile.getMesh(gridSize / 2);\n  return {\n    vertices: Array.from(mesh.vertices) as number[],\n    indices: Array.from(mesh.triangles) as number[],\n    size: 2,\n  };\n}\n"],"file":"triangulation.js"}