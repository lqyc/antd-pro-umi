import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AttributeType, gl } from '@antv/l7-core';
import { generateColorRamp } from '@antv/l7-utils';
import BaseLayer from '../core/BaseLayer';
import { RasterImageTriangulation } from '../core/triangulation';
var rasterImageFrag = "precision mediump float;\nuniform float u_opacity: 1.0;\nuniform sampler2D u_texture;\nuniform sampler2D u_colorTexture;\nuniform float u_min;\nuniform float u_max;\nuniform vec2 u_domain;\nuniform float u_noDataValue;\nuniform bool u_clampLow: true;\nuniform bool u_clampHigh: true;\nvarying vec2 v_texCoord;\n\nvoid main() {\n\n  float value = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y)).r;\n  if (value == u_noDataValue)\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\n  else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\n    gl_FragColor = vec4(0, 0, 0, 0);\n  else {\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] -u_domain[0]);\n    vec4 color = texture2D(u_colorTexture,vec2(normalisedValue, 0));\n    gl_FragColor = color;\n    gl_FragColor.a =  gl_FragColor.a * u_opacity ;\n  }\n\n\n}\n";
var rasterImageVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n#pragma include \"projection\"\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n}\n";

var Raster2dLayer = function (_BaseLayer) {
  _inherits(Raster2dLayer, _BaseLayer);

  var _super = _createSuper(Raster2dLayer);

  function Raster2dLayer() {
    var _this;

    _classCallCheck(this, Raster2dLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.type = 'RasterLayer';
    _this.texture = void 0;
    _this.colorTexture = void 0;
    return _this;
  }

  _createClass(Raster2dLayer, [{
    key: "buildModels",
    value: function buildModels() {
      this.registerBuiltinAttributes();
      var source = this.getSource();
      var createTexture2D = this.rendererService.createTexture2D;
      var parserDataItem = this.getSource().data.dataArray[0];
      this.texture = createTexture2D({
        data: parserDataItem.data,
        width: parserDataItem.width,
        height: parserDataItem.height,
        format: gl.LUMINANCE,
        type: gl.FLOAT,
        aniso: 4
      });

      var _this$getLayerConfig = this.getLayerConfig(),
          rampColors = _this$getLayerConfig.rampColors;

      var imageData = generateColorRamp(rampColors);
      this.colorTexture = createTexture2D({
        data: imageData.data,
        width: imageData.width,
        height: imageData.height,
        flipY: false
      });
      this.models = [this.buildLayerModel({
        moduleName: 'Raster3DImage',
        vertexShader: rasterImageVert,
        fragmentShader: rasterImageFrag,
        triangulation: RasterImageTriangulation,
        primitive: gl.TRIANGLES,
        depth: {
          enable: false
        },
        blend: {
          enable: true,
          func: {
            srcRGB: gl.SRC_ALPHA,
            srcAlpha: 1,
            dstRGB: gl.ONE_MINUS_SRC_ALPHA,
            dstAlpha: 1
          }
        }
      })];
    }
  }, {
    key: "renderModels",
    value: function renderModels() {
      var _this2 = this;

      var _this$getLayerConfig2 = this.getLayerConfig(),
          opacity = _this$getLayerConfig2.opacity;

      var parserDataItem = this.getSource().data.dataArray[0];
      var min = parserDataItem.min,
          max = parserDataItem.max;

      if (this.texture) {
        this.models.forEach(function (model) {
          return model.draw({
            uniforms: {
              u_opacity: opacity || 1,
              u_texture: _this2.texture,
              u_min: min,
              u_max: max,
              u_colorTexture: _this2.colorTexture
            }
          });
        });
      }

      return this;
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);

  return Raster2dLayer;
}(BaseLayer);

export { Raster2dLayer as default };
//# sourceMappingURL=raster2d.js.map