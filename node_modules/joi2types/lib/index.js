"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.joi2JsonSchema = exports.jsonSchema2Types = exports.default = exports.defaultOptions = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _jsonSchemaToTypescript() {
  const data = require("json-schema-to-typescript");

  _jsonSchemaToTypescript = function _jsonSchemaToTypescript() {
    return data;
  };

  return data;
}

var _transformer = _interopRequireDefault(require("./transformer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const defaultOptions = {
  interfaceName: 'JoiTypes',
  bannerComment: '',
  format: false
};
/**
 * convert into types
 */

exports.defaultOptions = defaultOptions;

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (schema, options = defaultOptions) {
    const opts = _objectSpread(_objectSpread({}, defaultOptions), options);

    const jsonSchema = (0, _transformer.default)(schema, opts);
    const bannerComment = opts.bannerComment,
          interfaceName = opts.interfaceName,
          format = opts.format;
    const types = yield (0, _jsonSchemaToTypescript().compile)(jsonSchema, interfaceName, {
      bannerComment,
      unknownAny: false,
      format
    });
    return types;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;

const jsonSchema2Types = _jsonSchemaToTypescript().compile;

exports.jsonSchema2Types = jsonSchema2Types;
const joi2JsonSchema = _transformer.default;
exports.joi2JsonSchema = joi2JsonSchema;