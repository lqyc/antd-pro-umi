"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _ = require("../");

var _object = _interopRequireDefault(require("./object"));

var _link = _interopRequireDefault(require("./link"));

var _alternatives = _interopRequireDefault(require("./alternatives"));

var _string = _interopRequireDefault(require("./string"));

var _function = _interopRequireDefault(require("./function"));

var _array = _interopRequireDefault(require("./array"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const transformer = (schema, options = _.defaultOptions) => {
  const typeMap = {
    object: _object.default,
    string: _string.default,
    function: _function.default,
    array: _array.default,
    alternatives: _alternatives.default,
    link: _link.default
  };

  if ((schema === null || schema === void 0 ? void 0 : schema.type) && typeMap[schema === null || schema === void 0 ? void 0 : schema.type]) {
    return typeMap[schema.type](schema, _objectSpread(_objectSpread({}, _.defaultOptions), options));
  }

  const _schema$type = schema.type,
        type = _schema$type === void 0 ? 'any' : _schema$type,
        _schema$_flags = schema._flags,
        _schema$_flags2 = _schema$_flags === void 0 ? {} : _schema$_flags,
        description = _schema$_flags2.description;

  return _objectSpread({
    type
  }, description ? {
    description
  } : {});
};

var _default = transformer;
exports.default = _default;