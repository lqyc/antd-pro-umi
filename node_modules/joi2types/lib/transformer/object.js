"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @ts-ignore
const parser = (schema, options) => {
  const type = schema.type,
        $_terms = schema.$_terms,
        _schema$_flags = schema._flags,
        _schema$_flags2 = _schema$_flags === void 0 ? {} : _schema$_flags,
        description = _schema$_flags2.description,
        presence = _schema$_flags2.presence,
        unknown = _schema$_flags2.unknown,
        _schema$_ids = schema._ids,
        _schema$_ids2 = _schema$_ids === void 0 ? {} : _schema$_ids,
        _byKey = _schema$_ids2._byKey;

  const properties = (($_terms === null || $_terms === void 0 ? void 0 : $_terms.keys) || []).map(propertySchema => {
    const key = propertySchema.key,
          schema = propertySchema.schema;
    return {
      key,
      property: (0, _.default)(schema, options)
    };
  }).reduce((acc, curr) => _objectSpread(_objectSpread({}, acc), {}, {
    [curr.key]: curr.property
  }), ($_terms === null || $_terms === void 0 ? void 0 : $_terms.keys) ? {} : null);
  return _objectSpread(_objectSpread(_objectSpread({
    type,
    additionalProperties: !!unknown
  }, properties ? {
    properties
  } : {}), description ? {
    description
  } : {}), presence === 'required' && (_byKey === null || _byKey === void 0 ? void 0 : _byKey.size) > 0 ? {
    required: Array.from(_byKey.keys())
  } : {});
};

var _default = parser;
exports.default = _default;