import "core-js/modules/es.array.concat";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';
import { pick } from "../../utils";
import Editor from "../Base/Editor";
import { CONTEXT_MENU_CONTAINER } from "../../common/constants";
import withGGEditorContext from "../../common/context/GGEditorContext/withGGEditorContext";
import Menu from "./Menu";

var ContextMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ContextMenu, _React$Component);

  function ContextMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ContextMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContextMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.contextMenu = null;
    return _this;
  }

  _createClass(ContextMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var editor = this.props.editor;
      this.contextMenu = new Editor.Contextmenu({
        container: this.containerId
      });
      editor.add(this.contextMenu);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return React.createElement("div", _extends({
        id: this.containerId
      }, pick(this.props, ['style', 'className'])), children);
    }
  }, {
    key: "containerId",
    get: function get() {
      var editor = this.props.editor;
      return "".concat(CONTEXT_MENU_CONTAINER, "_").concat(editor.id);
    }
  }]);

  return ContextMenu;
}(React.Component);

export var NodeMenu = Menu.create('node');
export var EdgeMenu = Menu.create('edge');
export var GroupMenu = Menu.create('group');
export var MultiMenu = Menu.create('multi');
export var CanvasMenu = Menu.create('canvas');
export default withGGEditorContext(ContextMenu);