import "core-js/modules/es.array.concat";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';
import Editor from "../Base/Editor";
import { pick } from "../../utils";
import { TOOLBAR_CONTAINER } from "../../common/constants";
import withGGEditorContext from "../../common/context/GGEditorContext/withGGEditorContext";

var Toolbar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Toolbar, _React$Component);

  _createClass(Toolbar, [{
    key: "containerId",
    get: function get() {
      var editor = this.props.editor;
      return "".concat(TOOLBAR_CONTAINER, "_").concat(editor.id);
    }
  }]);

  function Toolbar(props) {
    var _this;

    _classCallCheck(this, Toolbar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).call(this, props));
    _this.toolbar = null;
    var editor = props.editor,
        onAfterAddPage = props.onAfterAddPage;
    onAfterAddPage(function () {
      _this.toolbar = new Editor.Toolbar({
        container: _this.containerId
      });
      editor.add(_this.toolbar);
    });
    return _this;
  }

  _createClass(Toolbar, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return React.createElement("div", _extends({
        id: this.containerId
      }, pick(this.props, ['style', 'className'])), children);
    }
  }]);

  return Toolbar;
}(React.Component);

export default withGGEditorContext(Toolbar);